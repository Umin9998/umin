{"version":3,"sources":["generators/python/colour.ts","generators/python/lists.ts","generators/python/logic.ts","generators/python/loops.ts","generators/python/math.ts","generators/python/procedures.ts","generators/python/text.ts","generators/python/variables.ts","generators/python/python_generator.ts","generators/python/variables_dynamic.ts","generators/python.ts"],"names":["colour_picker","block","generator","quote_","code","getFieldValue","Order","ATOMIC","colour_random","definitions_","FUNCTION_CALL","colour_rgb","functionName","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","r","valueToCode","NONE","g","b","colour_blend","colour1","colour2","ratio","lists_create_empty","lists_create_with","elements","Array","itemCount_","i","join","lists_repeat","item","times","MULTIPLICATIVE","lists_length","lists_isEmpty","LOGICAL_NOT","lists_indexOf","list","errorIndex","firstIndexAdjustment","lastIndexAdjustment","workspace","options","oneBasedIndex","lists_getIndex","mode","where","listOrder","MEMBER","at","getAdjustedInt","Error","lists_setIndex","value","match","listVar","nameDB_","getDistinctName","NameType","VARIABLE","xVar","lists_getSublist","where1","where2","at1","at2","isNumber","String","lists_sort","type","reverse","sortFunctionName","lists_split","value_input","value_delim","lists_reverse","controls_if","n","branchCode","conditionCode","STATEMENT_PREFIX","injectId","statementToCode","PASS","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","logic_compare","operator","OPERATORS","order","RELATIONAL","argument0","argument1","logic_operation","LOGICAL_AND","LOGICAL_OR","defaultArgument","logic_negate","logic_boolean","logic_null","logic_ternary","value_if","CONDITIONAL","value_then","value_else","controls_repeat_ext","repeats","getField","parseInt","branch","addLoopTrap","loopVar","controls_whileUntil","until","controls_for","variable0","getVariableName","increment","defineUpRange","defineDownRange","Number","Math","abs","range","scrub","arg","suffix","varName","startVar","endVar","incVar","controls_forEach","controls_flow_statements","xfix","loop","getSurroundLoop","suppressPrefixSuffix","math_number","number","Infinity","UNARY_SIGN","math_arithmetic","tuple","ADDITIVE","EXPONENTIATION","math_single","math_constant","CONSTANTS","constant","math_number_property","PROPERTIES","dropdownProperty","inputOrder","outputOrder","numberToCheck","divisor","math_change","math_on_list","func","math_modulo","math_constrain","argument2","math_random_int","math_random_float","math_atan2","procedures_defreturn","globals","usedVariables","allUsedVarModels","variable","name","getVars","indexOf","push","devVarList","allDeveloperVariables","length","getName","DEVELOPER_VARIABLE","globalString","funcName","getProcedureName","xfix1","loopTrap","INFINITE_LOOP_TRAP","returnValue","xfix2","args","variables","scrub_","procedures_callreturn","procedures_callnoreturn","forBlock","procedures_ifreturn","hasReturnValue_","text","text_multiline","multiline_quote_","text_join","element","codeAndOrder","forceString","element0","element1","tempVar","text_append","text_length","text_isEmpty","text_indexOf","substring","text_charAt","textOrder","text_getSubstring","text_changeCase","text_trim","text_print","text_prompt_ext","msg","text_count","sub","text_replace","from","to","text_reverse","variables_get","variables_set","COLLECTION","STRING_CONVERSION","BITWISE_NOT","BITWISE_SHIFT","BITWISE_AND","BITWISE_XOR","BITWISE_OR","LAMBDA","PythonGenerator","CodeGenerator","constructor","ORDER_OVERRIDES","isInitialized","key","addReservedWords","init","reset","Names","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","defvars","DEVELOPER_VARIABLE_TYPE","getId","finish","imports","definitions","def","replace","scrubNakedValue","line","string","quote","split","map","lines","thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","wrap","COMMENT_WRAP","inputList","inputTypes","VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","atId","delta","negate","defaultAtIndex","atOrder","$jscomp$tmp$exports$module$name","controls_ifelse","controls_repeat","math_round","math_trig","procedures_defnoreturn","strRegExp","test","text_prompt","pythonGenerator","generators","colour","lists","logic","loops","math","procedures","variablesDynamic"],"mappings":"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","file":"python_compressed.js","sourcesContent":["/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Python for colour blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Python.colour\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {PythonGenerator} from './python_generator.js';\r\nimport {Order} from './python_generator.js';\r\n\r\nexport function colour_picker(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Colour picker.\r\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function colour_random(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Generate a random colour.\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['import_random'] =\r\n    'import random';\r\n  const code = \"'#%06x' % random.randint(0, 2**24 - 1)\";\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function colour_rgb(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Compose a colour from RGB components expressed as percentages.\r\n  const functionName = generator.provideFunction_(\r\n    'colour_rgb',\r\n    `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(r, g, b):\r\n  r = round(min(100, max(0, r)) * 2.55)\r\n  g = round(min(100, max(0, g)) * 2.55)\r\n  b = round(min(100, max(0, b)) * 2.55)\r\n  return '#%02x%02x%02x' % (r, g, b)\r\n`,\r\n  );\r\n  const r = generator.valueToCode(block, 'RED', Order.NONE) || 0;\r\n  const g = generator.valueToCode(block, 'GREEN', Order.NONE) || 0;\r\n  const b = generator.valueToCode(block, 'BLUE', Order.NONE) || 0;\r\n  const code = functionName + '(' + r + ', ' + g + ', ' + b + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function colour_blend(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Blend two colours together.\r\n  const functionName = generator.provideFunction_(\r\n    'colour_blend',\r\n    `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(colour1, colour2, ratio):\r\n  r1, r2 = int(colour1[1:3], 16), int(colour2[1:3], 16)\r\n  g1, g2 = int(colour1[3:5], 16), int(colour2[3:5], 16)\r\n  b1, b2 = int(colour1[5:7], 16), int(colour2[5:7], 16)\r\n  ratio = min(1, max(0, ratio))\r\n  r = round(r1 * (1 - ratio) + r2 * ratio)\r\n  g = round(g1 * (1 - ratio) + g2 * ratio)\r\n  b = round(b1 * (1 - ratio) + b2 * ratio)\r\n  return '#%02x%02x%02x' % (r, g, b)\r\n`,\r\n  );\r\n  const colour1 =\r\n    generator.valueToCode(block, 'COLOUR1', Order.NONE) || \"'#000000'\";\r\n  const colour2 =\r\n    generator.valueToCode(block, 'COLOUR2', Order.NONE) || \"'#000000'\";\r\n  const ratio = generator.valueToCode(block, 'RATIO', Order.NONE) || 0;\r\n  const code =\r\n    functionName + '(' + colour1 + ', ' + colour2 + ', ' + ratio + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Python for list blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Python.lists\r\n\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport type {CreateWithBlock} from '../../blocks/lists.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport {Order} from './python_generator.js';\r\nimport type {PythonGenerator} from './python_generator.js';\r\n\r\nexport function lists_create_empty(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Create an empty list.\r\n  return ['[]', Order.ATOMIC];\r\n}\r\n\r\nexport function lists_create_with(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Create a list with any number of elements of any type.\r\n  const createWithBlock = block as CreateWithBlock;\r\n  const elements = new Array(createWithBlock.itemCount_);\r\n  for (let i = 0; i < createWithBlock.itemCount_; i++) {\r\n    elements[i] = generator.valueToCode(block, 'ADD' + i, Order.NONE) || 'None';\r\n  }\r\n  const code = '[' + elements.join(', ') + ']';\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function lists_repeat(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Create a list with one element repeated.\r\n  const item = generator.valueToCode(block, 'ITEM', Order.NONE) || 'None';\r\n  const times =\r\n    generator.valueToCode(block, 'NUM', Order.MULTIPLICATIVE) || '0';\r\n  const code = '[' + item + '] * ' + times;\r\n  return [code, Order.MULTIPLICATIVE];\r\n}\r\n\r\nexport function lists_length(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // String or array length.\r\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || '[]';\r\n  return ['len(' + list + ')', Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_isEmpty(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Is the string null or array empty?\r\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || '[]';\r\n  const code = 'not len(' + list + ')';\r\n  return [code, Order.LOGICAL_NOT];\r\n}\r\n\r\nexport function lists_indexOf(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Find an item in the list.\r\n  const item = generator.valueToCode(block, 'FIND', Order.NONE) || '[]';\r\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\r\n  let errorIndex = ' -1';\r\n  let firstIndexAdjustment = '';\r\n  let lastIndexAdjustment = ' - 1';\r\n\r\n  if (block.workspace.options.oneBasedIndex) {\r\n    errorIndex = ' 0';\r\n    firstIndexAdjustment = ' + 1';\r\n    lastIndexAdjustment = '';\r\n  }\r\n\r\n  let functionName;\r\n  if (block.getFieldValue('END') === 'FIRST') {\r\n    functionName = generator.provideFunction_(\r\n      'first_index',\r\n      `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(my_list, elem):\r\n  try: index = my_list.index(elem)${firstIndexAdjustment}\r\n  except: index =${errorIndex}\r\n  return index\r\n`,\r\n    );\r\n  } else {\r\n    functionName = generator.provideFunction_(\r\n      'last_index',\r\n      `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(my_list, elem):\r\n  try: index = len(my_list) - my_list[::-1].index(elem)${lastIndexAdjustment}\r\n  except: index =${errorIndex}\r\n  return index\r\n`,\r\n    );\r\n  }\r\n  const code = functionName + '(' + list + ', ' + item + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_getIndex(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] | string {\r\n  // Get element at index.\r\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\r\n  const mode = block.getFieldValue('MODE') || 'GET';\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  const listOrder = where === 'RANDOM' ? Order.NONE : Order.MEMBER;\r\n  const list = generator.valueToCode(block, 'VALUE', listOrder) || '[]';\r\n\r\n  switch (where) {\r\n    case 'FIRST':\r\n      if (mode === 'GET') {\r\n        const code = list + '[0]';\r\n        return [code, Order.MEMBER];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const code = list + '.pop(0)';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'REMOVE') {\r\n        return list + '.pop(0)\\n';\r\n      }\r\n      break;\r\n    case 'LAST':\r\n      if (mode === 'GET') {\r\n        const code = list + '[-1]';\r\n        return [code, Order.MEMBER];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const code = list + '.pop()';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'REMOVE') {\r\n        return list + '.pop()\\n';\r\n      }\r\n      break;\r\n    case 'FROM_START': {\r\n      const at = generator.getAdjustedInt(block, 'AT');\r\n      if (mode === 'GET') {\r\n        const code = list + '[' + at + ']';\r\n        return [code, Order.MEMBER];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const code = list + '.pop(' + at + ')';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'REMOVE') {\r\n        return list + '.pop(' + at + ')\\n';\r\n      }\r\n      break;\r\n    }\r\n    case 'FROM_END': {\r\n      const at = generator.getAdjustedInt(block, 'AT', 1, true);\r\n      if (mode === 'GET') {\r\n        const code = list + '[' + at + ']';\r\n        return [code, Order.MEMBER];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const code = list + '.pop(' + at + ')';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'REMOVE') {\r\n        return list + '.pop(' + at + ')\\n';\r\n      }\r\n      break;\r\n    }\r\n    case 'RANDOM':\r\n      (generator as AnyDuringMigration).definitions_['import_random'] =\r\n        'import random';\r\n      if (mode === 'GET') {\r\n        const code = 'random.choice(' + list + ')';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else {\r\n        const functionName = generator.provideFunction_(\r\n          'lists_remove_random_item',\r\n          `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList):\r\n  x = int(random.random() * len(myList))\r\n  return myList.pop(x)\r\n`,\r\n        );\r\n        const code = functionName + '(' + list + ')';\r\n        if (mode === 'GET_REMOVE') {\r\n          return [code, Order.FUNCTION_CALL];\r\n        } else if (mode === 'REMOVE') {\r\n          return code + '\\n';\r\n        }\r\n      }\r\n      break;\r\n  }\r\n  throw Error('Unhandled combination (lists_getIndex).');\r\n}\r\n\r\nexport function lists_setIndex(block: Block, generator: PythonGenerator) {\r\n  // Set element at index.\r\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\r\n  let list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\r\n  const mode = block.getFieldValue('MODE') || 'GET';\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  const value = generator.valueToCode(block, 'TO', Order.NONE) || 'None';\r\n  // Cache non-trivial values to variables to prevent repeated look-ups.\r\n  // Closure, which accesses and modifies 'list'.\r\n  function cacheList() {\r\n    if (list.match(/^\\w+$/)) {\r\n      return '';\r\n    }\r\n    const listVar = generator.nameDB_!.getDistinctName(\r\n      'tmp_list',\r\n      NameType.VARIABLE,\r\n    );\r\n    const code = listVar + ' = ' + list + '\\n';\r\n    list = listVar;\r\n    return code;\r\n  }\r\n\r\n  switch (where) {\r\n    case 'FIRST':\r\n      if (mode === 'SET') {\r\n        return list + '[0] = ' + value + '\\n';\r\n      } else if (mode === 'INSERT') {\r\n        return list + '.insert(0, ' + value + ')\\n';\r\n      }\r\n      break;\r\n    case 'LAST':\r\n      if (mode === 'SET') {\r\n        return list + '[-1] = ' + value + '\\n';\r\n      } else if (mode === 'INSERT') {\r\n        return list + '.append(' + value + ')\\n';\r\n      }\r\n      break;\r\n    case 'FROM_START': {\r\n      const at = generator.getAdjustedInt(block, 'AT');\r\n      if (mode === 'SET') {\r\n        return list + '[' + at + '] = ' + value + '\\n';\r\n      } else if (mode === 'INSERT') {\r\n        return list + '.insert(' + at + ', ' + value + ')\\n';\r\n      }\r\n      break;\r\n    }\r\n    case 'FROM_END': {\r\n      const at = generator.getAdjustedInt(block, 'AT', 1, true);\r\n      if (mode === 'SET') {\r\n        return list + '[' + at + '] = ' + value + '\\n';\r\n      } else if (mode === 'INSERT') {\r\n        return list + '.insert(' + at + ', ' + value + ')\\n';\r\n      }\r\n      break;\r\n    }\r\n    case 'RANDOM': {\r\n      (generator as AnyDuringMigration).definitions_['import_random'] =\r\n        'import random';\r\n      let code = cacheList();\r\n      const xVar = generator.nameDB_!.getDistinctName(\r\n        'tmp_x',\r\n        NameType.VARIABLE,\r\n      );\r\n      code += xVar + ' = int(random.random() * len(' + list + '))\\n';\r\n      if (mode === 'SET') {\r\n        code += list + '[' + xVar + '] = ' + value + '\\n';\r\n        return code;\r\n      } else if (mode === 'INSERT') {\r\n        code += list + '.insert(' + xVar + ', ' + value + ')\\n';\r\n        return code;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  throw Error('Unhandled combination (lists_setIndex).');\r\n}\r\n\r\nexport function lists_getSublist(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Get sublist.\r\n  const list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\r\n  const where1 = block.getFieldValue('WHERE1');\r\n  const where2 = block.getFieldValue('WHERE2');\r\n  let at1;\r\n  switch (where1) {\r\n    case 'FROM_START':\r\n      at1 = generator.getAdjustedInt(block, 'AT1');\r\n      if (at1 === 0) {\r\n        at1 = '';\r\n      }\r\n      break;\r\n    case 'FROM_END':\r\n      at1 = generator.getAdjustedInt(block, 'AT1', 1, true);\r\n      break;\r\n    case 'FIRST':\r\n      at1 = '';\r\n      break;\r\n    default:\r\n      throw Error('Unhandled option (lists_getSublist)');\r\n  }\r\n\r\n  let at2;\r\n  switch (where2) {\r\n    case 'FROM_START':\r\n      at2 = generator.getAdjustedInt(block, 'AT2', 1);\r\n      break;\r\n    case 'FROM_END':\r\n      at2 = generator.getAdjustedInt(block, 'AT2', 0, true);\r\n      // Ensure that if the result calculated is 0 that sub-sequence will\r\n      // include all elements as expected.\r\n      if (!stringUtils.isNumber(String(at2))) {\r\n        (generator as AnyDuringMigration).definitions_['import_sys'] =\r\n          'import sys';\r\n        at2 += ' or sys.maxsize';\r\n      } else if (at2 === 0) {\r\n        at2 = '';\r\n      }\r\n      break;\r\n    case 'LAST':\r\n      at2 = '';\r\n      break;\r\n    default:\r\n      throw Error('Unhandled option (lists_getSublist)');\r\n  }\r\n  const code = list + '[' + at1 + ' : ' + at2 + ']';\r\n  return [code, Order.MEMBER];\r\n}\r\n\r\nexport function lists_sort(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Block for sorting a list.\r\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n  const type = block.getFieldValue('TYPE');\r\n  const reverse = block.getFieldValue('DIRECTION') === '1' ? 'False' : 'True';\r\n  const sortFunctionName = generator.provideFunction_(\r\n    'lists_sort',\r\n    `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(my_list, type, reverse):\r\n  def try_float(s):\r\n    try:\r\n      return float(s)\r\n    except:\r\n      return 0\r\n  key_funcs = {\r\n    \"NUMERIC\": try_float,\r\n    \"TEXT\": str,\r\n    \"IGNORE_CASE\": lambda s: str(s).lower()\r\n  }\r\n  key_func = key_funcs[type]\r\n  list_cpy = list(my_list)\r\n  return sorted(list_cpy, key=key_func, reverse=reverse)\r\n`,\r\n  );\r\n\r\n  const code =\r\n    sortFunctionName + '(' + list + ', \"' + type + '\", ' + reverse + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_split(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Block for splitting text into a list, or joining a list into text.\r\n  const mode = block.getFieldValue('MODE');\r\n  let code;\r\n  if (mode === 'SPLIT') {\r\n    const value_input =\r\n      generator.valueToCode(block, 'INPUT', Order.MEMBER) || \"''\";\r\n    const value_delim = generator.valueToCode(block, 'DELIM', Order.NONE);\r\n    code = value_input + '.split(' + value_delim + ')';\r\n  } else if (mode === 'JOIN') {\r\n    const value_input =\r\n      generator.valueToCode(block, 'INPUT', Order.NONE) || '[]';\r\n    const value_delim =\r\n      generator.valueToCode(block, 'DELIM', Order.MEMBER) || \"''\";\r\n    code = value_delim + '.join(' + value_input + ')';\r\n  } else {\r\n    throw Error('Unknown mode: ' + mode);\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_reverse(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Block for reversing a list.\r\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n  const code = 'list(reversed(' + list + '))';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Python for logic blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Python.logic\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {PythonGenerator} from './python_generator.js';\r\nimport {Order} from './python_generator.js';\r\n\r\nexport function controls_if(block: Block, generator: PythonGenerator) {\r\n  // If/elseif/else condition.\r\n  let n = 0;\r\n  let code = '',\r\n    branchCode,\r\n    conditionCode;\r\n  if (generator.STATEMENT_PREFIX) {\r\n    // Automatic prefix insertion is switched off for this block.  Add manually.\r\n    code += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  do {\r\n    conditionCode =\r\n      generator.valueToCode(block, 'IF' + n, Order.NONE) || 'False';\r\n    branchCode = generator.statementToCode(block, 'DO' + n) || generator.PASS;\r\n    if (generator.STATEMENT_SUFFIX) {\r\n      branchCode =\r\n        generator.prefixLines(\r\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n          generator.INDENT,\r\n        ) + branchCode;\r\n    }\r\n    code += (n === 0 ? 'if ' : 'elif ') + conditionCode + ':\\n' + branchCode;\r\n    n++;\r\n  } while (block.getInput('IF' + n));\r\n\r\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\r\n    branchCode = generator.statementToCode(block, 'ELSE') || generator.PASS;\r\n    if (generator.STATEMENT_SUFFIX) {\r\n      branchCode =\r\n        generator.prefixLines(\r\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n          generator.INDENT,\r\n        ) + branchCode;\r\n    }\r\n    code += 'else:\\n' + branchCode;\r\n  }\r\n  return code;\r\n}\r\n\r\nexport const controls_ifelse = controls_if;\r\n\r\nexport function logic_compare(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Comparison operator.\r\n  const OPERATORS = {\r\n    'EQ': '==',\r\n    'NEQ': '!=',\r\n    'LT': '<',\r\n    'LTE': '<=',\r\n    'GT': '>',\r\n    'GTE': '>=',\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('OP') as OperatorOption];\r\n  const order = Order.RELATIONAL;\r\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\r\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\r\n  const code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function logic_operation(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Operations 'and', 'or'.\r\n  const operator = block.getFieldValue('OP') === 'AND' ? 'and' : 'or';\r\n  const order = operator === 'and' ? Order.LOGICAL_AND : Order.LOGICAL_OR;\r\n  let argument0 = generator.valueToCode(block, 'A', order);\r\n  let argument1 = generator.valueToCode(block, 'B', order);\r\n  if (!argument0 && !argument1) {\r\n    // If there are no arguments, then the return value is false.\r\n    argument0 = 'False';\r\n    argument1 = 'False';\r\n  } else {\r\n    // Single missing arguments have no effect on the return value.\r\n    const defaultArgument = operator === 'and' ? 'True' : 'False';\r\n    if (!argument0) {\r\n      argument0 = defaultArgument;\r\n    }\r\n    if (!argument1) {\r\n      argument1 = defaultArgument;\r\n    }\r\n  }\r\n  const code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function logic_negate(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Negation.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'BOOL', Order.LOGICAL_NOT) || 'True';\r\n  const code = 'not ' + argument0;\r\n  return [code, Order.LOGICAL_NOT];\r\n}\r\n\r\nexport function logic_boolean(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Boolean values true and false.\r\n  const code = block.getFieldValue('BOOL') === 'TRUE' ? 'True' : 'False';\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function logic_null(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Null data type.\r\n  return ['None', Order.ATOMIC];\r\n}\r\n\r\nexport function logic_ternary(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Ternary operator.\r\n  const value_if =\r\n    generator.valueToCode(block, 'IF', Order.CONDITIONAL) || 'False';\r\n  const value_then =\r\n    generator.valueToCode(block, 'THEN', Order.CONDITIONAL) || 'None';\r\n  const value_else =\r\n    generator.valueToCode(block, 'ELSE', Order.CONDITIONAL) || 'None';\r\n  const code = value_then + ' if ' + value_if + ' else ' + value_else;\r\n  return [code, Order.CONDITIONAL];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Python for loop blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Python.loops\r\n\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport type {ControlFlowInLoopBlock} from '../../blocks/loops.js';\r\nimport type {PythonGenerator} from './python_generator.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport {Order} from './python_generator.js';\r\n\r\nexport function controls_repeat_ext(block: Block, generator: PythonGenerator) {\r\n  // Repeat n times.\r\n  let repeats;\r\n  if (block.getField('TIMES')) {\r\n    // Internal number.\r\n    repeats = String(parseInt(block.getFieldValue('TIMES'), 10));\r\n  } else {\r\n    // External number.\r\n    repeats = generator.valueToCode(block, 'TIMES', Order.NONE) || '0';\r\n  }\r\n  if (stringUtils.isNumber(repeats)) {\r\n    repeats = parseInt(repeats, 10);\r\n  } else {\r\n    repeats = 'int(' + repeats + ')';\r\n  }\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\r\n  const loopVar = generator.nameDB_!.getDistinctName(\r\n    'count',\r\n    NameType.VARIABLE,\r\n  );\r\n  const code = 'for ' + loopVar + ' in range(' + repeats + '):\\n' + branch;\r\n  return code;\r\n}\r\n\r\nexport const controls_repeat = controls_repeat_ext;\r\n\r\nexport function controls_whileUntil(block: Block, generator: PythonGenerator) {\r\n  // Do while/until loop.\r\n  const until = block.getFieldValue('MODE') === 'UNTIL';\r\n  let argument0 =\r\n    generator.valueToCode(\r\n      block,\r\n      'BOOL',\r\n      until ? Order.LOGICAL_NOT : Order.NONE,\r\n    ) || 'False';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\r\n  if (until) {\r\n    argument0 = 'not ' + argument0;\r\n  }\r\n  return 'while ' + argument0 + ':\\n' + branch;\r\n}\r\n\r\nexport function controls_for(block: Block, generator: PythonGenerator) {\r\n  // For loop.\r\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\r\n  let argument0: string | number =\r\n    generator.valueToCode(block, 'FROM', Order.NONE) || '0';\r\n  let argument1: string | number =\r\n    generator.valueToCode(block, 'TO', Order.NONE) || '0';\r\n  let increment: string | number =\r\n    generator.valueToCode(block, 'BY', Order.NONE) || '1';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\r\n\r\n  let code = '';\r\n  let range;\r\n\r\n  // Helper functions.\r\n  const defineUpRange = function () {\r\n    return generator.provideFunction_(\r\n      'upRange',\r\n      `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(start, stop, step):\r\n  while start <= stop:\r\n    yield start\r\n    start += abs(step)\r\n`,\r\n    );\r\n  };\r\n  const defineDownRange = function () {\r\n    return generator.provideFunction_(\r\n      'downRange',\r\n      `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(start, stop, step):\r\n  while start >= stop:\r\n    yield start\r\n    start -= abs(step)\r\n`,\r\n    );\r\n  };\r\n  // Arguments are legal generator code (numbers or strings returned by scrub()).\r\n  const generateUpDownRange = function (\r\n    start: string,\r\n    end: string,\r\n    inc: string,\r\n  ) {\r\n    return (\r\n      '(' +\r\n      start +\r\n      ' <= ' +\r\n      end +\r\n      ') and ' +\r\n      defineUpRange() +\r\n      '(' +\r\n      start +\r\n      ', ' +\r\n      end +\r\n      ', ' +\r\n      inc +\r\n      ') or ' +\r\n      defineDownRange() +\r\n      '(' +\r\n      start +\r\n      ', ' +\r\n      end +\r\n      ', ' +\r\n      inc +\r\n      ')'\r\n    );\r\n  };\r\n\r\n  if (\r\n    stringUtils.isNumber(argument0) &&\r\n    stringUtils.isNumber(argument1) &&\r\n    stringUtils.isNumber(increment)\r\n  ) {\r\n    // All parameters are simple numbers.\r\n    argument0 = Number(argument0);\r\n    argument1 = Number(argument1);\r\n    increment = Math.abs(Number(increment));\r\n    if (argument0 % 1 === 0 && argument1 % 1 === 0 && increment % 1 === 0) {\r\n      // All parameters are integers.\r\n      if (argument0 <= argument1) {\r\n        // Count up.\r\n        argument1++;\r\n        if (argument0 === 0 && increment === 1) {\r\n          // If starting index is 0, omit it.\r\n          range = argument1;\r\n        } else {\r\n          range = argument0 + ', ' + argument1;\r\n        }\r\n        // If increment isn't 1, it must be explicit.\r\n        if (increment !== 1) {\r\n          range += ', ' + increment;\r\n        }\r\n      } else {\r\n        // Count down.\r\n        argument1--;\r\n        range = argument0 + ', ' + argument1 + ', -' + increment;\r\n      }\r\n      range = 'range(' + range + ')';\r\n    } else {\r\n      // At least one of the parameters is not an integer.\r\n      if (argument0 < argument1) {\r\n        range = defineUpRange();\r\n      } else {\r\n        range = defineDownRange();\r\n      }\r\n      range += '(' + argument0 + ', ' + argument1 + ', ' + increment + ')';\r\n    }\r\n  } else {\r\n    // Cache non-trivial values to variables to prevent repeated look-ups.\r\n    const scrub = function (arg: string, suffix: string) {\r\n      if (stringUtils.isNumber(arg)) {\r\n        // Simple number.\r\n        arg = String(Number(arg));\r\n      } else if (!arg.match(/^\\w+$/)) {\r\n        // Not a variable, it's complicated.\r\n        const varName = generator.nameDB_!.getDistinctName(\r\n          variable0 + suffix,\r\n          NameType.VARIABLE,\r\n        );\r\n        code += varName + ' = ' + arg + '\\n';\r\n        arg = varName;\r\n      }\r\n      return arg;\r\n    };\r\n    const startVar = scrub(argument0, '_start');\r\n    const endVar = scrub(argument1, '_end');\r\n    const incVar = scrub(increment, '_inc');\r\n\r\n    if (typeof startVar === 'number' && typeof endVar === 'number') {\r\n      if (startVar < endVar) {\r\n        range = defineUpRange();\r\n      } else {\r\n        range = defineDownRange();\r\n      }\r\n      range += '(' + startVar + ', ' + endVar + ', ' + incVar + ')';\r\n    } else {\r\n      // We cannot determine direction statically.\r\n      range = generateUpDownRange(startVar, endVar, incVar);\r\n    }\r\n  }\r\n  code += 'for ' + variable0 + ' in ' + range + ':\\n' + branch;\r\n  return code;\r\n}\r\n\r\nexport function controls_forEach(block: Block, generator: PythonGenerator) {\r\n  // For each loop.\r\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const argument0 =\r\n    generator.valueToCode(block, 'LIST', Order.RELATIONAL) || '[]';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block) || generator.PASS;\r\n  const code = 'for ' + variable0 + ' in ' + argument0 + ':\\n' + branch;\r\n  return code;\r\n}\r\n\r\nexport function controls_flow_statements(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n) {\r\n  // Flow statements: continue, break.\r\n  let xfix = '';\r\n  if (generator.STATEMENT_PREFIX) {\r\n    // Automatic prefix insertion is switched off for this block.  Add manually.\r\n    xfix += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    // Inject any statement suffix here since the regular one at the end\r\n    // will not get executed if the break/continue is triggered.\r\n    xfix += generator.injectId(generator.STATEMENT_SUFFIX, block);\r\n  }\r\n  if (generator.STATEMENT_PREFIX) {\r\n    const loop = (block as ControlFlowInLoopBlock).getSurroundLoop();\r\n    if (loop && !loop.suppressPrefixSuffix) {\r\n      // Inject loop's statement prefix here since the regular one at the end\r\n      // of the loop will not get executed if 'continue' is triggered.\r\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\r\n      xfix += generator.injectId(generator.STATEMENT_PREFIX, loop);\r\n    }\r\n  }\r\n  switch (block.getFieldValue('FLOW')) {\r\n    case 'BREAK':\r\n      return xfix + 'break\\n';\r\n    case 'CONTINUE':\r\n      return xfix + 'continue\\n';\r\n  }\r\n  throw Error('Unknown flow statement.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Python for math blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Python.math\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {PythonGenerator} from './python_generator.js';\r\nimport {Order} from './python_generator.js';\r\n\r\n// If any new block imports any library, add that library name here.\r\n// RESERVED WORDS: 'math,random,Number'\r\n\r\nexport function math_number(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Numeric value.\r\n  let number = Number(block.getFieldValue('NUM'));\r\n  if (number === Infinity) {\r\n    return ['float(\"inf\")', Order.FUNCTION_CALL];\r\n  } else if (number === -Infinity) {\r\n    return ['-float(\"inf\")', Order.UNARY_SIGN];\r\n  } else {\r\n    return [String(number), number < 0 ? Order.UNARY_SIGN : Order.ATOMIC];\r\n  }\r\n}\r\n\r\nexport function math_arithmetic(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Basic arithmetic operators, and power.\r\n  const OPERATORS: Record<string, [string | null, Order]> = {\r\n    'ADD': [' + ', Order.ADDITIVE],\r\n    'MINUS': [' - ', Order.ADDITIVE],\r\n    'MULTIPLY': [' * ', Order.MULTIPLICATIVE],\r\n    'DIVIDE': [' / ', Order.MULTIPLICATIVE],\r\n    'POWER': [' ** ', Order.EXPONENTIATION],\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const tuple = OPERATORS[block.getFieldValue('OP') as OperatorOption];\r\n  const operator = tuple[0];\r\n  const order = tuple[1];\r\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\r\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\r\n  const code = argument0 + operator + argument1;\r\n  return [code, order];\r\n  // In case of 'DIVIDE', division between integers returns different results\r\n  // in generator 2 and 3. However, is not an issue since Blockly does not\r\n  // guarantee identical results in all languages.  To do otherwise would\r\n  // require every operator to be wrapped in a function call.  This would kill\r\n  // legibility of the generated code.\r\n}\r\n\r\nexport function math_single(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Math operators with single operand.\r\n  const operator = block.getFieldValue('OP');\r\n  let code;\r\n  let arg;\r\n  if (operator === 'NEG') {\r\n    // Negation is a special case given its different operator precedence.\r\n    code = generator.valueToCode(block, 'NUM', Order.UNARY_SIGN) || '0';\r\n    return ['-' + code, Order.UNARY_SIGN];\r\n  }\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected (here and below).\r\n  (generator as AnyDuringMigration).definitions_['import_math'] = 'import math';\r\n  if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\r\n    arg = generator.valueToCode(block, 'NUM', Order.MULTIPLICATIVE) || '0';\r\n  } else {\r\n    arg = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\r\n  }\r\n  // First, handle cases which generate values that don't need parentheses\r\n  // wrapping the code.\r\n  switch (operator) {\r\n    case 'ABS':\r\n      code = 'math.fabs(' + arg + ')';\r\n      break;\r\n    case 'ROOT':\r\n      code = 'math.sqrt(' + arg + ')';\r\n      break;\r\n    case 'LN':\r\n      code = 'math.log(' + arg + ')';\r\n      break;\r\n    case 'LOG10':\r\n      code = 'math.log10(' + arg + ')';\r\n      break;\r\n    case 'EXP':\r\n      code = 'math.exp(' + arg + ')';\r\n      break;\r\n    case 'POW10':\r\n      code = 'math.pow(10,' + arg + ')';\r\n      break;\r\n    case 'ROUND':\r\n      code = 'round(' + arg + ')';\r\n      break;\r\n    case 'ROUNDUP':\r\n      code = 'math.ceil(' + arg + ')';\r\n      break;\r\n    case 'ROUNDDOWN':\r\n      code = 'math.floor(' + arg + ')';\r\n      break;\r\n    case 'SIN':\r\n      code = 'math.sin(' + arg + ' / 180.0 * math.pi)';\r\n      break;\r\n    case 'COS':\r\n      code = 'math.cos(' + arg + ' / 180.0 * math.pi)';\r\n      break;\r\n    case 'TAN':\r\n      code = 'math.tan(' + arg + ' / 180.0 * math.pi)';\r\n      break;\r\n  }\r\n  if (code) {\r\n    return [code, Order.FUNCTION_CALL];\r\n  }\r\n  // Second, handle cases which generate values that may need parentheses\r\n  // wrapping the code.\r\n  switch (operator) {\r\n    case 'ASIN':\r\n      code = 'math.asin(' + arg + ') / math.pi * 180';\r\n      break;\r\n    case 'ACOS':\r\n      code = 'math.acos(' + arg + ') / math.pi * 180';\r\n      break;\r\n    case 'ATAN':\r\n      code = 'math.atan(' + arg + ') / math.pi * 180';\r\n      break;\r\n    default:\r\n      throw Error('Unknown math operator: ' + operator);\r\n  }\r\n  return [code, Order.MULTIPLICATIVE];\r\n}\r\n\r\nexport function math_constant(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\r\n  const CONSTANTS: Record<string, [string, Order]> = {\r\n    'PI': ['math.pi', Order.MEMBER],\r\n    'E': ['math.e', Order.MEMBER],\r\n    'GOLDEN_RATIO': ['(1 + math.sqrt(5)) / 2', Order.MULTIPLICATIVE],\r\n    'SQRT2': ['math.sqrt(2)', Order.MEMBER],\r\n    'SQRT1_2': ['math.sqrt(1.0 / 2)', Order.MEMBER],\r\n    'INFINITY': [\"float('inf')\", Order.ATOMIC],\r\n  };\r\n  type ConstantOption = keyof typeof CONSTANTS;\r\n  const constant = block.getFieldValue('CONSTANT') as ConstantOption;\r\n  if (constant !== 'INFINITY') {\r\n    (generator as AnyDuringMigration).definitions_['import_math'] =\r\n      'import math';\r\n  }\r\n  return CONSTANTS[constant];\r\n}\r\n\r\nexport function math_number_property(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Check if a number is even, odd, prime, whole, positive, or negative\r\n  // or if it is divisible by certain number. Returns true or false.\r\n  const PROPERTIES: Record<string, [string | null, Order, Order]> = {\r\n    'EVEN': [' % 2 == 0', Order.MULTIPLICATIVE, Order.RELATIONAL],\r\n    'ODD': [' % 2 == 1', Order.MULTIPLICATIVE, Order.RELATIONAL],\r\n    'WHOLE': [' % 1 == 0', Order.MULTIPLICATIVE, Order.RELATIONAL],\r\n    'POSITIVE': [' > 0', Order.RELATIONAL, Order.RELATIONAL],\r\n    'NEGATIVE': [' < 0', Order.RELATIONAL, Order.RELATIONAL],\r\n    'DIVISIBLE_BY': [null, Order.MULTIPLICATIVE, Order.RELATIONAL],\r\n    'PRIME': [null, Order.NONE, Order.FUNCTION_CALL],\r\n  };\r\n  type PropertyOption = keyof typeof PROPERTIES;\r\n  const dropdownProperty = block.getFieldValue('PROPERTY') as PropertyOption;\r\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\r\n  const numberToCheck =\r\n    generator.valueToCode(block, 'NUMBER_TO_CHECK', inputOrder) || '0';\r\n  let code;\r\n  if (dropdownProperty === 'PRIME') {\r\n    // Prime is a special case as it is not a one-liner test.\r\n    (generator as AnyDuringMigration).definitions_['import_math'] =\r\n      'import math';\r\n    (generator as AnyDuringMigration).definitions_[\r\n      'from_numbers_import_Number'\r\n    ] = 'from numbers import Number';\r\n    const functionName = generator.provideFunction_(\r\n      'math_isPrime',\r\n      `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(n):\r\n  # https://en.wikipedia.org/wiki/Primality_test#Naive_methods\r\n  # If n is not a number but a string, try parsing it.\r\n  if not isinstance(n, Number):\r\n    try:\r\n      n = float(n)\r\n    except:\r\n      return False\r\n  if n == 2 or n == 3:\r\n    return True\r\n  # False if n is negative, is 1, or not whole, or if n is divisible by 2 or 3.\r\n  if n <= 1 or n % 1 != 0 or n % 2 == 0 or n % 3 == 0:\r\n    return False\r\n  # Check all the numbers of form 6k +/- 1, up to sqrt(n).\r\n  for x in range(6, int(math.sqrt(n)) + 2, 6):\r\n    if n % (x - 1) == 0 or n % (x + 1) == 0:\r\n      return False\r\n  return True\r\n`,\r\n    );\r\n    code = functionName + '(' + numberToCheck + ')';\r\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\r\n    const divisor =\r\n      generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATIVE) || '0';\r\n    // If 'divisor' is some code that evals to 0, generator will raise an error.\r\n    if (divisor === '0') {\r\n      return ['False', Order.ATOMIC];\r\n    }\r\n    code = numberToCheck + ' % ' + divisor + ' == 0';\r\n  } else {\r\n    code = numberToCheck + suffix;\r\n  }\r\n  return [code, outputOrder];\r\n}\r\n\r\nexport function math_change(block: Block, generator: PythonGenerator) {\r\n  // Add to a variable in place.\r\n  (generator as AnyDuringMigration).definitions_['from_numbers_import_Number'] =\r\n    'from numbers import Number';\r\n  const argument0 =\r\n    generator.valueToCode(block, 'DELTA', Order.ADDITIVE) || '0';\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return (\r\n    varName +\r\n    ' = (' +\r\n    varName +\r\n    ' if isinstance(' +\r\n    varName +\r\n    ', Number) else 0) + ' +\r\n    argument0 +\r\n    '\\n'\r\n  );\r\n}\r\n\r\n// Rounding functions have a single operand.\r\nexport const math_round = math_single;\r\n// Trigonometry functions have a single operand.\r\nexport const math_trig = math_single;\r\n\r\nexport function math_on_list(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Math functions for lists.\r\n  const func = block.getFieldValue('OP');\r\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n  let code;\r\n  switch (func) {\r\n    case 'SUM':\r\n      code = 'sum(' + list + ')';\r\n      break;\r\n    case 'MIN':\r\n      code = 'min(' + list + ')';\r\n      break;\r\n    case 'MAX':\r\n      code = 'max(' + list + ')';\r\n      break;\r\n    case 'AVERAGE': {\r\n      (generator as AnyDuringMigration).definitions_[\r\n        'from_numbers_import_Number'\r\n      ] = 'from numbers import Number';\r\n      // This operation excludes null and values that aren't int or float:\r\n      // math_mean([null, null, \"aString\", 1, 9]) -> 5.0\r\n      const functionName = generator.provideFunction_(\r\n        'math_mean',\r\n        `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList):\r\n  localList = [e for e in myList if isinstance(e, Number)]\r\n  if not localList: return\r\n  return float(sum(localList)) / len(localList)\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'MEDIAN': {\r\n      (generator as AnyDuringMigration).definitions_[\r\n        'from_numbers_import_Number'\r\n      ] = 'from numbers import Number';\r\n      // This operation excludes null values:\r\n      // math_median([null, null, 1, 3]) -> 2.0\r\n      const functionName = generator.provideFunction_(\r\n        'math_median',\r\n        `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList):\r\n  localList = sorted([e for e in myList if isinstance(e, Number)])\r\n  if not localList: return\r\n  if len(localList) % 2 == 0:\r\n    return (localList[len(localList) // 2 - 1] + localList[len(localList) // 2]) / 2.0\r\n  else:\r\n    return localList[(len(localList) - 1) // 2]\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'MODE': {\r\n      // As a list of numbers can contain more than one mode,\r\n      // the returned result is provided as an array.\r\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1]\r\n      const functionName = generator.provideFunction_(\r\n        'math_modes',\r\n        `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(some_list):\r\n  modes = []\r\n  # Using a lists of [item, count] to keep count rather than dict\r\n  # to avoid \"unhashable\" errors when the counted item is itself a list or dict.\r\n  counts = []\r\n  maxCount = 1\r\n  for item in some_list:\r\n    found = False\r\n    for count in counts:\r\n      if count[0] == item:\r\n        count[1] += 1\r\n        maxCount = max(maxCount, count[1])\r\n        found = True\r\n    if not found:\r\n      counts.append([item, 1])\r\n  for counted_item, item_count in counts:\r\n    if item_count == maxCount:\r\n      modes.append(counted_item)\r\n  return modes\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'STD_DEV': {\r\n      (generator as AnyDuringMigration).definitions_['import_math'] =\r\n        'import math';\r\n      const functionName = generator.provideFunction_(\r\n        'math_standard_deviation',\r\n        `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(numbers):\r\n  n = len(numbers)\r\n  if n == 0: return\r\n  mean = float(sum(numbers)) / n\r\n  variance = sum((x - mean) ** 2 for x in numbers) / n\r\n  return math.sqrt(variance)\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'RANDOM':\r\n      (generator as AnyDuringMigration).definitions_['import_random'] =\r\n        'import random';\r\n      code = 'random.choice(' + list + ')';\r\n      break;\r\n    default:\r\n      throw Error('Unknown operator: ' + func);\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_modulo(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Remainder computation.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'DIVIDEND', Order.MULTIPLICATIVE) || '0';\r\n  const argument1 =\r\n    generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATIVE) || '0';\r\n  const code = argument0 + ' % ' + argument1;\r\n  return [code, Order.MULTIPLICATIVE];\r\n}\r\n\r\nexport function math_constrain(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Constrain a number between two limits.\r\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'LOW', Order.NONE) || '0';\r\n  const argument2 =\r\n    generator.valueToCode(block, 'HIGH', Order.NONE) || \"float('inf')\";\r\n  const code =\r\n    'min(max(' + argument0 + ', ' + argument1 + '), ' + argument2 + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_random_int(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Random integer between [X] and [Y].\r\n  (generator as AnyDuringMigration).definitions_['import_random'] =\r\n    'import random';\r\n  const argument0 = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'TO', Order.NONE) || '0';\r\n  const code = 'random.randint(' + argument0 + ', ' + argument1 + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_random_float(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Random fraction between 0 and 1.\r\n  (generator as AnyDuringMigration).definitions_['import_random'] =\r\n    'import random';\r\n  return ['random.random()', Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_atan2(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\r\n  (generator as AnyDuringMigration).definitions_['import_math'] = 'import math';\r\n  const argument0 = generator.valueToCode(block, 'X', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'Y', Order.NONE) || '0';\r\n  return [\r\n    'math.atan2(' + argument1 + ', ' + argument0 + ') / math.pi * 180',\r\n    Order.MULTIPLICATIVE,\r\n  ];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Python for procedure blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Python.procedures\r\n\r\nimport * as Variables from '../../core/variables.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport type {IfReturnBlock} from '../../blocks/procedures.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport {Order} from './python_generator.js';\r\nimport type {PythonGenerator} from './python_generator.js';\r\n\r\nexport function procedures_defreturn(block: Block, generator: PythonGenerator) {\r\n  // Define a procedure with a return value.\r\n  // First, add a 'global' statement for every variable that is not shadowed by\r\n  // a local parameter.\r\n  const globals = [];\r\n  const workspace = block.workspace;\r\n  const usedVariables = Variables.allUsedVarModels(workspace) || [];\r\n  for (const variable of usedVariables) {\r\n    const varName = variable.name;\r\n    // getVars returns parameter names, not ids, for procedure blocks\r\n    if (block.getVars().indexOf(varName) === -1) {\r\n      globals.push(generator.getVariableName(varName));\r\n    }\r\n  }\r\n  // Add developer variables.\r\n  const devVarList = Variables.allDeveloperVariables(workspace);\r\n  for (let i = 0; i < devVarList.length; i++) {\r\n    globals.push(\r\n      generator.nameDB_!.getName(devVarList[i], NameType.DEVELOPER_VARIABLE),\r\n    );\r\n  }\r\n\r\n  const globalString = globals.length\r\n    ? generator.INDENT + 'global ' + globals.join(', ') + '\\n'\r\n    : '';\r\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\r\n  let xfix1 = '';\r\n  if (generator.STATEMENT_PREFIX) {\r\n    xfix1 += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    xfix1 += generator.injectId(generator.STATEMENT_SUFFIX, block);\r\n  }\r\n  if (xfix1) {\r\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\r\n  }\r\n  let loopTrap = '';\r\n  if (generator.INFINITE_LOOP_TRAP) {\r\n    loopTrap = generator.prefixLines(\r\n      generator.injectId(generator.INFINITE_LOOP_TRAP, block),\r\n      generator.INDENT,\r\n    );\r\n  }\r\n  let branch = generator.statementToCode(block, 'STACK');\r\n  let returnValue = generator.valueToCode(block, 'RETURN', Order.NONE) || '';\r\n  let xfix2 = '';\r\n  if (branch && returnValue) {\r\n    // After executing the function body, revisit this block for the return.\r\n    xfix2 = xfix1;\r\n  }\r\n  if (returnValue) {\r\n    returnValue = generator.INDENT + 'return ' + returnValue + '\\n';\r\n  } else if (!branch) {\r\n    branch = generator.PASS;\r\n  }\r\n  const args = [];\r\n  const variables = block.getVars();\r\n  for (let i = 0; i < variables.length; i++) {\r\n    args[i] = generator.getVariableName(variables[i]);\r\n  }\r\n  let code =\r\n    'def ' +\r\n    funcName +\r\n    '(' +\r\n    args.join(', ') +\r\n    '):\\n' +\r\n    globalString +\r\n    xfix1 +\r\n    loopTrap +\r\n    branch +\r\n    xfix2 +\r\n    returnValue;\r\n  code = generator.scrub_(block, code);\r\n  // Add % so as not to collide with helper functions in definitions list.\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['%' + funcName] = code;\r\n  return null;\r\n}\r\n\r\n// Defining a procedure without a return value uses the same generator as\r\n// a procedure with a return value.\r\nexport const procedures_defnoreturn = procedures_defreturn;\r\n\r\nexport function procedures_callreturn(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Call a procedure with a return value.\r\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\r\n  const args = [];\r\n  const variables = block.getVars();\r\n  for (let i = 0; i < variables.length; i++) {\r\n    args[i] = generator.valueToCode(block, 'ARG' + i, Order.NONE) || 'None';\r\n  }\r\n  const code = funcName + '(' + args.join(', ') + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function procedures_callnoreturn(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n) {\r\n  // Call a procedure with no return value.\r\n  // Generated code is for a function call as a statement is the same as a\r\n  // function call as a value, with the addition of line ending.\r\n  const tuple = generator.forBlock['procedures_callreturn'](block, generator)!;\r\n  return tuple[0] + '\\n';\r\n}\r\n\r\nexport function procedures_ifreturn(block: Block, generator: PythonGenerator) {\r\n  // Conditionally return value from a procedure.\r\n  const condition =\r\n    generator.valueToCode(block, 'CONDITION', Order.NONE) || 'False';\r\n  let code = 'if ' + condition + ':\\n';\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    // Inject any statement suffix here since the regular one at the end\r\n    // will not get executed if the return is triggered.\r\n    code += generator.prefixLines(\r\n      generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n      generator.INDENT,\r\n    );\r\n  }\r\n  if ((block as IfReturnBlock).hasReturnValue_) {\r\n    const value = generator.valueToCode(block, 'VALUE', Order.NONE) || 'None';\r\n    code += generator.INDENT + 'return ' + value + '\\n';\r\n  } else {\r\n    code += generator.INDENT + 'return\\n';\r\n  }\r\n  return code;\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Python for text blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Python.texts\r\n\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport type {JoinMutatorBlock} from '../../blocks/text.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport {Order} from './python_generator.js';\r\nimport type {PythonGenerator} from './python_generator.js';\r\n\r\nexport function text(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Text value.\r\n  const code = generator.quote_(block.getFieldValue('TEXT'));\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function text_multiline(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Text value.\r\n  const code = generator.multiline_quote_(block.getFieldValue('TEXT'));\r\n  const order = code.indexOf('+') !== -1 ? Order.ADDITIVE : Order.ATOMIC;\r\n  return [code, order];\r\n}\r\n\r\n/**\r\n * Regular expression to detect a single-quoted string literal.\r\n */\r\nconst strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/;\r\n\r\n/**\r\n * Enclose the provided value in 'str(...)' function.\r\n * Leave string literals alone.\r\n *\r\n * @param value Code evaluating to a value.\r\n * @returns Array containing code evaluating to a string\r\n *     and\r\n *    the order of the returned code.[string, number]\r\n */\r\nconst forceString = function (value: string): [string, Order] {\r\n  if (strRegExp.test(value)) {\r\n    return [value, Order.ATOMIC];\r\n  }\r\n  return ['str(' + value + ')', Order.FUNCTION_CALL];\r\n};\r\n\r\nexport function text_join(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Create a string made up of any number of elements of any type.\r\n  // Should we allow joining by '-' or ',' or any other characters?\r\n  const joinBlock = block as JoinMutatorBlock;\r\n  switch (joinBlock.itemCount_) {\r\n    case 0:\r\n      return [\"''\", Order.ATOMIC];\r\n    case 1: {\r\n      const element = generator.valueToCode(block, 'ADD0', Order.NONE) || \"''\";\r\n      const codeAndOrder = forceString(element);\r\n      return codeAndOrder;\r\n    }\r\n    case 2: {\r\n      const element0 = generator.valueToCode(block, 'ADD0', Order.NONE) || \"''\";\r\n      const element1 = generator.valueToCode(block, 'ADD1', Order.NONE) || \"''\";\r\n      const code = forceString(element0)[0] + ' + ' + forceString(element1)[0];\r\n      return [code, Order.ADDITIVE];\r\n    }\r\n    default: {\r\n      const elements = [];\r\n      for (let i = 0; i < joinBlock.itemCount_; i++) {\r\n        elements[i] =\r\n          generator.valueToCode(block, 'ADD' + i, Order.NONE) || \"''\";\r\n      }\r\n      const tempVar = generator.nameDB_!.getDistinctName(\r\n        'x',\r\n        NameType.VARIABLE,\r\n      );\r\n      const code =\r\n        \"''.join([str(\" +\r\n        tempVar +\r\n        ') for ' +\r\n        tempVar +\r\n        ' in [' +\r\n        elements.join(', ') +\r\n        ']])';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n  }\r\n}\r\n\r\nexport function text_append(block: Block, generator: PythonGenerator) {\r\n  // Append to a variable in place.\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const value = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  return varName + ' = str(' + varName + ') + ' + forceString(value)[0] + '\\n';\r\n}\r\n\r\nexport function text_length(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Is the string null or array empty?\r\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\r\n  return ['len(' + text + ')', Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_isEmpty(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Is the string null or array empty?\r\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\r\n  const code = 'not len(' + text + ')';\r\n  return [code, Order.LOGICAL_NOT];\r\n}\r\n\r\nexport function text_indexOf(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Search the text for a substring.\r\n  // Should we allow for non-case sensitive???\r\n  const operator = block.getFieldValue('END') === 'FIRST' ? 'find' : 'rfind';\r\n  const substring = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\r\n  const text = generator.valueToCode(block, 'VALUE', Order.MEMBER) || \"''\";\r\n  const code = text + '.' + operator + '(' + substring + ')';\r\n  if (block.workspace.options.oneBasedIndex) {\r\n    return [code + ' + 1', Order.ADDITIVE];\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_charAt(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Get letter at index.\r\n  // Note: Until January 2013 this block did not have the WHERE input.\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  const textOrder = where === 'RANDOM' ? Order.NONE : Order.MEMBER;\r\n  const text = generator.valueToCode(block, 'VALUE', textOrder) || \"''\";\r\n  switch (where) {\r\n    case 'FIRST': {\r\n      const code = text + '[0]';\r\n      return [code, Order.MEMBER];\r\n    }\r\n    case 'LAST': {\r\n      const code = text + '[-1]';\r\n      return [code, Order.MEMBER];\r\n    }\r\n    case 'FROM_START': {\r\n      const at = generator.getAdjustedInt(block, 'AT');\r\n      const code = text + '[' + at + ']';\r\n      return [code, Order.MEMBER];\r\n    }\r\n    case 'FROM_END': {\r\n      const at = generator.getAdjustedInt(block, 'AT', 1, true);\r\n      const code = text + '[' + at + ']';\r\n      return [code, Order.MEMBER];\r\n    }\r\n    case 'RANDOM': {\r\n      // TODO(#7600): find better approach than casting to any to override\r\n      // CodeGenerator declaring .definitions protected (here and below).\r\n      (generator as AnyDuringMigration).definitions_['import_random'] =\r\n        'import random';\r\n      const functionName = generator.provideFunction_(\r\n        'text_random_letter',\r\n        `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(text):\r\n  x = int(random.random() * len(text))\r\n  return text[x]\r\n`,\r\n      );\r\n      const code = functionName + '(' + text + ')';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n  }\r\n  throw Error('Unhandled option (text_charAt).');\r\n}\r\n\r\nexport function text_getSubstring(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Get substring.\r\n  const where1 = block.getFieldValue('WHERE1');\r\n  const where2 = block.getFieldValue('WHERE2');\r\n  const text = generator.valueToCode(block, 'STRING', Order.MEMBER) || \"''\";\r\n  let at1;\r\n  switch (where1) {\r\n    case 'FROM_START':\r\n      at1 = generator.getAdjustedInt(block, 'AT1');\r\n      if (at1 === 0) {\r\n        at1 = '';\r\n      }\r\n      break;\r\n    case 'FROM_END':\r\n      at1 = generator.getAdjustedInt(block, 'AT1', 1, true);\r\n      break;\r\n    case 'FIRST':\r\n      at1 = '';\r\n      break;\r\n    default:\r\n      throw Error('Unhandled option (text_getSubstring)');\r\n  }\r\n\r\n  let at2;\r\n  switch (where2) {\r\n    case 'FROM_START':\r\n      at2 = generator.getAdjustedInt(block, 'AT2', 1);\r\n      break;\r\n    case 'FROM_END':\r\n      at2 = generator.getAdjustedInt(block, 'AT2', 0, true);\r\n      // Ensure that if the result calculated is 0 that sub-sequence will\r\n      // include all elements as expected.\r\n      if (!stringUtils.isNumber(String(at2))) {\r\n        (generator as AnyDuringMigration).definitions_['import_sys'] =\r\n          'import sys';\r\n        at2 += ' or sys.maxsize';\r\n      } else if (at2 === 0) {\r\n        at2 = '';\r\n      }\r\n      break;\r\n    case 'LAST':\r\n      at2 = '';\r\n      break;\r\n    default:\r\n      throw Error('Unhandled option (text_getSubstring)');\r\n  }\r\n  const code = text + '[' + at1 + ' : ' + at2 + ']';\r\n  return [code, Order.MEMBER];\r\n}\r\n\r\nexport function text_changeCase(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Change capitalization.\r\n  const OPERATORS = {\r\n    'UPPERCASE': '.upper()',\r\n    'LOWERCASE': '.lower()',\r\n    'TITLECASE': '.title()',\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('CASE') as OperatorOption];\r\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\r\n  const code = text + operator;\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_trim(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Trim spaces.\r\n  const OPERATORS = {\r\n    'LEFT': '.lstrip()',\r\n    'RIGHT': '.rstrip()',\r\n    'BOTH': '.strip()',\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('MODE') as OperatorOption];\r\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\r\n  const code = text + operator;\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_print(block: Block, generator: PythonGenerator) {\r\n  // Print statement.\r\n  const msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  return 'print(' + msg + ')\\n';\r\n}\r\n\r\nexport function text_prompt_ext(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Prompt function.\r\n  const functionName = generator.provideFunction_(\r\n    'text_prompt',\r\n    `\r\ndef ${generator.FUNCTION_NAME_PLACEHOLDER_}(msg):\r\n  try:\r\n    return raw_input(msg)\r\n  except NameError:\r\n    return input(msg)\r\n`,\r\n  );\r\n  let msg;\r\n  if (block.getField('TEXT')) {\r\n    // Internal message.\r\n    msg = generator.quote_(block.getFieldValue('TEXT'));\r\n  } else {\r\n    // External message.\r\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  }\r\n  let code = functionName + '(' + msg + ')';\r\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\r\n  if (toNumber) {\r\n    code = 'float(' + code + ')';\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport const text_prompt = text_prompt_ext;\r\n\r\nexport function text_count(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\r\n  const sub = generator.valueToCode(block, 'SUB', Order.NONE) || \"''\";\r\n  const code = text + '.count(' + sub + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_replace(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\r\n  const from = generator.valueToCode(block, 'FROM', Order.NONE) || \"''\";\r\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\r\n  const code = text + '.replace(' + from + ', ' + to + ')';\r\n  return [code, Order.MEMBER];\r\n}\r\n\r\nexport function text_reverse(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\r\n  const code = text + '[::-1]';\r\n  return [code, Order.MEMBER];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Python for variable blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Python.variables\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {PythonGenerator} from './python_generator.js';\r\nimport {Order} from './python_generator.js';\r\n\r\nexport function variables_get(\r\n  block: Block,\r\n  generator: PythonGenerator,\r\n): [string, Order] {\r\n  // Variable getter.\r\n  const code = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function variables_set(block: Block, generator: PythonGenerator) {\r\n  // Variable setter.\r\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return varName + ' = ' + argument0 + '\\n';\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Python code generator class, including helper methods for\r\n * generating Python for blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Python\r\n\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport * as Variables from '../../core/variables.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport {CodeGenerator} from '../../core/generator.js';\r\nimport {Names} from '../../core/names.js';\r\nimport type {Workspace} from '../../core/workspace.js';\r\nimport {inputTypes} from '../../core/inputs/input_types.js';\r\n\r\n/**\r\n * Order of operation ENUMs.\r\n * http://docs.python.org/reference/expressions.html#summary\r\n */\r\n// prettier-ignore\r\nexport enum Order {\r\n  ATOMIC = 0,             // 0 \"\" ...\r\n  COLLECTION = 1,         // tuples, lists, dictionaries\r\n  STRING_CONVERSION = 1,  // `expression...`\r\n  MEMBER = 2.1,           // . []\r\n  FUNCTION_CALL = 2.2,    // ()\r\n  EXPONENTIATION = 3,     // **\r\n  UNARY_SIGN = 4,         // + -\r\n  BITWISE_NOT = 4,        // ~\r\n  MULTIPLICATIVE = 5,     // * / // %\r\n  ADDITIVE = 6,           // + -\r\n  BITWISE_SHIFT = 7,      // << >>\r\n  BITWISE_AND = 8,        // &\r\n  BITWISE_XOR = 9,        // ^\r\n  BITWISE_OR = 10,        // |\r\n  RELATIONAL = 11,        // in, not in, is, is not, >, >=, <>, !=, ==\r\n  LOGICAL_NOT = 12,       // not\r\n  LOGICAL_AND = 13,       // and\r\n  LOGICAL_OR = 14,        // or\r\n  CONDITIONAL = 15,       // if else\r\n  LAMBDA = 16,            // lambda\r\n  NONE = 99,              // (...)\r\n}\r\n\r\n/**\r\n * PythonScript code generator class.\r\n */\r\nexport class PythonGenerator extends CodeGenerator {\r\n  /** List of outer-inner pairings that do NOT require parentheses. */\r\n  ORDER_OVERRIDES: [Order, Order][] = [\r\n    // (foo()).bar -> foo().bar\r\n    // (foo())[0] -> foo()[0]\r\n    [Order.FUNCTION_CALL, Order.MEMBER],\r\n    // (foo())() -> foo()()\r\n    [Order.FUNCTION_CALL, Order.FUNCTION_CALL],\r\n    // (foo.bar).baz -> foo.bar.baz\r\n    // (foo.bar)[0] -> foo.bar[0]\r\n    // (foo[0]).bar -> foo[0].bar\r\n    // (foo[0])[1] -> foo[0][1]\r\n    [Order.MEMBER, Order.MEMBER],\r\n    // (foo.bar)() -> foo.bar()\r\n    // (foo[0])() -> foo[0]()\r\n    [Order.MEMBER, Order.FUNCTION_CALL],\r\n\r\n    // not (not foo) -> not not foo\r\n    [Order.LOGICAL_NOT, Order.LOGICAL_NOT],\r\n    // a and (b and c) -> a and b and c\r\n    [Order.LOGICAL_AND, Order.LOGICAL_AND],\r\n    // a or (b or c) -> a or b or c\r\n    [Order.LOGICAL_OR, Order.LOGICAL_OR],\r\n  ];\r\n\r\n  /**\r\n   * Empty loops or conditionals are not allowed in Python.\r\n   */\r\n  PASS: string = ''; // Initialised by init().\r\n\r\n  /** @param name Name of the language the generator is for. */\r\n  constructor(name = 'Python') {\r\n    super(name);\r\n    this.isInitialized = false;\r\n\r\n    // Copy Order values onto instance for backwards compatibility\r\n    // while ensuring they are not part of the publically-advertised\r\n    // API.\r\n    //\r\n    // TODO(#7085): deprecate these in due course.  (Could initially\r\n    // replace data properties with get accessors that call\r\n    // deprecate.warn().)\r\n    for (const key in Order) {\r\n      // Must assign Order[key] to a temporary to get the type guard to work;\r\n      // see https://github.com/microsoft/TypeScript/issues/10530.\r\n      const value = Order[key];\r\n      // Skip reverse-lookup entries in the enum.  Due to\r\n      // https://github.com/microsoft/TypeScript/issues/55713 this (as\r\n      // of TypeScript 5.5.2) actually narrows the type of value to\r\n      // never - but that still allows the following assignment to\r\n      // succeed.\r\n      if (typeof value === 'string') continue;\r\n      (this as unknown as Record<string, Order>)['ORDER_' + key] = value;\r\n    }\r\n\r\n    // List of illegal variable names.  This is not intended to be a\r\n    // security feature.  Blockly is 100% client-side, so bypassing\r\n    // this list is trivial.  This is intended to prevent users from\r\n    // accidentally clobbering a built-in object or function.\r\n    this.addReservedWords(\r\n      // import keyword\r\n      // print(','.join(sorted(keyword.kwlist)))\r\n      // https://docs.python.org/3/reference/lexical_analysis.html#keywords\r\n      // https://docs.python.org/2/reference/lexical_analysis.html#keywords\r\n      'False,None,True,and,as,assert,break,class,continue,def,del,elif,else,' +\r\n        'except,exec,finally,for,from,global,if,import,in,is,lambda,nonlocal,' +\r\n        'not,or,pass,print,raise,return,try,while,with,yield,' +\r\n        // https://docs.python.org/3/library/constants.html\r\n        // https://docs.python.org/2/library/constants.html\r\n        'NotImplemented,Ellipsis,__debug__,quit,exit,copyright,license,credits,' +\r\n        // >>> print(','.join(sorted(dir(__builtins__))))\r\n        // https://docs.python.org/3/library/functions.html\r\n        // https://docs.python.org/2/library/functions.html\r\n        'ArithmeticError,AssertionError,AttributeError,BaseException,' +\r\n        'BlockingIOError,BrokenPipeError,BufferError,BytesWarning,' +\r\n        'ChildProcessError,ConnectionAbortedError,ConnectionError,' +\r\n        'ConnectionRefusedError,ConnectionResetError,DeprecationWarning,' +\r\n        'EOFError,Ellipsis,EnvironmentError,Exception,FileExistsError,' +\r\n        'FileNotFoundError,FloatingPointError,FutureWarning,GeneratorExit,' +\r\n        'IOError,ImportError,ImportWarning,IndentationError,IndexError,' +\r\n        'InterruptedError,IsADirectoryError,KeyError,KeyboardInterrupt,' +\r\n        'LookupError,MemoryError,ModuleNotFoundError,NameError,' +\r\n        'NotADirectoryError,NotImplemented,NotImplementedError,OSError,' +\r\n        'OverflowError,PendingDeprecationWarning,PermissionError,' +\r\n        'ProcessLookupError,RecursionError,ReferenceError,ResourceWarning,' +\r\n        'RuntimeError,RuntimeWarning,StandardError,StopAsyncIteration,' +\r\n        'StopIteration,SyntaxError,SyntaxWarning,SystemError,SystemExit,' +\r\n        'TabError,TimeoutError,TypeError,UnboundLocalError,UnicodeDecodeError,' +\r\n        'UnicodeEncodeError,UnicodeError,UnicodeTranslateError,UnicodeWarning,' +\r\n        'UserWarning,ValueError,Warning,ZeroDivisionError,_,__build_class__,' +\r\n        '__debug__,__doc__,__import__,__loader__,__name__,__package__,__spec__,' +\r\n        'abs,all,any,apply,ascii,basestring,bin,bool,buffer,bytearray,bytes,' +\r\n        'callable,chr,classmethod,cmp,coerce,compile,complex,copyright,credits,' +\r\n        'delattr,dict,dir,divmod,enumerate,eval,exec,execfile,exit,file,filter,' +\r\n        'float,format,frozenset,getattr,globals,hasattr,hash,help,hex,id,input,' +\r\n        'int,intern,isinstance,issubclass,iter,len,license,list,locals,long,' +\r\n        'map,max,memoryview,min,next,object,oct,open,ord,pow,print,property,' +\r\n        'quit,range,raw_input,reduce,reload,repr,reversed,round,set,setattr,' +\r\n        'slice,sorted,staticmethod,str,sum,super,tuple,type,unichr,unicode,' +\r\n        'vars,xrange,zip',\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Initialise the database of variable names.\r\n   *\r\n   * @param workspace Workspace to generate code from.\r\n   */\r\n  init(workspace: Workspace) {\r\n    super.init(workspace);\r\n\r\n    this.PASS = this.INDENT + 'pass\\n';\r\n\r\n    if (!this.nameDB_) {\r\n      this.nameDB_ = new Names(this.RESERVED_WORDS_);\r\n    } else {\r\n      this.nameDB_.reset();\r\n    }\r\n\r\n    this.nameDB_.setVariableMap(workspace.getVariableMap());\r\n    this.nameDB_.populateVariables(workspace);\r\n    this.nameDB_.populateProcedures(workspace);\r\n\r\n    const defvars = [];\r\n    // Add developer variables (not created or named by the user).\r\n    const devVarList = Variables.allDeveloperVariables(workspace);\r\n    for (let i = 0; i < devVarList.length; i++) {\r\n      defvars.push(\r\n        this.nameDB_.getName(devVarList[i], Names.DEVELOPER_VARIABLE_TYPE) +\r\n          ' = None',\r\n      );\r\n    }\r\n\r\n    // Add user variables, but only ones that are being used.\r\n    const variables = Variables.allUsedVarModels(workspace);\r\n    for (let i = 0; i < variables.length; i++) {\r\n      defvars.push(this.getVariableName(variables[i].getId()) + ' = None');\r\n    }\r\n\r\n    this.definitions_['variables'] = defvars.join('\\n');\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  /**\r\n   * Prepend the generated code with import statements and variable definitions.\r\n   *\r\n   * @param code Generated code.\r\n   * @returns Completed code.\r\n   */\r\n  finish(code: string): string {\r\n    // Convert the definitions dictionary into a list.\r\n    const imports = [];\r\n    const definitions = [];\r\n    for (let name in this.definitions_) {\r\n      const def = this.definitions_[name];\r\n      if (def.match(/^(from\\s+\\S+\\s+)?import\\s+\\S+/)) {\r\n        imports.push(def);\r\n      } else {\r\n        definitions.push(def);\r\n      }\r\n    }\r\n    // Call Blockly.CodeGenerator's finish.\r\n    code = super.finish(code);\r\n    this.isInitialized = false;\r\n\r\n    this.nameDB_!.reset();\r\n    const allDefs = imports.join('\\n') + '\\n\\n' + definitions.join('\\n\\n');\r\n    return allDefs.replace(/\\n\\n+/g, '\\n\\n').replace(/\\n*$/, '\\n\\n\\n') + code;\r\n  }\r\n\r\n  /**\r\n   * Naked values are top-level blocks with outputs that aren't plugged into\r\n   * anything.\r\n   *\r\n   * @param line Line of generated code.\r\n   * @returns Legal line of code.\r\n   */\r\n  scrubNakedValue(line: string): string {\r\n    return line + '\\n';\r\n  }\r\n\r\n  /**\r\n   * Encode a string as a properly escaped Python string, complete with quotes.\r\n   *\r\n   * @param string Text to encode.\r\n   * @returns Python string.\r\n   */\r\n  quote_(string: string): string {\r\n    string = string.replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\\\n');\r\n\r\n    // Follow the CPython behaviour of repr() for a non-byte string.\r\n    let quote = \"'\";\r\n    if (string.indexOf(\"'\") !== -1) {\r\n      if (string.indexOf('\"') === -1) {\r\n        quote = '\"';\r\n      } else {\r\n        string = string.replace(/'/g, \"\\\\'\");\r\n      }\r\n    }\r\n    return quote + string + quote;\r\n  }\r\n\r\n  /**\r\n   * Encode a string as a properly escaped multiline Python string, complete\r\n   * with quotes.\r\n   *\r\n   * @param string Text to encode.\r\n   * @returns Python string.\r\n   */\r\n  multiline_quote_(string: string): string {\r\n    const lines = string.split(/\\n/g).map(this.quote_);\r\n    // Join with the following, plus a newline:\r\n    // + '\\n' +\r\n    return lines.join(\" + '\\\\n' + \\n\");\r\n  }\r\n\r\n  /**\r\n   * Common tasks for generating Python from blocks.\r\n   * Handles comments for the specified block and any connected value blocks.\r\n   * Calls any statements following this block.\r\n   *\r\n   * @param block The current block.\r\n   * @param code The Python code created for this block.\r\n   * @param thisOnly True to generate code for only this statement.\r\n   * @returns Python code with comments and subsequent blocks added.\r\n\r\n   */\r\n  scrub_(block: Block, code: string, thisOnly = false): string {\r\n    let commentCode = '';\r\n    // Only collect comments for blocks that aren't inline.\r\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\r\n      // Collect comment for this block.\r\n      let comment = block.getCommentText();\r\n      if (comment) {\r\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\r\n        commentCode += this.prefixLines(comment + '\\n', '# ');\r\n      }\r\n      // Collect comments for all value arguments.\r\n      // Don't collect comments for nested statements.\r\n      for (let i = 0; i < block.inputList.length; i++) {\r\n        if (block.inputList[i].type === inputTypes.VALUE) {\r\n          const childBlock = block.inputList[i].connection!.targetBlock();\r\n          if (childBlock) {\r\n            comment = this.allNestedComments(childBlock);\r\n            if (comment) {\r\n              commentCode += this.prefixLines(comment, '# ');\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const nextBlock =\r\n      block.nextConnection && block.nextConnection.targetBlock();\r\n    const nextCode = thisOnly ? '' : this.blockToCode(nextBlock);\r\n    return commentCode + code + nextCode;\r\n  }\r\n\r\n  /**\r\n   * Gets a property and adjusts the value, taking into account indexing.\r\n   * If a static int, casts to an integer, otherwise returns a code string.\r\n   *\r\n   * @param block The block.\r\n   * @param atId The ID of the input block to get (and adjust) the value of.\r\n   * @param delta Value to add.\r\n   * @param negate Whether to negate the value.\r\n   * @returns The adjusted value or code that evaluates to it.\r\n   */\r\n  getAdjustedInt(\r\n    block: Block,\r\n    atId: string,\r\n    delta = 0,\r\n    negate = false,\r\n  ): string | number {\r\n    if (block.workspace.options.oneBasedIndex) {\r\n      delta--;\r\n    }\r\n    const defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\r\n    const atOrder = delta ? Order.ADDITIVE : Order.NONE;\r\n    let at: string | number =\r\n      this.valueToCode(block, atId, atOrder) || defaultAtIndex;\r\n\r\n    if (stringUtils.isNumber(at)) {\r\n      // If the index is a naked number, adjust it right now.\r\n      at = parseInt(at, 10) + delta;\r\n      if (negate) {\r\n        at = -at;\r\n      }\r\n    } else {\r\n      // If the index is dynamic, adjust it in code.\r\n      if (delta > 0) {\r\n        at = 'int(' + at + ' + ' + delta + ')';\r\n      } else if (delta < 0) {\r\n        at = 'int(' + at + ' - ' + -delta + ')';\r\n      } else {\r\n        at = 'int(' + at + ')';\r\n      }\r\n      if (negate) {\r\n        at = '-' + at;\r\n      }\r\n    }\r\n    return at;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Python for dynamic variable blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Python.variablesDynamic\r\n\r\n// generator is dynamically typed.\r\nexport {\r\n  variables_get as variables_get_dynamic,\r\n  variables_set as variables_set_dynamic,\r\n} from './variables.js';\r\n","/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Instantiate a PythonGenerator and populate it with the\r\n * complete set of block generator functions for Python.  This is the\r\n * entrypoint for python_compressed.js.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Python.all\r\n\r\nimport {PythonGenerator} from './python/python_generator.js';\r\nimport * as colour from './python/colour.js';\r\nimport * as lists from './python/lists.js';\r\nimport * as logic from './python/logic.js';\r\nimport * as loops from './python/loops.js';\r\nimport * as math from './python/math.js';\r\nimport * as procedures from './python/procedures.js';\r\nimport * as text from './python/text.js';\r\nimport * as variables from './python/variables.js';\r\nimport * as variablesDynamic from './python/variables_dynamic.js';\r\n\r\nexport * from './python/python_generator.js';\r\n\r\n/**\r\n * Python code generator instance.\r\n * @type {!PythonGenerator}\r\n */\r\nexport const pythonGenerator = new PythonGenerator();\r\n\r\n// Add reserved words.  This list should include all words mentioned\r\n// in RESERVED WORDS: comments in the imports above.\r\npythonGenerator.addReservedWords('math,random,Number');\r\n\r\n// Install per-block-type generator functions:\r\n// Install per-block-type generator functions:\r\nconst generators: typeof pythonGenerator.forBlock = {\r\n  ...colour,\r\n  ...lists,\r\n  ...logic,\r\n  ...loops,\r\n  ...math,\r\n  ...procedures,\r\n  ...text,\r\n  ...variables,\r\n  ...variablesDynamic,\r\n};\r\nfor (const name in generators) {\r\n  pythonGenerator.forBlock[name] = generators[name];\r\n}\r\n"]}