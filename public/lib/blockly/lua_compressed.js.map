{"version":3,"sources":["generators/lua/colour.ts","generators/lua/lists.ts","generators/lua/logic.ts","generators/lua/loops.ts","generators/lua/math.ts","generators/lua/procedures.ts","generators/lua/text.ts","generators/lua/variables.ts","generators/lua/lua_generator.ts","generators/lua/variables_dynamic.ts","generators/lua.ts"],"names":["colour_picker","block","generator","quote_","code","getFieldValue","Order","ATOMIC","colour_random","HIGH","colour_rgb","functionName","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","r","valueToCode","NONE","g","b","colour_blend","colour1","colour2","ratio","lists_create_empty","lists_create_with","elements","Array","itemCount_","i","join","lists_repeat","element","repeatCount","lists_length","UNARY","lists_isEmpty","RELATIONAL","lists_indexOf","item","list","lists_getIndex","mode","where","match","at","atOrder","ADDITIVE","getListIndex","listVar","nameDB_","getDistinctName","NameType","VARIABLE","toLowerCase","lists_setIndex","value","lists_getSublist","where1","where2","at1","at2","at1Param","at2Param","lists_sort","direction","type","lists_split","input","delimiter","Error","lists_reverse","controls_if","n","STATEMENT_PREFIX","injectId","conditionCode","branchCode","statementToCode","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","logic_compare","operator","OPERATORS","argument0","argument1","logic_operation","order","AND","OR","defaultArgument","logic_negate","logic_boolean","logic_null","logic_ternary","value_if","value_then","value_else","addContinueLabel","branch","indent","indexOf","CONTINUE_STATEMENT","controls_repeat_ext","repeats","getField","String","Number","isNumber","parseInt","addLoopTrap","loopVar","controls_whileUntil","until","controls_for","variable0","getVariableName","startVar","endVar","increment","incValue","Math","abs","step","controls_forEach","controls_flow_statements","xfix","loop","getSurroundLoop","suppressPrefixSuffix","math_number","math_arithmetic","tuple","MULTIPLICATIVE","EXPONENTIATION","math_single","arg","math_constant","CONSTANTS","math_number_property","PROPERTIES","dropdownProperty","suffix","inputOrder","outputOrder","numberToCheck","divisor","math_change","varName","math_on_list","provideSum","func","math_modulo","math_constrain","argument2","math_random_int","math_random_float","math_atan2","procedures_defreturn","funcName","getProcedureName","xfix1","loopTrap","INFINITE_LOOP_TRAP","returnValue","xfix2","args","variables","getVars","length","scrub_","definitions_","procedures_callreturn","procedures_callnoreturn","forBlock","procedures_ifreturn","hasReturnValue_","text","text_multiline","multiline_quote_","CONCATENATION","text_join","element0","element1","text_append","text_length","text_isEmpty","text_indexOf","substring","text_charAt","start","text_getSubstring","at1Order","at2Order","end","text_changeCase","text_trim","LEFT","RIGHT","BOTH","text_print","text_prompt_ext","msg","text_count","sub","text_replace","from","to","text_reverse","variables_get","variables_set","LuaGenerator","CodeGenerator","constructor","name","isInitialized","key","addReservedWords","init","workspace","reset","Names","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","finish","definitions","Object","values","scrubNakedValue","line","string","replace","split","map","lines","thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","wrap","COMMENT_WRAP","inputList","inputTypes","VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","$jscomp$tmp$exports$module$name","listName","opt_at","controls_ifelse","controls_repeat","math_round","math_trig","procedures_defnoreturn","text_prompt","luaGenerator","generators","colour","lists","logic","loops","math","procedures","variablesDynamic"],"mappings":"A;;;;;;;;;;;;;;AAgBMA,IAAAA,sDAAAA,QAAuBA,CAC3BC,CAD2BD,CAE3BE,CAF2BF,CAEJA,CAIvBA,MAAOA,CADME,CAAUC,CAAAA,MAAVC,CAAiBH,CAAMI,CAAAA,aAANL,CAAoBA,QAApBA,CAAjBI,CACNJ,CAAOM,oDAAMC,CAAAA,MAAbP,CAJgBA,CAFnBA,CASAQ,sDAAAA,QAAuBA,CAC3BP,CAD2BO,CAE3BN,CAF2BM,CAEJA,CAIvBA,MAAOA,CADMJ,kDACNI,CAAOF,oDAAMG,CAAAA,IAAbD,CAJgBA,CAXnBR,CAkBAU,mDAAAA,QAAoBA,CACxBT,CADwBS,CAExBR,CAFwBQ,CAEDA,CAGvBA,MAAMC,EAAeT,CAAUU,CAAAA,gBAAVF,CACnBA,YADmBA,CAEnBA;WACOR,CAAUW,CAAAA,0BADjBH;;;;;;CAFmBA,CAArBA,CAWMI,EAAIZ,CAAUa,CAAAA,WAAVL,CAAsBT,CAAtBS,CAA6BA,KAA7BA,CAAoCJ,oDAAMU,CAAAA,IAA1CN,CAAJI,EAAuDJ,CAX7DA,CAYMO,EAAIf,CAAUa,CAAAA,WAAVL,CAAsBT,CAAtBS,CAA6BA,OAA7BA,CAAsCJ,oDAAMU,CAAAA,IAA5CN,CAAJO,EAAyDP,CACzDQ,EAAAA,CAAIhB,CAAUa,CAAAA,WAAVL,CAAsBT,CAAtBS,CAA6BA,MAA7BA,CAAqCJ,oDAAMU,CAAAA,IAA3CN,CAAJQ,EAAwDR,CAE9DA,OAAOA,CADMC,CACND,CADqBA,GACrBA,CAD2BI,CAC3BJ,CAD+BA,IAC/BA,CADsCO,CACtCP,CAD0CA,IAC1CA,CADiDQ,CACjDR,CADqDA,GACrDA,CAAOJ,oDAAMG,CAAAA,IAAbC,CAlBgBA,CApBnBV,CAyCAmB,qDAAAA,QAAsBA,CAC1BlB,CAD0BkB,CAE1BjB,CAF0BiB,CAEHA,CAGvBA,MAAMR,EAAeT,CAAUU,CAAAA,gBAAVO,CACnBA,cADmBA,CAEnBA;WACOjB,CAAUW,CAAAA,0BADjBM;;;;;;;;;;;;;CAFmBA,CAArBA,CAkBMC,EACJlB,CAAUa,CAAAA,WAAVI,CAAsBlB,CAAtBkB,CAA6BA,SAA7BA,CAAwCb,oDAAMU,CAAAA,IAA9CG,CADIC,EACmDD,WAnBzDA,CAoBME,EACJnB,CAAUa,CAAAA,WAAVI,CAAsBlB,CAAtBkB,CAA6BA,SAA7BA,CAAwCb,oDAAMU,CAAAA,IAA9CG,CADIE,EACmDF,WACnDG,EAAAA,CAAQpB,CAAUa,CAAAA,WAAVI,CAAsBlB,CAAtBkB,CAA6BA,OAA7BA,CAAsCb,oDAAMU,CAAAA,IAA5CG,CAARG,EAA6DH,CAGnEA,OAAOA,CADLR,CACKQ,CADUA,GACVA,CADgBC,CAChBD,CAD0BA,IAC1BA,CADiCE,CACjCF,CAD2CA,IAC3CA,CADkDG,CAClDH,CAD0DA,GAC1DA,CAAOb,oDAAMG,CAAAA,IAAbU,CA5BgBA,CA3CnBnB,CCEAuB,0DAAAA,QAA4BA,CAChCtB,CADgCsB,CAEhCrB,CAFgCqB,CAETA,CAGvBA,MAAOA,CAACA,IAADA,CAAOjB,oDAAMG,CAAAA,IAAbc,CAHgBA,CDJnBvB;ACUAwB,yDAAAA,QAA2BA,CAC/BvB,CAD+BuB,CAE/BtB,CAF+BsB,CAERA,CAIvBA,MAAMC,EAAeC,KAAJF,CAFOvB,CAEmB0B,CAAAA,UAA1BH,CACjBA,KAAKA,IAAII,EAAIJ,CAAbA,CAAgBI,CAAhBJ,CAHwBvB,CAGY0B,CAAAA,UAApCH,CAAgDI,CAAAJ,EAAhDA,CACEC,CAAAD,CAASI,CAATJ,CAAAA,CACEtB,CAAUa,CAAAA,WAAVS,CALoBvB,CAKpBuB,CAAuCA,KAAvCA,CAA+CI,CAA/CJ,CAAkDlB,oDAAMU,CAAAA,IAAxDQ,CADFA,EACmEA,MAGrEA,OAAOA,CADMA,GACNA,CADYC,CAASI,CAAAA,IAATL,CAAcA,IAAdA,CACZA,CADkCA,GAClCA,CAAOlB,oDAAMG,CAAAA,IAAbe,CAVgBA,CDZnBxB,CCyBA8B,oDAAAA,QAAsBA,CAC1B7B,CAD0B6B,CAE1B5B,CAF0B4B,CAEHA,CAGvBA,MAAMnB,EAAeT,CAAUU,CAAAA,gBAAVkB,CACnBA,sBADmBA,CAEnBA;WACO5B,CAAUW,CAAAA,0BADjBiB;;;;;;;GAFmBA,CAArBA,CAYMC,EAAU7B,CAAUa,CAAAA,WAAVe,CAAsB7B,CAAtB6B,CAA6BA,MAA7BA,CAAqCxB,oDAAMU,CAAAA,IAA3Cc,CAAVC,EAA8DD,MAC9DE,EAAAA,CAAc9B,CAAUa,CAAAA,WAAVe,CAAsB7B,CAAtB6B,CAA6BA,KAA7BA,CAAoCxB,oDAAMU,CAAAA,IAA1Cc,CAAdE,EAAiEF,GAEvEA,OAAOA,CADMnB,CACNmB,CADqBA,GACrBA,CAD2BC,CAC3BD,CADqCA,IACrCA,CAD4CE,CAC5CF,CAD0DA,GAC1DA,CAAOxB,oDAAMG,CAAAA,IAAbqB,CAlBgBA,CD3BnB9B,CCgDAiC,oDAAAA,QAAsBA,CAC1BhC,CAD0BgC,CAE1B/B,CAF0B+B,CAEHA,CAIvBA,MAAOA,CAACA,GAADA,EADM/B,CAAUa,CAAAA,WAAVkB,CAAsBhC,CAAtBgC,CAA6BA,OAA7BA,CAAsC3B,oDAAM4B,CAAAA,KAA5CD,CACNA,EAD4DA,IAC5DA,EAAa3B,oDAAM4B,CAAAA,KAAnBD,CAJgBA,CDlDnBjC;ACyDAmC,qDAAAA,QAAuBA,CAC3BlC,CAD2BkC,CAE3BjC,CAF2BiC,CAEJA,CAKvBA,MAAOA,CADMA,GACNA,EAFMjC,CAAUa,CAAAA,WAAVoB,CAAsBlC,CAAtBkC,CAA6BA,OAA7BA,CAAsC7B,oDAAM4B,CAAAA,KAA5CC,CAENA,EAF4DA,IAE5DA,EADmBA,OACnBA,CAAO7B,oDAAM8B,CAAAA,UAAbD,CALgBA,CD3DnBnC,CCmEAqC,qDAAAA,QAAuBA,CAC3BpC,CAD2BoC,CAE3BnC,CAF2BmC,CAEJA,CAGvBA,MAAMC,EAAOpC,CAAUa,CAAAA,WAAVsB,CAAsBpC,CAAtBoC,CAA6BA,MAA7BA,CAAqC/B,oDAAMU,CAAAA,IAA3CqB,CAAPC,EAA2DD,IAAjEA,CACME,EAAOrC,CAAUa,CAAAA,WAAVsB,CAAsBpC,CAAtBoC,CAA6BA,OAA7BA,CAAsC/B,oDAAMU,CAAAA,IAA5CqB,CAAPE,EAA4DF,IAgClEA,OAAOA,EA9B4BA,OAAnC1B;AAAIV,CAAMI,CAAAA,aAANgC,CAAoBA,KAApBA,CAAJ1B,CACiBT,CAAUU,CAAAA,gBAAVyB,CACbA,aADaA,CAEbA;WACKnC,CAAUW,CAAAA,0BADfwB;;;;;;;;CAFaA,CADjB1B,CAeiBT,CAAUU,CAAAA,gBAAVyB,CACbA,YADaA,CAEbA;WACKnC,CAAUW,CAAAA,0BADfwB;;;;;;;;CAFaA,CAeVA,EADqBA,GACrBA,CAD2BE,CAC3BF,CADkCA,IAClCA,CADyCC,CACzCD,CADgDA,GAChDA,CAAO/B,oDAAMG,CAAAA,IAAb4B,CApCgBA,CDrEnBrC,CCsIAwC,sDAAAA,QAAwBA,CAC5BvC,CAD4BuC,CAE5BtC,CAF4BsC,CAELA,CAIvBA,IAAMC,EAAOxC,CAAMI,CAAAA,aAANmC,CAAoBA,MAApBA,CAAPC,EAAsCD,KAA5CA,CACME,EAAQzC,CAAMI,CAAAA,aAANmC,CAAoBA,OAApBA,CAARE,EAAwCF,YAC9CA,OAAMD,EAAOrC,CAAUa,CAAAA,WAAVyB,CAAsBvC,CAAtBuC,CAA6BA,OAA7BA,CAAsClC,oDAAMG,CAAAA,IAA5C+B,CAAPD,EAA4DC,MAIlEA,IACaA,MADbA,GACGE,CADHF,EACiCA,UADjCA,GACuBE,CADvBF,EACyDA,QADzDA,GAC+CE,CAD/CF,EAEGD,CAAKI,CAAAA,KAALH,CAAWA,OAAXA,CAFHA,CAqEOA,CAKDI,CAAAA,CAAK1C,CAAUa,CAAAA,WAAVyB,CAAsBvC,CAAtBuC,CAA6BA,IAA7BA,CADEA,KAATK,GAAAJ,CAAAI,EAA4BL,UAA5BK,GAAkBH,CAAlBG,CAAyCvC,oDAAMwC,CAAAA,QAA/CD,CAA0DvC,oDAAMU,CAAAA,IACzDwB,CAALI;AAAoDJ,GACxDI,EAAAJ,CAAKO,mDAAAP,CAAaD,CAAbC,CAAmBE,CAAnBF,CAA0BI,CAA1BJ,CACLA,IAAaA,KAAbA,GAAIC,CAAJD,CAEEA,MAAOA,CADMD,CACNC,CADaA,GACbA,CADmBI,CACnBJ,CADwBA,GACxBA,CAAOlC,oDAAMG,CAAAA,IAAb+B,CAEDpC,EAAAA,CAAOoC,eAAPpC,CAAyBmC,CAAzBnC,CAAgCoC,IAAhCpC,CAAuCwC,CAAvCxC,CAA4CoC,GAClDA,OAAaA,YAAbA,GAAIC,CAAJD,CACSA,CAACpC,CAADoC,CAAOlC,oDAAMG,CAAAA,IAAb+B,CADTA,CAISpC,CAJToC,CAIgBA,IAhBbA,CAhELA,GAAaA,QAAbA,GAAIC,CAAJD,CAmBEA,MAhBII,EAOFxC,CAPOF,CAAUa,CAAAA,WAAVyB,CAAsBvC,CAAtBuC,CAA6BA,IAA7BA,CADiBA,UAAVK,GAAAH,CAAAG,CAAuBvC,oDAAMwC,CAAAA,QAA7BD,CAAwCvC,oDAAMU,CAAAA,IACrDwB,CAOPpC,EAPsDoC,GAOtDpC,CANI4C,CAMJ5C,CANcF,CAAU+C,CAAAA,OAASC,CAAAA,eAAnBV,CACdA,UADcA;AAEdW,CAAAA,CAAAA,qCAASC,CAAAA,QAFKZ,CAMdpC,CAFFwC,CAEExC,CAFG2C,mDAAAP,CAAaQ,CAAbR,CAAsBE,CAAtBF,CAA6BI,CAA7BJ,CAEHpC,CAAA4C,CAAA5C,CACAoC,KADApC,CAEAmC,CAFAnC,CAGAoC,iBAHApC,CAKA4C,CALA5C,CAMAoC,IANApC,CAOAwC,CAPAxC,CAQAoC,KAIII,EAAAA,CAAK1C,CAAUa,CAAAA,WAAVyB,CAAsBvC,CAAtBuC,CAA6BA,IAA7BA,CAAmClC,oDAAMU,CAAAA,IAAzCwB,CAALI,EAAuDJ,GAwC7DA,OAAOA,EAtCMA,KAAb7B,GAAI8B,CAAJ9B,CACiBT,CAAUU,CAAAA,gBAAV4B,CACbA,WADaA,CACCE,CAAMW,CAAAA,WAANb,EADDA,CAEbA,CACEA,WADFA,CAEItC,CAAUW,CAAAA,0BAFd2B,CAGIA,IAHJA,EAMeA,UAAVA,GAAAE,CAAAF,EAAkCA,YAAlCA,GAAwBE,CAAxBF,CAAiDA,OAAjDA,CAA2DA,GANhEA,EAOEA,aAPFA,CAOkBO,mDAAAP,CAAaA,GAAbA,CAAkBE,CAAlBF,CAAyBA,IAAzBA,CAPlBA,CAOmDA,GAPnDA,CAQEA,KARFA,CAFaA,CADjB7B,CAgBiBT,CAAUU,CAAAA,gBAAV4B,CACbA,cADaA;AACIE,CAAMW,CAAAA,WAANb,EADJA,CAEbA,CACEA,WADFA,CAEItC,CAAUW,CAAAA,0BAFd2B,CAGIA,IAHJA,EAMeA,UAAVA,GAAAE,CAAAF,EAAkCA,YAAlCA,GAAwBE,CAAxBF,CAAiDA,OAAjDA,CAA2DA,GANhEA,EAOEA,2BAPFA,CAOgCO,mDAAAP,CAAaA,GAAbA,CAAkBE,CAAlBF,CAAyBA,IAAzBA,CAPhCA,CAOiEA,GAPjEA,CAQEA,KARFA,CAFaA,CAsBVA,EANLA,GAMKA,CALLD,CAKKC,EAFMA,UAAVA,GAAAE,CAAAF,EAAkCA,YAAlCA,GAAwBE,CAAxBF,CAAiDA,IAAjDA,CAAwDI,CAAxDJ,CAA6DA,EAEzDA,EADLA,GACKA,CAAOlC,oDAAMG,CAAAA,IAAb+B,CA7EYA,CDxInBxC,CC6OAsD,sDAAAA,QAAwBA,CAACrD,CAADqD,CAAepD,CAAfoD,CAAsCA,CAGlEA,IAAIf,EAAOrC,CAAUa,CAAAA,WAAVuC,CAAsBrD,CAAtBqD,CAA6BA,MAA7BA,CAAqChD,oDAAMG,CAAAA,IAA3C6C,CAAPf,EAA2De,IAC/DA,OAAMb,EAAOxC,CAAMI,CAAAA,aAANiD,CAAoBA,MAApBA,CAAPb;AAAsCa,KAA5CA,CACMZ,EAAQzC,CAAMI,CAAAA,aAANiD,CAAoBA,OAApBA,CAARZ,EAAwCY,YAD9CA,CAEMV,EAAK1C,CAAUa,CAAAA,WAAVuC,CAAsBrD,CAAtBqD,CAA6BA,IAA7BA,CAAmChD,oDAAMwC,CAAAA,QAAzCQ,CAALV,EAA2DU,GAC3DC,EAAAA,CAAQrD,CAAUa,CAAAA,WAAVuC,CAAsBrD,CAAtBqD,CAA6BA,IAA7BA,CAAmChD,oDAAMU,CAAAA,IAAzCsC,CAARC,EAA0DD,MAEhEA,KAAIlD,EAAOkD,EAIEA,OADbA,GACGZ,CADHY,EACiCA,UADjCA,GACuBZ,CADvBY,EACyDA,QADzDA,GAC+CZ,CAD/CY,EAEGf,CAAKI,CAAAA,KAALW,CAAWA,OAAXA,CAFHA,GAMQN,CAKNM,CALgBpD,CAAU+C,CAAAA,OAASC,CAAAA,eAAnBI,CACdA,UADcA,CAEdH,CAAAA,CAAAA,qCAASC,CAAAA,QAFKE,CAKhBA,CADAlD,CACAkD,CADON,CACPM,CADiBA,KACjBA,CADyBf,CACzBe,CADgCA,IAChCA,CAAAf,CAAAe,CAAON,CAXTM,CAcElD,EAAAkD,CADWA,KAAbA,GAAIb,CAAJa,CACElD,CADFkD,EACUf,CADVe,CACiBA,GADjBA,CACuBP,mDAAAO,CAAaf,CAAbe,CAAmBZ,CAAnBY,CAA0BV,CAA1BU,CADvBA,CACuDA,MADvDA,CACgEC,CADhED,EAMElD,CANFkD;CAOIA,eAPJA,CAQIf,CARJe,CASIA,IATJA,EAUKP,mDAAAO,CAAaf,CAAbe,CAAmBZ,CAAnBY,CAA0BV,CAA1BU,CAVLA,EAUgDA,MAAVA,GAAAZ,CAAAY,CAAmBA,MAAnBA,CAA4BA,EAVlEA,GAWIA,IAXJA,CAYIC,CAZJD,CAaIA,GAbJA,CAeAA,OAAOlD,EAAPkD,CAAcA,IAxCoDA,CD7O9DtD,CCwRAwD,wDAAAA,QAA0BA,CAC9BvD,CAD8BuD,CAE9BtD,CAF8BsD,CAEPA,CAGvBA,MAAMjB,EAAOrC,CAAUa,CAAAA,WAAVyC,CAAsBvD,CAAtBuD,CAA6BA,MAA7BA,CAAqClD,oDAAMU,CAAAA,IAA3CwC,CAAPjB,EAA2DiB,IAAjEA,CACMC,EAASxD,CAAMI,CAAAA,aAANmD,CAAoBA,QAApBA,CADfA,CAEME,EAASzD,CAAMI,CAAAA,aAANmD,CAAoBA,QAApBA,CAFfA,CAGMG,EAAMzD,CAAUa,CAAAA,WAAVyC,CAAsBvD,CAAtBuD,CAA6BA,KAA7BA,CAAoClD,oDAAMU,CAAAA,IAA1CwC,CAANG,EAAyDH,GACzDI,EAAAA,CAAM1D,CAAUa,CAAAA,WAAVyC,CAAsBvD,CAAtBuD,CAA6BA,KAA7BA,CAAoClD,oDAAMU,CAAAA,IAA1CwC,CAANI;AAAyDJ,GAI/DA,OAAMK,EACOL,UAAXA,GAAAC,CAAAD,EAAoCA,YAApCA,GAAyBC,CAAzBD,CAAmDA,OAAnDA,CAA6DA,EAD/DA,CAEMM,EACON,UAAXA,GAAAE,CAAAF,EAAoCA,YAApCA,GAAyBE,CAAzBF,CAAmDA,OAAnDA,CAA6DA,EAwB/DA,OAAOA,CAvBctD,CAAUU,CAAAA,gBAAVD,CACnB6C,eADmB7C,CACD8C,CAAOJ,CAAAA,WAAPG,EADC7C,CACsB6C,GADtB7C,CAC4B+C,CAAOL,CAAAA,WAAPG,EAD5B7C,CAEnB6C;WACOtD,CAAUW,CAAAA,0BADjB2C,UACqDK,CADrDL,GACgEM,CADhEN;;kBAGcT,mDAAAS,CAAaA,QAAbA,CAAuBC,CAAvBD,CAA+BA,KAA/BA,CAHdA;mBAIeT,mDAAAS,CAAaA,QAAbA,CAAuBE,CAAvBF,CAA+BA,KAA/BA,CAJfA;;;;;;CAFmB7C,CAuBd6C,CAPLA,GAOKA,CANLjB,CAMKiB,EAHOA,UAAXA,GAAAC,CAAAD,EAAoCA,YAApCA,GAAyBC,CAAzBD,CAAmDA,IAAnDA,CAA0DG,CAA1DH,CAAgEA,EAG5DA,GAFOA,UAAXA,GAAAE,CAAAF,EAAoCA,YAApCA,GAAyBE,CAAzBF,CAAmDA,IAAnDA,CAA0DI,CAA1DJ,CAAgEA,EAE5DA,EADLA,GACKA,CAAOlD,oDAAMG,CAAAA,IAAb+C,CAtCgBA,CD1RnBxD,CCmUA+D,kDAAAA,QAAoBA,CACxB9D,CADwB8D,CAExB7D,CAFwB6D,CAEDA,CAGvBA,MAAMxB,EAAOrC,CAAUa,CAAAA,WAAVgD,CAAsB9D,CAAtB8D,CAA6BA,MAA7BA,CAAqCzD,oDAAMU,CAAAA,IAA3C+C,CAAPxB,EAA2DwB,IAAjEA,CACMC,EAAiDD,GAArCA,GAAA9D,CAAMI,CAAAA,aAAN0D,CAAoBA,WAApBA,CAAAA,CAA2CA,CAA3CA,CAA+CA,CAACA,CAC5DE,EAAAA,CAAOhE,CAAMI,CAAAA,aAAN0D,CAAoBA,MAApBA,CA8BbA,OAAOA,CA5Bc7D,CAAUU,CAAAA,gBAAVD,CACnBoD,WADmBpD,CAEnBoD;WACO7D,CAAUW,CAAAA,0BADjBkD;;;;;;;;;;;;;;;;;;;;CAFmBpD,CA4BdoD,CADUA,GACVA,CADgBxB,CAChBwB,CADuBA,IACvBA,CAD8BE,CAC9BF,CADqCA,KACrCA,CAD6CC,CAC7CD,CADyDA,GACzDA,CAAOzD,oDAAMG,CAAAA,IAAbsD,CAnCgBA,CDrUnB/D,CC2WAkE,mDAAAA,QAAqBA,CACzBjE,CADyBiE,CAEzBhE,CAFyBgE,CAEFA,CAGvBA,IAAIC,EAAQjE,CAAUa,CAAAA,WAAVmD,CAAsBjE,CAAtBiE,CAA6BA,OAA7BA,CAAsC5D,oDAAMU,CAAAA,IAA5CkD,CACZA,OAAME,EAAYlE,CAAUa,CAAAA,WAAVmD,CAAsBjE,CAAtBiE,CAA6BA,OAA7BA,CAAsC5D,oDAAMU,CAAAA,IAA5CkD,CAAZE,EAAiEF,IACjEzB,EAAAA,CAAOxC,CAAMI,CAAAA,aAAN6D,CAAoBA,MAApBA,CAEbA,IAAaA,OAAbA,GAAIzB,CAAJyB,CACOC,CAGLD,GAFEC,CAEFD,CAFUA,IAEVA,EAAAvD,CAAAuD,CAAehE,CAAUU,CAAAA,gBAAVsD,CACbA,mBADaA,CAEbA;WACKhE,CAAUW,CAAAA,0BADfqD;;;;;;;;;;;;;;;CAFaA,CAJjBA,KAwBOA,IAAaA,MAAbA,GAAIzB,CAAJyB,CACAC,CAGLD,GAFEC,CAEFD,CAFUA,IAEVA,EAAAvD,CAAAuD,CAAeA,cAJVA,KAMLA,MAAMG,MAAAH,CAAMA,gBAANA,CAAyBzB,CAAzByB,CAANA,CAGFA,MAAOA,CADMvD,CACNuD,CADqBA,GACrBA,CAD2BC,CAC3BD,CADmCA,IACnCA,CAD0CE,CAC1CF,CADsDA,GACtDA,CAAO5D,oDAAMG,CAAAA,IAAbyD,CAxCgBA,CD7WnBlE,CCwZAsE,qDAAAA,QAAuBA,CAC3BrE,CAD2BqE,CAE3BpE,CAF2BoE,CAEJA,CAGjB/B,CAAAA,CAAOrC,CAAUa,CAAAA,WAAVuD,CAAsBrE,CAAtBqE,CAA6BA,MAA7BA,CAAqChE,oDAAMU,CAAAA,IAA3CsD,CAAP/B,EAA2D+B,IAcjEA,OAAOA,CAbcpE,CAAUU,CAAAA,gBAAVD,CACnB2D,cADmB3D,CAEnB2D;WACOpE,CAAUW,CAAAA,0BADjByD;;;;;;;CAFmB3D,CAad2D,CADqBA,GACrBA,CAD2B/B,CAC3B+B,CADkCA,GAClCA,CAAOhE,oDAAMG,CAAAA,IAAb6D,CAjBgBA,CD1ZnBtE,CEAAuE,mDAAAA,QAAqBA,CAACtE,CAADsE,CAAerE,CAAfqE,CAAsCA,CAE/DA,IAAIC,EAAID,CACRA,KAAInE,EAAOmE,EACPrE,EAAUuE,CAAAA,gBAAdF,GAEEnE,CAFFmE,EAEUrE,CAAUwE,CAAAA,QAAVH,CAAmBrE,CAAUuE,CAAAA,gBAA7BF,CAA+CtE,CAA/CsE,CAFVA,CAIAA,GAAGA,CACDA,MAAMI,EACJzE,CAAUa,CAAAA,WAAVwD,CAAsBtE,CAAtBsE,CAA6BA,IAA7BA,CAAoCC,CAApCD,CAAuCjE,oDAAMU,CAAAA,IAA7CuD,CADII,EACkDJ,OACxDA,KAAIK,EAAa1E,CAAU2E,CAAAA,eAAVN,CAA0BtE,CAA1BsE,CAAiCA,IAAjCA,CAAwCC,CAAxCD,CACbrE,EAAU4E,CAAAA,gBAAdP,GACEK,CADFL,CAEIrE,CAAU6E,CAAAA,WAAVR,CACErE,CAAUwE,CAAAA,QAAVH,CAAmBrE,CAAU4E,CAAAA,gBAA7BP,CAA+CtE,CAA/CsE,CADFA,CAEErE,CAAU8E,CAAAA,MAFZT,CAFJA,CAKQK,CALRL,CAOAnE,EAAAmE,GACOA,CAAJA,CAAAC,CAAAD,CAAQA,MAARA,CAAiBA,EADpBA,EAC0BA,KAD1BA,CACkCI,CADlCJ,CACkDA,SADlDA,CAC8DK,CAC9DJ,EAAAD,EAbCA,CAAHA,MAcStE,CAAMgF,CAAAA,QAANV,CAAeA,IAAfA,CAAsBC,CAAtBD,CAdTA,CAgBAA;GAAItE,CAAMgF,CAAAA,QAANV,CAAeA,MAAfA,CAAJA,EAA8BrE,CAAU4E,CAAAA,gBAAxCP,CACMK,CAQJL,CARiBrE,CAAU2E,CAAAA,eAAVN,CAA0BtE,CAA1BsE,CAAiCA,MAAjCA,CAQjBA,CAPIrE,CAAU4E,CAAAA,gBAOdP,GANEK,CAMFL,CALIrE,CAAU6E,CAAAA,WAAVR,CACErE,CAAUwE,CAAAA,QAAVH,CAAmBrE,CAAU4E,CAAAA,gBAA7BP,CAA+CtE,CAA/CsE,CADFA,CAEErE,CAAU8E,CAAAA,MAFZT,CAKJA,CAFQK,CAERL,EAAAnE,CAAAmE,EAAQA,QAARA,CAAmBK,CAErBL,OAAOnE,EAAPmE,CAAcA,OAnCiDA,CFA3DvE,CEwCAkF,qDAAAA,QAAuBA,CAC3BjF,CAD2BiF,CAE3BhF,CAF2BgF,CAEJA,CAYvBA,MAAMC,EATYC,CAChBF,GAAMA,IADUE,CAEhBF,IAAOA,IAFSE,CAGhBF,GAAMA,GAHUE,CAIhBF,IAAOA,IAJSE,CAKhBF,GAAMA,GALUE,CAMhBF,IAAOA,IANSE,CASDF,CAAUjF,CAAMI,CAAAA,aAAN6E,CAAoBA,IAApBA,CAAVA,CAAjBA,CACMG,EAAYnF,CAAUa,CAAAA,WAAVmE,CAAsBjF,CAAtBiF,CAA6BA,GAA7BA,CAAkC5E,oDAAM8B,CAAAA,UAAxC8C,CAAZG,EAAmEH,GACnEI,EAAAA,CAAYpF,CAAUa,CAAAA,WAAVmE,CAAsBjF,CAAtBiF,CAA6BA,GAA7BA,CAAkC5E,oDAAM8B,CAAAA,UAAxC8C,CAAZI;AAAmEJ,GAEzEA,OAAOA,CADMG,CACNH,CADkBA,GAClBA,CADwBC,CACxBD,CADmCA,GACnCA,CADyCI,CACzCJ,CAAO5E,oDAAM8B,CAAAA,UAAb8C,CAhBgBA,CF1CnBlF,CE6DAuF,uDAAAA,QAAyBA,CAC7BtF,CAD6BsF,CAE7BrF,CAF6BqF,CAENA,CAGvBA,MAAMJ,EAAyCI,KAA9BA,GAAAtF,CAAMI,CAAAA,aAANkF,CAAoBA,IAApBA,CAAAA,CAAsCA,KAAtCA,CAA8CA,IAA/DA,CACMC,EAAqBD,KAAbA,GAAAJ,CAAAI,CAAqBjF,oDAAMmF,CAAAA,GAA3BF,CAAiCjF,oDAAMoF,CAAAA,EACrDH,KAAIF,EAAYnF,CAAUa,CAAAA,WAAVwE,CAAsBtF,CAAtBsF,CAA6BA,GAA7BA,CAAkCC,CAAlCD,CACZD,EAAAA,CAAYpF,CAAUa,CAAAA,WAAVwE,CAAsBtF,CAAtBsF,CAA6BA,GAA7BA,CAAkCC,CAAlCD,CACXF,EAALE,EAAmBD,CAAnBC,EAMQI,CAINJ,CAJqCA,KAAbA,GAAAJ,CAAAI,CAAqBA,MAArBA,CAA8BA,OAItDA,CAHKF,CAGLE,GAFEF,CAEFE,CAFcI,CAEdJ,EAAKD,CAALC,GACED,CADFC,CACcI,CADdJ,CAVFA,EAGED,CAHFC,CAEEF,CAFFE,CAEcA,OAadA,OAAOA,CADMF,CACNE,CADkBA,GAClBA,CADwBJ,CACxBI,CADmCA,GACnCA,CADyCD,CACzCC,CAAOC,CAAPD,CAtBgBA,CF/DnBvF,CEwFA4F;AAAAA,QAAsBA,CAC1B3F,CAD0B2F,CAE1B1F,CAF0B0F,CAEHA,CAKvBA,MAAOA,CADMA,MACNA,EAFW1F,CAAUa,CAAAA,WAAV6E,CAAsB3F,CAAtB2F,CAA6BA,MAA7BA,CAAqCtF,oDAAM4B,CAAAA,KAA3C0D,CAEXA,EAFgEA,MAEhEA,EAAOtF,oDAAM4B,CAAAA,KAAb0D,CALgBA,CF1FnB5F,CEkGA6F,qDAAAA,QAAuBA,CAC3B5F,CAD2B4F,CAE3B3F,CAF2B2F,CAEJA,CAIvBA,MAAOA,CADsCA,MAAhCzF,GAAAH,CAAMI,CAAAA,aAANwF,CAAoBA,MAApBA,CAAAzF,CAAyCyF,MAAzCzF,CAAkDyF,OACxDA,CAAOvF,oDAAMC,CAAAA,MAAbsF,CAJgBA,CFpGnB7F,CE2GA8F,kDAAAA,QAAoBA,CACxB7F,CADwB6F,CAExB5F,CAFwB4F,CAEDA,CAGvBA,MAAOA,CAACA,KAADA,CAAQxF,oDAAMC,CAAAA,MAAduF,CAHgBA,CF7GnB9F;AEmHA+F,qDAAAA,QAAuBA,CAC3B9F,CAD2B8F,CAE3B7F,CAF2B6F,CAEJA,CAGvBA,MAAMC,EAAW9F,CAAUa,CAAAA,WAAVgF,CAAsB9F,CAAtB8F,CAA6BA,IAA7BA,CAAmCzF,oDAAMmF,CAAAA,GAAzCM,CAAXC,EAA4DD,OAAlEA,CACME,EAAa/F,CAAUa,CAAAA,WAAVgF,CAAsB9F,CAAtB8F,CAA6BA,MAA7BA,CAAqCzF,oDAAMmF,CAAAA,GAA3CM,CAAbE,EAAgEF,KAChEG,EAAAA,CAAahG,CAAUa,CAAAA,WAAVgF,CAAsB9F,CAAtB8F,CAA6BA,MAA7BA,CAAqCzF,oDAAMoF,CAAAA,EAA3CK,CAAbG,EAA+DH,KAErEA,OAAOA,CADMC,CACND,CADiBA,OACjBA,CAD2BE,CAC3BF,CADwCA,MACxCA,CADiDG,CACjDH,CAAOzF,oDAAMoF,CAAAA,EAAbK,CAPgBA,CFrHnB/F,CGoBNmG,wDAAAA,QAAyBA,CAACC,CAADD,CAAiBE,CAAjBF,CAA+BA,CACtDA,MAA2CA,CAACA,CAA5CA;AAAIC,CAAOE,CAAAA,OAAPH,CAAeI,yDAAfJ,CAAJA,CAESC,CAFTD,CAEkBE,CAFlBF,CAE2BA,gBAF3BA,CAISC,CAL6CD,CHpBlDnG,CG6BAwG,2DAAAA,QAA6BA,CACjCvG,CADiCuG,CAEjCtG,CAFiCsG,CAEVA,CAGvBA,IAAIC,CAGFA,EAAAD,CAFEvG,CAAMyG,CAAAA,QAANF,CAAeA,OAAfA,CAAJA,CAEYG,MAAAH,CAAOI,MAAAJ,CAAOvG,CAAMI,CAAAA,aAANmG,CAAoBA,OAApBA,CAAPA,CAAPA,CAFZA,CAKYtG,CAAUa,CAAAA,WAAVyF,CAAsBvG,CAAtBuG,CAA6BA,OAA7BA,CAAsClG,oDAAMU,CAAAA,IAA5CwF,CALZA,EAKiEA,GAG/DC,EAAAD,CADcK,CAAAA,CAAAA,4CAAZL,CAAqBC,CAArBD,CAAJA,CACYM,QAAAN,CAASC,CAATD,CAAkBA,EAAlBA,CADZA,CAGYA,aAHZA,CAG4BC,CAH5BD,CAGsCA,GAEtCA,KAAIJ,EAASlG,CAAU2E,CAAAA,eAAV2B,CAA0BvG,CAA1BuG,CAAiCA,IAAjCA,CACbJ,EAAAI,CAAStG,CAAU6G,CAAAA,WAAVP,CAAsBJ,CAAtBI,CAA8BvG,CAA9BuG,CACTJ,EAAAI,CAASL,uDAAAK,CAAiBJ,CAAjBI;AAAyBtG,CAAU8E,CAAAA,MAAnCwB,CAOTA,OADEA,MACFA,CANgBtG,CAAU+C,CAAAA,OAASC,CAAAA,eAAnB8D,CACdR,OADcQ,CAEd7D,CAAAA,CAAAA,qCAASC,CAAAA,QAFK4D,CAMhBR,CADqBA,QACrBA,CADgCC,CAChCD,CAD0CA,OAC1CA,CADoDJ,CACpDI,CAD6DA,OAxBtCA,CH/BnBxG,CG6DAiH,2DAAAA,QAA6BA,CACjChH,CADiCgH,CAEjC/G,CAFiC+G,CAEVA,CAGvBA,MAAMC,EAAwCD,OAAxCC,GAAQjH,CAAMI,CAAAA,aAAN4G,CAAoBA,MAApBA,CACdA,KAAI5B,EACFnF,CAAUa,CAAAA,WAAVkG,CAAsBhH,CAAtBgH,CAA6BA,MAA7BA,CAAqCC,CAAAD,CAAQ3G,oDAAM4B,CAAAA,KAAd+E,CAAsB3G,oDAAMU,CAAAA,IAAjEiG,CADE5B,EAEF4B,OAFFA,CAGIb,EAASlG,CAAU2E,CAAAA,eAAVoC,CAA0BhH,CAA1BgH,CAAiCA,IAAjCA,CACbb,EAAAa,CAAS/G,CAAU6G,CAAAA,WAAVE,CAAsBb,CAAtBa,CAA8BhH,CAA9BgH,CACTb,EAAAa,CAASd,uDAAAc,CAAiBb,CAAjBa;AAAyB/G,CAAU8E,CAAAA,MAAnCiC,CACLC,EAAJD,GACE5B,CADF4B,CACcA,MADdA,CACuB5B,CADvB4B,CAGAA,OAAOA,QAAPA,CAAkB5B,CAAlB4B,CAA8BA,OAA9BA,CAAwCb,CAAxCa,CAAiDA,OAb1BA,CH/DnBjH,CG+EAmH,oDAAAA,QAAsBA,CAAClH,CAADkH,CAAejH,CAAfiH,CAAsCA,CAEhEA,MAAMC,EAAYlH,CAAUmH,CAAAA,eAAVF,CAA0BlH,CAAMI,CAAAA,aAAN8G,CAAoBA,KAApBA,CAA1BA,CAAlBA,CACMG,EAAWpH,CAAUa,CAAAA,WAAVoG,CAAsBlH,CAAtBkH,CAA6BA,MAA7BA,CAAqC7G,oDAAMU,CAAAA,IAA3CmG,CAAXG,EAA+DH,GADrEA,CAEMI,EAASrH,CAAUa,CAAAA,WAAVoG,CAAsBlH,CAAtBkH,CAA6BA,IAA7BA,CAAmC7G,oDAAMU,CAAAA,IAAzCmG,CAATI,EAA2DJ,GAFjEA,CAGMK,EAAYtH,CAAUa,CAAAA,WAAVoG,CAAsBlH,CAAtBkH,CAA6BA,IAA7BA,CAAmC7G,oDAAMU,CAAAA,IAAzCmG,CAAZK,EAA8DL,GACpEA,KAAIf,EAASlG,CAAU2E,CAAAA,eAAVsC,CAA0BlH,CAA1BkH,CAAiCA,IAAjCA,CACbf,EAAAe,CAASjH,CAAU6G,CAAAA,WAAVI,CAAsBf,CAAtBe,CAA8BlH,CAA9BkH,CACTf,EAAAe,CAAShB,uDAAAgB,CAAiBf,CAAjBe;AAAyBjH,CAAU8E,CAAAA,MAAnCmC,CACL/G,EAAAA,CAAO+G,EACXA,KAAIM,CAEUZ,EAAAA,CAAAA,4CAAZM,CAAqBG,CAArBH,CADFA,EAEcN,CAAAA,CAAAA,4CAAZM,CAAqBI,CAArBJ,CAFFA,EAGcN,CAAAA,CAAAA,4CAAZM,CAAqBK,CAArBL,CAHFA,CAQEM,CARFN,EAMaP,MAAAO,CAAOG,CAAPH,CAECA,EAFmBP,MAAAO,CAAOI,CAAPJ,CAEnBA,CAAKA,EAALA,CAAUA,GARxBA,EAOeO,IAAKC,CAAAA,GAALC,CAAShB,MAAAO,CAAOK,CAAPL,CAATS,CAPfT,EAUE/G,CAeA+G,CAfOA,EAePA,CAZAM,CAYAN,CAZWjH,CAAU+C,CAAAA,OAASC,CAAAA,eAAnBiE,CACTC,CADSD,CACGA,MADHA,CAEThE,CAAAA,CAAAA,qCAASC,CAAAA,QAFA+D,CAYXA,CARA/G,CAQA+G,EARQM,CAQRN,CARmBA,KAQnBA,CANE/G,CAMF+G,CAPgBN,CAAAA,CAAAA,4CAAZM,CAAqBK,CAArBL,CAAJA,CACE/G,CADF+G,EACUO,IAAKC,CAAAA,GAALR,CAASK,CAATL,CADVA,CACqDA,IADrDA,EAGE/G,CAHF+G,EAGUA,WAHVA,CAGwBK,CAHxBL,CAGoCA,KAHpCA,CAOAA,CADA/G,CACA+G,CAFA/G,CAEA+G,EAFQA,MAERA,CAFiBG,CAEjBH,CAF4BA,OAE5BA,CAFsCI,CAEtCJ,CAF+CA,UAE/CA,GADQjH,CAAU8E,CAAAA,MAClBmC,CAD2BM,CAC3BN,CADsCA,MACtCA,CAD+CM,CAC/CN,CAD0DA,IAC1DA,EAAA/G,CAAA+G,EAAQA,OAzBVA,CA8BAA;MAHA/G,EAGA+G,EAFEA,MAEFA,CAFWC,CAEXD,CAFuBA,KAEvBA,CAF+BG,CAE/BH,CAF0CA,IAE1CA,CAFiDI,CAEjDJ,CAF0DA,IAE1DA,CAFiEM,CAEjEN,GADQA,OACRA,CADkBf,CAClBe,CAD2BA,OAC3BA,CAzCgEA,CH/E5DnH,CG2HA6H,wDAAAA,QAA0BA,CAC9B5H,CAD8B4H,CAE9B3H,CAF8B2H,CAEPA,CAGvBA,MAAMT,EAAYlH,CAAUmH,CAAAA,eAAVQ,CAA0B5H,CAAMI,CAAAA,aAANwH,CAAoBA,KAApBA,CAA1BA,CAAlBA,CACMxC,EAAYnF,CAAUa,CAAAA,WAAV8G,CAAsB5H,CAAtB4H,CAA6BA,MAA7BA,CAAqCvH,oDAAMU,CAAAA,IAA3C6G,CAAZxC,EAAgEwC,IACtEA,KAAIzB,EAASlG,CAAU2E,CAAAA,eAAVgD,CAA0B5H,CAA1B4H,CAAiCA,IAAjCA,CACbzB,EAAAyB,CAAS3H,CAAU6G,CAAAA,WAAVc,CAAsBzB,CAAtByB,CAA8B5H,CAA9B4H,CACTzB,EAAAyB,CAAS1B,uDAAA0B,CAAiBzB,CAAjByB,CAAyB3H,CAAU8E,CAAAA,MAAnC6C,CASTA,OAPEA,SAOFA,CANET,CAMFS,CALEA,aAKFA,CAJExC,CAIFwC,CAHEA,SAGFA,CAFEzB,CAEFyB,CADEA,OAfqBA,CH7HnB7H,CGgJA8H;AAAAA,QAAkCA,CACtC7H,CADsC6H,CAEtC5H,CAFsC4H,CAEfA,CAGvBA,IAAIC,EAAOD,EACP5H,EAAUuE,CAAAA,gBAAdqD,GAEEC,CAFFD,EAEU5H,CAAUwE,CAAAA,QAAVoD,CAAmB5H,CAAUuE,CAAAA,gBAA7BqD,CAA+C7H,CAA/C6H,CAFVA,CAII5H,EAAU4E,CAAAA,gBAAdgD,GAGEC,CAHFD,EAGU5H,CAAUwE,CAAAA,QAAVoD,CAAmB5H,CAAU4E,CAAAA,gBAA7BgD,CAA+C7H,CAA/C6H,CAHVA,CAKAA,IAAI5H,CAAUuE,CAAAA,gBAAdqD,CAAgCA,CAC9BA,MAAME,EAAQ/H,CAAiCgI,CAAAA,eAAjCH,EACVE,EAAJF,EAAYA,CAACE,CAAKE,CAAAA,oBAAlBJ,GAIEC,CAJFD,EAIU5H,CAAUwE,CAAAA,QAAVoD,CAAmB5H,CAAUuE,CAAAA,gBAA7BqD,CAA+CE,CAA/CF,CAJVA,CAF8BA,CAShCA,OAAQ7H,CAAMI,CAAAA,aAANyH,CAAoBA,MAApBA,CAARA,EACEA,KAAKA,OAALA,CACEA,MAAOC,EAAPD,CAAcA,SAChBA,MAAKA,UAALA,CACEA,MAAOC,EAAPD,CAAcvB,yDAJlBuB,CAMAA,KAAMzD,MAAAyD,CAAMA,yBAANA,CAANA,CA5BuBA,CHlJnB9H,CIAAmI,kDAAAA,QAAqBA,CACzBlI,CADyBkI;AAEzBjI,CAFyBiI,CAEFA,CAGjB/H,CAAAA,CAAOwG,MAAAuB,CAAOlI,CAAMI,CAAAA,aAAN8H,CAAoBA,KAApBA,CAAPA,CAEbA,OAAOA,CAACxB,MAAAwB,CAAO/H,CAAP+H,CAADA,CADcA,CAAP3C,CAAApF,CAAAoF,CAAWlF,oDAAM4B,CAAAA,KAAjBsD,CAAyBlF,oDAAMC,CAAAA,MACtC4H,CALgBA,CJFnBnI,CIUAoI,sDAAAA,QAAyBA,CAC7BnI,CAD6BmI,CAE7BlI,CAF6BkI,CAENA,CAWvBA,IAAMC,EAR6CjD,CACjDgD,IAAOA,CAACA,KAADA,CAAQ9H,oDAAMwC,CAAAA,QAAdsF,CAD0ChD,CAEjDgD,MAASA,CAACA,KAADA,CAAQ9H,oDAAMwC,CAAAA,QAAdsF,CAFwChD,CAGjDgD,SAAYA,CAACA,KAADA,CAAQ9H,oDAAMgI,CAAAA,cAAdF,CAHqChD,CAIjDgD,OAAUA,CAACA,KAADA;AAAQ9H,oDAAMgI,CAAAA,cAAdF,CAJuChD,CAKjDgD,MAASA,CAACA,KAADA,CAAQ9H,oDAAMiI,CAAAA,cAAdH,CALwChD,CAQrCgD,CAAUnI,CAAMI,CAAAA,aAAN+H,CAAoBA,IAApBA,CAAVA,CACdA,OAAMjD,EAAWkD,CAAAD,CAAMA,CAANA,CACX5C,EAAAA,CAAQ6C,CAAAD,CAAMA,CAANA,CACdA,OAAM/C,EAAYnF,CAAUa,CAAAA,WAAVqH,CAAsBnI,CAAtBmI,CAA6BA,GAA7BA,CAAkC5C,CAAlC4C,CAAZ/C,EAAwD+C,GACxD9C,EAAAA,CAAYpF,CAAUa,CAAAA,WAAVqH,CAAsBnI,CAAtBmI,CAA6BA,GAA7BA,CAAkC5C,CAAlC4C,CAAZ9C,EAAwD8C,GAE9DA,OAAOA,CADM/C,CACN+C,CADkBjD,CAClBiD,CAD6B9C,CAC7B8C,CAAO5C,CAAP4C,CAjBgBA,CJZnBpI,CIgCAwI,kDAAAA,QAAqBA,CACzBvI,CADyBuI,CAEzBtI,CAFyBsI,CAEFA,CAGvBA,IAAMrD,EAAWlF,CAAMI,CAAAA,aAANmI,CAAoBA,IAApBA,CAEjBA,IAAiBA,KAAjBA,GAAIrD,CAAJqD,CAGEA,MADAC,EACOD,CADDtI,CAAUa,CAAAA,WAAVyH,CAAsBvI,CAAtBuI,CAA6BA,KAA7BA,CAAoClI,oDAAM4B,CAAAA,KAA1CsG,CACCA,EADmDA,GACnDA,CAAAA,CAACA,GAADA,CAAOC,CAAPD,CAAYlI,oDAAM4B,CAAAA,KAAlBsG,CAETA;GAAiBA,OAAjBA,GAAIrD,CAAJqD,CAEEA,MADAC,EACOD,CADDtI,CAAUa,CAAAA,WAAVyH,CAAsBvI,CAAtBuI,CAA6BA,KAA7BA,CAAoClI,oDAAMiI,CAAAA,cAA1CC,CACCA,EAD4DA,GAC5DA,CAAAA,CAACA,OAADA,CAAWC,CAAXD,CAAgBlI,oDAAMiI,CAAAA,cAAtBC,CAGPC,EAAAD,CADeA,OAAjBA,GAAIrD,CAAJqD,CACQtI,CAAUa,CAAAA,WAAVyH,CAAsBvI,CAAtBuI,CAA6BA,KAA7BA,CAAoClI,oDAAMwC,CAAAA,QAA1C0F,CADRA,EAC+DA,GAD/DA,CAGQtI,CAAUa,CAAAA,WAAVyH,CAAsBvI,CAAtBuI,CAA6BA,KAA7BA,CAAoClI,oDAAMU,CAAAA,IAA1CwH,CAHRA,EAG2DA,GAI3DA,QAAQrD,CAARqD,EACEA,KAAKA,KAALA,CACEpI,CAAAoI,CAAOA,WAAPA,CAAqBC,CAArBD,CAA2BA,GAC3BA,MACFA,MAAKA,MAALA,CACEpI,CAAAoI,CAAOA,YAAPA,CAAsBC,CAAtBD,CAA4BA,GAC5BA,MACFA,MAAKA,IAALA,CACEpI,CAAAoI,CAAOA,WAAPA,CAAqBC,CAArBD;AAA2BA,GAC3BA,MACFA,MAAKA,OAALA,CACEpI,CAAAoI,CAAOA,WAAPA,CAAqBC,CAArBD,CAA2BA,OAC3BA,MACFA,MAAKA,KAALA,CACEpI,CAAAoI,CAAOA,WAAPA,CAAqBC,CAArBD,CAA2BA,GAC3BA,MACFA,MAAKA,OAALA,CAEEpI,CAAAoI,CAAOA,aAAPA,CAAuBC,CAAvBD,CAA6BA,QAC7BA,MACFA,MAAKA,SAALA,CACEpI,CAAAoI,CAAOA,YAAPA,CAAsBC,CAAtBD,CAA4BA,GAC5BA,MACFA,MAAKA,WAALA,CACEpI,CAAAoI,CAAOA,aAAPA,CAAuBC,CAAvBD,CAA6BA,GAC7BA,MACFA,MAAKA,KAALA,CACEpI,CAAAoI,CAAOA,oBAAPA,CAA8BC,CAA9BD,CAAoCA,IACpCA,MACFA,MAAKA,KAALA,CACEpI,CAAAoI,CAAOA,oBAAPA,CAA8BC,CAA9BD,CAAoCA,IACpCA,MACFA,MAAKA,KAALA,CACEpI,CAAAoI,CAAOA,oBAAPA,CAA8BC,CAA9BD,CAAoCA,IACpCA,MACFA,MAAKA,MAALA,CACEpI,CAAAoI,CAAOA,qBAAPA,CAA+BC,CAA/BD,CAAqCA,IACrCA,MACFA,MAAKA,MAALA,CACEpI,CAAAoI,CAAOA,qBAAPA,CAA+BC,CAA/BD,CAAqCA,IACrCA,MACFA,MAAKA,MAALA,CACEpI,CAAAoI,CAAOA,qBAAPA,CAA+BC,CAA/BD,CAAqCA,IACrCA;KACFA,SACEA,KAAMnE,MAAAmE,CAAMA,yBAANA,CAAkCrD,CAAlCqD,CAANA,CA7CJA,CA+CAA,MAAOA,CAACpI,CAADoI,CAAOlI,oDAAMG,CAAAA,IAAb+H,CApEgBA,CJlCnBxI,CIyGA0I,oDAAAA,QAAuBA,CAC3BzI,CAD2ByI,CAE3BxI,CAF2BwI,CAEJA,CAWvBA,MARmDC,CACjDD,GAAMA,CAACA,SAADA,CAAYpI,oDAAMG,CAAAA,IAAlBiI,CAD2CC,CAEjDD,EAAKA,CAACA,aAADA,CAAgBpI,oDAAMG,CAAAA,IAAtBiI,CAF4CC,CAGjDD,aAAgBA,CAACA,wBAADA,CAA2BpI,oDAAMgI,CAAAA,cAAjCI,CAHiCC,CAIjDD,MAASA,CAACA,cAADA,CAAiBpI,oDAAMG,CAAAA,IAAvBiI,CAJwCC;AAKjDD,QAAWA,CAACA,kBAADA,CAAqBpI,oDAAMG,CAAAA,IAA3BiI,CALsCC,CAMjDD,SAAYA,CAACA,WAADA,CAAcpI,oDAAMG,CAAAA,IAApBiI,CANqCC,CAQ5CD,CAAUzI,CAAMI,CAAAA,aAANqI,CAAoBA,UAApBA,CAAVA,CAXgBA,CJ3GnB1I,CIyHA4I,2DAAAA,QAA8BA,CAClC3I,CADkC2I,CAElC1I,CAFkC0I,CAEXA,CAIvBA,IAAMC,EAA4DD,CAChEA,KAAQA,CAACA,WAADA,CAActI,oDAAMgI,CAAAA,cAApBM,CAAoCtI,oDAAM8B,CAAAA,UAA1CwG,CADwDA,CAEhEA,IAAOA,CAACA,WAADA,CAActI,oDAAMgI,CAAAA,cAApBM;AAAoCtI,oDAAM8B,CAAAA,UAA1CwG,CAFyDA,CAGhEA,MAASA,CAACA,WAADA,CAActI,oDAAMgI,CAAAA,cAApBM,CAAoCtI,oDAAM8B,CAAAA,UAA1CwG,CAHuDA,CAIhEA,SAAYA,CAACA,MAADA,CAAStI,oDAAM8B,CAAAA,UAAfwG,CAA2BtI,oDAAM8B,CAAAA,UAAjCwG,CAJoDA,CAKhEA,SAAYA,CAACA,MAADA,CAAStI,oDAAM8B,CAAAA,UAAfwG,CAA2BtI,oDAAM8B,CAAAA,UAAjCwG,CALoDA;AAMhEA,aAAgBA,CAACA,IAADA,CAAOtI,oDAAMgI,CAAAA,cAAbM,CAA6BtI,oDAAM8B,CAAAA,UAAnCwG,CANgDA,CAOhEA,MAASA,CAACA,IAADA,CAAOtI,oDAAMU,CAAAA,IAAb4H,CAAmBtI,oDAAMG,CAAAA,IAAzBmI,CAPuDA,CASlEA,OAAME,EAAmB7I,CAAMI,CAAAA,aAANuI,CAAoBA,UAApBA,CAAzBA,CACMA,CAACG,CAADH,CAASI,CAATJ,CAAqBK,CAArBL,CAAAA,CAAoCC,CAAAD,CAAWE,CAAXF,CACpCM,EAAAA,CACJhJ,CAAUa,CAAAA,WAAV6H,CAAsB3I,CAAtB2I,CAA6BA,iBAA7BA,CAAgDI,CAAhDJ,CADIM,EAC2DN,GAEjEA,IAAyBA,OAAzBA,GAAIE,CAAJF,CAyBExI,CAAAwI,CAvBqB1I,CAAUU,CAAAA,gBAAVD,CACnBiI,cADmBjI,CAEnBiI;WACK1I,CAAUW,CAAAA,0BADf+H;;;;;;;;;;;;;;;;;;CAFmBjI,CAuBrBiI,CAAsBA,GAAtBA,CAA4BM,CAA5BN,CAA4CA,GAzB9CA,KA0BOA,IAAyBA,cAAzBA,GAAIE,CAAJF,CAAyCA,CACxCO,CAAAA,CACJjJ,CAAUa,CAAAA,WAAV6H,CAAsB3I,CAAtB2I,CAA6BA,SAA7BA,CAAwCtI,oDAAMgI,CAAAA,cAA9CM,CADIO,EAC6DP,GAGnEA,IAAgBA,GAAhBA,GAAIO,CAAJP,CACEA,MAAOA,CAACA,KAADA,CAAQtI,oDAAMC,CAAAA,MAAdqI,CAKTxI,EAAAwI,CAAOM,CAAPN,CAAuBA,KAAvBA,CAA+BO,CAA/BP,CAAyCA,OAXKA,CAAzCA,IAaLxI,EAAAwI,CAAOM,CAAPN,CAAuBG,CAEzBH,OAAOA,CAACxI,CAADwI,CAAOK,CAAPL,CA3DgBA,CJ3HnB5I,CIyLAoJ,kDAAAA,QAAqBA,CAACnJ,CAADmJ,CAAelJ,CAAfkJ,CAAsCA,CAE/DA,MAAM/D,EACJnF,CAAUa,CAAAA,WAAVqI,CAAsBnJ,CAAtBmJ,CAA6BA,OAA7BA,CAAsC9I,oDAAMwC,CAAAA,QAA5CsG,CADI/D,EACqD+D,GACrDC,EAAAA,CAAUnJ,CAAUmH,CAAAA,eAAV+B,CAA0BnJ,CAAMI,CAAAA,aAAN+I,CAAoBA,KAApBA,CAA1BA,CAChBA,OAAOC,EAAPD,CAAiBA,KAAjBA,CAAyBC,CAAzBD,CAAmCA,KAAnCA;AAA2C/D,CAA3C+D,CAAuDA,IALQA,CJzL3DpJ,CIsMAsJ,mDAAAA,QAAsBA,CAC1BrJ,CAD0BqJ,CAE1BpJ,CAF0BoJ,CAEHA,CAQvBC,QAASA,EAAUD,EAAAA,CACjBA,MAAOpJ,EAAUU,CAAAA,gBAAV0I,CACLA,UADKA,CAELA;WACKpJ,CAAUW,CAAAA,0BADfyI;;;;;;;CAFKA,CADUA,CALnBA,IAAME,EAAOvJ,CAAMI,CAAAA,aAANiJ,CAAoBA,IAApBA,CACP/G,EAAAA,CAAOrC,CAAUa,CAAAA,WAAVuI,CAAsBrJ,CAAtBqJ,CAA6BA,MAA7BA,CAAqChJ,oDAAMU,CAAAA,IAA3CsI,CAAP/G,EAA2D+G,IAmBjEA,QAAQE,CAARF,EACEA,KAAKA,KAALA,CACE3I,CAAA2I,CAAeC,CAAAD,EACfA,MAEFA,MAAKA,KAALA,CAEE3I,CAAA2I,CAAepJ,CAAUU,CAAAA,gBAAV0I,CACbA,UADaA,CAEbA;WACGpJ,CAAUW,CAAAA,0BADbyI;;;;;;;;;;;;CAFaA,CAiBfA,MAEFA,MAAKA,SAALA,CAEE3I,CAAA2I,CAAepJ,CAAUU,CAAAA,gBAAV0I,CACbA,cADaA,CAEbA;WACGpJ,CAAUW,CAAAA,0BADbyI;;;;WAKGC,CAAAD,EALHA;;CAFaA,CAWfA,MAEFA,MAAKA,KAALA,CAEE3I,CAAA2I,CAAepJ,CAAUU,CAAAA,gBAAV0I,CACbA,UADaA,CAEbA;WACGpJ,CAAUW,CAAAA,0BADbyI;;;;;;;;;;;;CAFaA,CAiBfA,MAEFA,MAAKA,QAALA,CAEE3I,CAAA2I,CAAepJ,CAAUU,CAAAA,gBAAV0I,CACbA,aADaA,CAEbA;WACGpJ,CAAUW,CAAAA,0BADbyI;;;;;;;;;;;;;;;;;;CAFaA,CAuBfA,MAEFA,MAAKA,MAALA,CAIE3I,CAAA2I,CAAepJ,CAAUU,CAAAA,gBAAV0I,CACbA,YADaA,CAEbA;WACGpJ,CAAUW,CAAAA,0BADbyI;;;;;;;;;;;;;;;;;;;;;;;;CAFaA,CA6BfA,MAEFA,MAAKA,SAALA,CACE3I,CAAA2I,CAAepJ,CAAUU,CAAAA,gBAAV0I,CACbA,yBADaA,CAEbA;WACGpJ,CAAUW,CAAAA,0BADbyI;;;;;;yBAOiBC,CAAAD,EAPjBA;;;;;;;;;;;CAFaA,CAsBfA,MAEFA,MAAKA,QAALA,CACE3I,CAAA2I,CAAepJ,CAAUU,CAAAA,gBAAV0I,CACbA,kBADaA,CAEbA;WACGpJ,CAAUW,CAAAA,0BADbyI;;;;;;CAFaA,CAWfA,MAEFA,SACEA,KAAMjF,MAAAiF,CAAMA,oBAANA,CAA6BE,CAA7BF,CAANA,CApKJA,CAsKAA,MAAOA,CAAC3I,CAAD2I,CAAgBA,GAAhBA,CAAsB/G,CAAtB+G,CAA6BA,GAA7BA,CAAkChJ,oDAAMG,CAAAA,IAAxC6I,CA7LgBA,CJxMnBtJ,CIwYAyJ,kDAAAA,QAAqBA,CACzBxJ,CADyBwJ,CAEzBvJ,CAFyBuJ,CAEFA,CAGvBA,MAAMpE,EACJnF,CAAUa,CAAAA,WAAV0I,CAAsBxJ,CAAtBwJ,CAA6BA,UAA7BA,CAAyCnJ,oDAAMgI,CAAAA,cAA/CmB,CADIpE,EAC8DoE,GAC9DnE,EAAAA,CACJpF,CAAUa,CAAAA,WAAV0I,CAAsBxJ,CAAtBwJ,CAA6BA,SAA7BA,CAAwCnJ,oDAAMgI,CAAAA,cAA9CmB,CADInE,EAC6DmE,GAEnEA,OAAOA,CADMpE,CACNoE,CADkBA,KAClBA,CAD0BnE,CAC1BmE,CAAOnJ,oDAAMgI,CAAAA,cAAbmB,CARgBA,CJ1YnBzJ,CIqZA0J;AAAAA,QAAwBA,CAC5BzJ,CAD4ByJ,CAE5BxJ,CAF4BwJ,CAELA,CAGvBA,MAAMrE,EAAYnF,CAAUa,CAAAA,WAAV2I,CAAsBzJ,CAAtByJ,CAA6BA,OAA7BA,CAAsCpJ,oDAAMU,CAAAA,IAA5C0I,CAAZrE,EAAiEqE,GAAvEA,CACMpE,EACJpF,CAAUa,CAAAA,WAAV2I,CAAsBzJ,CAAtByJ,CAA6BA,KAA7BA,CAAoCpJ,oDAAMU,CAAAA,IAA1C0I,CADIpE,EAC+CoE,YAC/CC,EAAAA,CACJzJ,CAAUa,CAAAA,WAAV2I,CAAsBzJ,CAAtByJ,CAA6BA,MAA7BA,CAAqCpJ,oDAAMU,CAAAA,IAA3C0I,CADIC,EACgDD,WAStDA,OAAOA,CAPLA,oBAOKA,CANLrE,CAMKqE,CALLA,IAKKA,CAJLpE,CAIKoE,CAHLA,KAGKA,CAFLC,CAEKD,CADLA,GACKA,CAAOpJ,oDAAMG,CAAAA,IAAbiJ,CAhBgBA,CJvZnB1J,CI0aA4J,sDAAAA,QAAyBA,CAC7B3J,CAD6B2J,CAE7B1J,CAF6B0J,CAENA,CAGvBA,MAAMvE,EAAYnF,CAAUa,CAAAA,WAAV6I,CAAsB3J,CAAtB2J;AAA6BA,MAA7BA,CAAqCtJ,oDAAMU,CAAAA,IAA3C4I,CAAZvE,EAAgEuE,GAChEtE,EAAAA,CAAYpF,CAAUa,CAAAA,WAAV6I,CAAsB3J,CAAtB2J,CAA6BA,IAA7BA,CAAmCtJ,oDAAMU,CAAAA,IAAzC4I,CAAZtE,EAA8DsE,GAEpEA,OAAOA,CADMA,cACNA,CADuBvE,CACvBuE,CADmCA,IACnCA,CAD0CtE,CAC1CsE,CADsDA,GACtDA,CAAOtJ,oDAAMG,CAAAA,IAAbmJ,CANgBA,CJ5anB5J,CIqbA6J,wDAAAA,QAA2BA,CAC/B5J,CAD+B4J,CAE/B3J,CAF+B2J,CAERA,CAGvBA,MAAOA,CAACA,eAADA,CAAkBvJ,oDAAMG,CAAAA,IAAxBoJ,CAHgBA,CJvbnB7J,CI6bA8J,iDAAAA,QAAoBA,CACxB7J,CADwB6J,CAExB5J,CAFwB4J,CAEDA,CAGvBA,MAAMzE,EAAYnF,CAAUa,CAAAA,WAAV+I,CAAsB7J,CAAtB6J,CAA6BA,GAA7BA,CAAkCxJ,oDAAMU,CAAAA,IAAxC8I,CAAZzE;AAA6DyE,GAEnEA,OAAOA,CACLA,sBADKA,EADW5J,CAAUa,CAAAA,WAAV+I,CAAsB7J,CAAtB6J,CAA6BA,GAA7BA,CAAkCxJ,oDAAMU,CAAAA,IAAxC8I,CACXA,EAD4DA,GAC5DA,EACgCA,IADhCA,CACuCzE,CADvCyE,CACmDA,IADnDA,CAELxJ,oDAAMG,CAAAA,IAFDqJ,CALgBA,CJ/bnB9J,CKCA+J,iEAAAA,QAA8BA,CAClC9J,CADkC8J,CAElC7J,CAFkC6J,CAEXA,CAGvBA,MAAMC,EAAW9J,CAAU+J,CAAAA,gBAAVF,CAA2B9J,CAAMI,CAAAA,aAAN0J,CAAoBA,MAApBA,CAA3BA,CACjBA,KAAIG,EAAQH,EACR7J,EAAUuE,CAAAA,gBAAdsF,GACEG,CADFH,EACW7J,CAAUwE,CAAAA,QAAVqF,CAAmB7J,CAAUuE,CAAAA,gBAA7BsF,CAA+C9J,CAA/C8J,CADXA,CAGI7J,EAAU4E,CAAAA,gBAAdiF,GACEG,CADFH,EACW7J,CAAUwE,CAAAA,QAAVqF,CAAmB7J,CAAU4E,CAAAA,gBAA7BiF,CAA+C9J,CAA/C8J,CADXA,CAGIG,EAAJH,GACEG,CADFH,CACU7J,CAAU6E,CAAAA,WAAVgF,CAAsBG,CAAtBH,CAA6B7J,CAAU8E,CAAAA,MAAvC+E,CADVA,CAGAA,KAAII,EAAWJ,EACX7J,EAAUkK,CAAAA,kBAAdL;CACEI,CADFJ,CACa7J,CAAU6E,CAAAA,WAAVgF,CACT7J,CAAUwE,CAAAA,QAAVqF,CAAmB7J,CAAUkK,CAAAA,kBAA7BL,CAAiD9J,CAAjD8J,CADSA,CAET7J,CAAU8E,CAAAA,MAFD+E,CADbA,CAMAA,KAAI3D,EAASlG,CAAU2E,CAAAA,eAAVkF,CAA0B9J,CAA1B8J,CAAiCA,OAAjCA,CAAbA,CACIM,EAAcnK,CAAUa,CAAAA,WAAVgJ,CAAsB9J,CAAtB8J,CAA6BA,QAA7BA,CAAuCzJ,oDAAMU,CAAAA,IAA7C+I,CAAdM,EAAoEN,EADxEA,CAEIO,EAAQP,EACR3D,EAAJ2D,EAAcM,CAAdN,GAEEO,CAFFP,CAEUG,CAFVH,CAIIM,EAAJN,CACEM,CADFN,CACgB7J,CAAU8E,CAAAA,MAD1B+E,CACmCA,SADnCA,CAC+CM,CAD/CN,CAC6DA,IAD7DA,CAEY3D,CAFZ2D,GAGE3D,CAHF2D,CAGWA,EAHXA,CAKAA,OAAMQ,EAAOR,EAAbA,CACMS,EAAYvK,CAAMwK,CAAAA,OAANV,EAClBA,KAAKA,IAAInI,EAAImI,CAAbA,CAAgBnI,CAAhBmI,CAAoBS,CAAUE,CAAAA,MAA9BX,CAAsCnI,CAAAmI,EAAtCA,CACEQ,CAAAR,CAAKnI,CAALmI,CAAAA,CAAU7J,CAAUmH,CAAAA,eAAV0C,CAA0BS,CAAAT,CAAUnI,CAAVmI,CAA1BA,CAER3J,EAAAA,CACF2J,WADE3J,CAEF4J,CAFE5J,CAGF2J,GAHE3J,CAIFmK,CAAK1I,CAAAA,IAALkI,CAAUA,IAAVA,CAJE3J,CAKF2J,KALE3J,CAMF8J,CANE9J,CAOF+J,CAPE/J,CAQFgG,CAREhG,CASFkK,CATElK,CAUFiK,CAVEjK,CAWF2J,OACF3J,EAAA2J,CAAO7J,CAAUyK,CAAAA,MAAVZ,CAAiB9J,CAAjB8J,CAAwB3J,CAAxB2J,CAIN7J,EAAiC0K,CAAAA,YAAjCb,CAA8CA,GAA9CA,CAAoDC,CAApDD,CAAAA,CAAgE3J,CACjE2J,OAAOA,KAvDgBA,CLHnB/J,CKiEA6K;AAAAA,QAA+BA,CACnC5K,CADmC4K,CAEnC3K,CAFmC2K,CAEZA,CAGvBA,MAAMb,EAAW9J,CAAU+J,CAAAA,gBAAVY,CAA2B5K,CAAMI,CAAAA,aAANwK,CAAoBA,MAApBA,CAA3BA,CAAjBA,CACMN,EAAOM,EADbA,CAEML,EAAYvK,CAAMwK,CAAAA,OAANI,EAClBA,KAAKA,IAAIjJ,EAAIiJ,CAAbA,CAAgBjJ,CAAhBiJ,CAAoBL,CAAUE,CAAAA,MAA9BG,CAAsCjJ,CAAAiJ,EAAtCA,CACEN,CAAAM,CAAKjJ,CAALiJ,CAAAA,CAAU3K,CAAUa,CAAAA,WAAV8J,CAAsB5K,CAAtB4K,CAA6BA,KAA7BA,CAAqCjJ,CAArCiJ,CAAwCvK,oDAAMU,CAAAA,IAA9C6J,CAAVA,EAAiEA,KAGnEA,OAAOA,CADMb,CACNa,CADiBA,GACjBA,CADuBN,CAAK1I,CAAAA,IAALgJ,CAAUA,IAAVA,CACvBA,CADyCA,GACzCA,CAAOvK,oDAAMG,CAAAA,IAAboK,CAVgBA,CLnEnB7K,CKgFA8K,oEAAAA,QAAiCA,CACrC7K,CADqC6K,CAErC5K,CAFqC4K,CAEdA,CASvBA,MAJc5K,EAAU6K,CAAAA,QAAVD,CAAAA,qBAAAzC,CACZpI,CADYoI,CAEZnI,CAFYmI,CAIPyC,CAAMA,CAANA,CAAPA,CAAkBA,IATKA,CLlFnB9K,CK8FAgL,gEAAAA,QAA6BA,CACjC/K,CADiC+K;AAEjC9K,CAFiC8K,CAEVA,CAKvBA,IAAI5K,EAAO4K,KAAP5K,EADFF,CAAUa,CAAAA,WAAViK,CAAsB/K,CAAtB+K,CAA6BA,WAA7BA,CAA0C1K,oDAAMU,CAAAA,IAAhDgK,CACE5K,EADuD4K,OACvD5K,EAA2B4K,SAC3B9K,EAAU4E,CAAAA,gBAAdkG,GAGE5K,CAHF4K,EAGU9K,CAAU6E,CAAAA,WAAViG,CACN9K,CAAUwE,CAAAA,QAAVsG,CAAmB9K,CAAU4E,CAAAA,gBAA7BkG,CAA+C/K,CAA/C+K,CADMA,CAEN9K,CAAU8E,CAAAA,MAFJgG,CAHVA,CAQK/K,EAAwBgL,CAAAA,eAA7BD,EACQzH,CACNyH,CADc9K,CAAUa,CAAAA,WAAViK,CAAsB/K,CAAtB+K,CAA6BA,OAA7BA,CAAsC1K,oDAAMU,CAAAA,IAA5CgK,CACdA,EADmEA,KACnEA,CAAA5K,CAAA4K,EAAQ9K,CAAU8E,CAAAA,MAAlBgG,CAA2BA,SAA3BA,CAAuCzH,CAAvCyH,CAA+CA,IAFjDA,EAIE5K,CAJF4K,EAIU9K,CAAU8E,CAAAA,MAJpBgG,CAI6BA,UAG7BA,OADA5K,EACA4K,CADQA,OApBeA,CLhGnBhL,CMCAkL,2CAAAA,QAAcA,CAACjL,CAADiL,CAAehL,CAAfgL,CAAsCA,CAGxDA,MAAOA,CADMhL,CAAUC,CAAAA,MAAVC,CAAiBH,CAAMI,CAAAA,aAAN6K,CAAoBA,MAApBA,CAAjB9K,CACN8K,CAAO5K,oDAAMC,CAAAA,MAAb2K,CAHiDA,CNDpDlL;AMOAmL,qDAAAA,QAAwBA,CAC5BlL,CAD4BkL,CAE5BjL,CAF4BiL,CAELA,CAGjB/K,CAAAA,CAAOF,CAAUkL,CAAAA,gBAAVD,CAA2BlL,CAAMI,CAAAA,aAAN8K,CAAoBA,MAApBA,CAA3BA,CACP3F,EAAAA,CAA+B2F,CAACA,CAAxBA,GAAA/K,CAAKkG,CAAAA,OAAL6E,CAAaA,IAAbA,CAAAA,CAA4B7K,oDAAM+K,CAAAA,aAAlCF,CAAkD7K,oDAAMC,CAAAA,MACtE4K,OAAOA,CAAC/K,CAAD+K,CAAO3F,CAAP2F,CALgBA,CNTnBnL,CMiBAsL,gDAAAA,QAAmBA,CACvBrL,CADuBqL,CAEvBpL,CAFuBoL,CAEAA,CAIvBA,GAA6BA,CAA7BA,GAFkBrL,CAEJ0B,CAAAA,UAAd2J,CACEA,MAAOA,CAACA,IAADA,CAAOhL,oDAAMC,CAAAA,MAAb+K,CACFA,IAA6BA,CAA7BA,GAJWrL,CAIG0B,CAAAA,UAAd2J,CAGLA,MAAOA,CADMA,WACNA,EAFSpL,CAAUa,CAAAA,WAAVuK,CAAsBrL,CAAtBqL,CAA6BA,MAA7BA,CAAqChL,oDAAMU,CAAAA,IAA3CsK,CAETA;AAF6DA,IAE7DA,EAD8BA,GAC9BA,CAAOhL,oDAAMG,CAAAA,IAAb6K,CACFA,IAA6BA,CAA7BA,GARWrL,CAQG0B,CAAAA,UAAd2J,CAAgCA,CACrCA,IAAMC,EACJrL,CAAUa,CAAAA,WAAVuK,CAAsBrL,CAAtBqL,CAA6BA,MAA7BA,CAAqChL,oDAAM+K,CAAAA,aAA3CC,CADIC,EACyDD,IACzDE,EAAAA,CACJtL,CAAUa,CAAAA,WAAVuK,CAAsBrL,CAAtBqL,CAA6BA,MAA7BA,CAAqChL,oDAAM+K,CAAAA,aAA3CC,CADIE,EACyDF,IAE/DA,OAAOA,CADMC,CACND,CADiBA,MACjBA,CAD0BE,CAC1BF,CAAOhL,oDAAM+K,CAAAA,aAAbC,CAN8BA,CAQ/B7J,CAAAA,CAAW6J,EACjBA,KAAKA,IAAI1J,EAAI0J,CAAbA,CAAgB1J,CAAhB0J,CAjBgBrL,CAiBc0B,CAAAA,UAA9B2J,CAA0C1J,CAAA0J,EAA1CA,CACE7J,CAAA6J,CAAS1J,CAAT0J,CAAAA,CAAcpL,CAAUa,CAAAA,WAAVuK,CAAsBrL,CAAtBqL,CAA6BA,KAA7BA,CAAqC1J,CAArC0J,CAAwChL,oDAAMU,CAAAA,IAA9CsK,CAAdA;AAAqEA,IAGvEA,OAAOA,CADMA,gBACNA,CADyB7J,CAASI,CAAAA,IAATyJ,CAAcA,IAAdA,CACzBA,CAD+CA,IAC/CA,CAAOhL,oDAAMG,CAAAA,IAAb6K,CAvBcA,CNnBnBtL,CM8CAyL,kDAAAA,QAAqBA,CAACxL,CAADwL,CAAevL,CAAfuL,CAAsCA,CAE/DA,MAAMpC,EAAUnJ,CAAUmH,CAAAA,eAAVoE,CAA0BxL,CAAMI,CAAAA,aAANoL,CAAoBA,KAApBA,CAA1BA,CACVlI,EAAAA,CACJrD,CAAUa,CAAAA,WAAV0K,CAAsBxL,CAAtBwL,CAA6BA,MAA7BA,CAAqCnL,oDAAM+K,CAAAA,aAA3CI,CADIlI,EACyDkI,IAC/DA,OAAOpC,EAAPoC,CAAiBA,KAAjBA,CAAyBpC,CAAzBoC,CAAmCA,MAAnCA,CAA4ClI,CAA5CkI,CAAoDA,IALWA,CN9C3DzL,CMsDA0L,kDAAAA,QAAqBA,CACzBzL,CADyByL,CAEzBxL,CAFyBwL,CAEFA,CAIvBA,MAAOA,CAACA,GAADA,EADMxL,CAAUa,CAAAA,WAAV2K,CAAsBzL,CAAtByL,CAA6BA,OAA7BA,CAAsCpL,oDAAM4B,CAAAA,KAA5CwJ,CACNA;AAD4DA,IAC5DA,EAAapL,oDAAM4B,CAAAA,KAAnBwJ,CAJgBA,CNxDnB1L,CM+DA2L,mDAAAA,QAAsBA,CAC1B1L,CAD0B0L,CAE1BzL,CAF0ByL,CAEHA,CAIvBA,MAAOA,CAACA,GAADA,EADMzL,CAAUa,CAAAA,WAAV4K,CAAsB1L,CAAtB0L,CAA6BA,OAA7BA,CAAsCrL,oDAAM4B,CAAAA,KAA5CyJ,CACNA,EAD4DA,IAC5DA,EAAcA,OAAdA,CAAuBrL,oDAAM8B,CAAAA,UAA7BuJ,CAJgBA,CNjEnB3L,CMwEA4L,mDAAAA,QAAsBA,CAC1B3L,CAD0B2L,CAE1B1L,CAF0B0L,CAEHA,CAGvBA,MAAMC,EAAY3L,CAAUa,CAAAA,WAAV6K,CAAsB3L,CAAtB2L,CAA6BA,MAA7BA,CAAqCtL,oDAAMU,CAAAA,IAA3C4K,CAAZC,EAAgED,IAAtEA,CACMV,EAAOhL,CAAUa,CAAAA,WAAV6K,CAAsB3L,CAAtB2L,CAA6BA,OAA7BA,CAAsCtL,oDAAMU,CAAAA,IAA5C4K,CAAPV;AAA4DU,IA8BlEA,OAAOA,EA5B4BA,OAAnCjL,GAAIV,CAAMI,CAAAA,aAANuL,CAAoBA,KAApBA,CAAJjL,CACiBT,CAAUU,CAAAA,gBAAVgL,CACbA,cADaA,CAEbA;WACK1L,CAAUW,CAAAA,0BADf+K;;;;;;;CAFaA,CADjBjL,CAciBT,CAAUU,CAAAA,gBAAVgL,CACbA,aADaA,CAEbA;WACK1L,CAAUW,CAAAA,0BADf+K;;;;;;;CAFaA,CAcVA,EADqBA,GACrBA,CAD2BV,CAC3BU,CADkCA,IAClCA,CADyCC,CACzCD,CADqDA,GACrDA,CAAOtL,oDAAMG,CAAAA,IAAbmL,CAlCgBA,CN1EnB5L,CM+GA8L,kDAAAA,QAAqBA,CACzB7L,CADyB6L,CAEzB5L,CAFyB4L,CAEFA,CAIvBA,IAAMpJ,EAAQzC,CAAMI,CAAAA,aAANyL,CAAoBA,OAApBA,CAARpJ,EAAwCoJ,YAE9CA,OAAMlJ,EAAK1C,CAAUa,CAAAA,WAAV+K,CAAsB7L,CAAtB6L,CAA6BA,IAA7BA,CADeA,UAAVjJ,GAAAH,CAAAG,CAAuBvC,oDAAM4B,CAAAA,KAA7BW,CAAqCvC,oDAAMU,CAAAA,IAChD8K,CAALlJ,EAAoDkJ,GACpDZ,EAAAA,CAAOhL,CAAUa,CAAAA,WAAV+K,CAAsB7L,CAAtB6L,CAA6BA,OAA7BA,CAAsCxL,oDAAMU,CAAAA,IAA5C8K,CAAPZ,EAA4DY,IAElEA,IAAcA,QAAdA,GAAIpJ,CAAJoJ,CAUE1L,CAAA0L,CATqB5L,CAAUU,CAAAA,gBAAVD,CACnBmL,oBADmBnL;AAEnBmL;WACK5L,CAAUW,CAAAA,0BADfiL;;;;CAFmBnL,CASrBmL,CAAsBA,GAAtBA,CAA4BZ,CAA5BY,CAAmCA,GAVrCA,KAWOA,CAELA,GAAcA,OAAdA,GAAIpJ,CAAJoJ,CACEC,CAAAD,CAAQA,GADVA,KAEOA,IAAcA,MAAdA,GAAIpJ,CAAJoJ,CACLC,CAAAD,CAAQA,IADHA,KAGLA,IAAcA,YAAdA,GAAIpJ,CAAJoJ,CACEC,CAAAD,CAAQlJ,CADVkJ,KAEOA,IAAcA,UAAdA,GAAIpJ,CAAJoJ,CACLC,CAAAD,CAAQA,GAARA,CAAclJ,CADTkJ,KAGLA,MAAMzH,MAAAyH,CAAMA,iCAANA,CAANA,CAIF1L,CAAA0L,CADEC,CAAMpJ,CAAAA,KAANmJ,CAAYA,SAAZA,CAAJA,CACSA,aADTA,CACyBZ,CADzBY,CACgCA,IADhCA,CACuCC,CADvCD,CAC+CA,IAD/CA,CACsDC,CADtDD,CAC8DA,GAD9DA,CAIuB5L,CAAUU,CAAAA,gBAAVD,CACnBmL,cADmBnL,CAEnBmL;WACG5L,CAAUW,CAAAA,0BADbiL;;;CAFmBnL,CAJvBmL,CAYwBA,GAZxBA,CAY8BZ,CAZ9BY,CAYqCA,IAZrCA,CAY4CC,CAZ5CD,CAYoDA,GA3B/CA,CA8BPA,MAAOA,CAAC1L,CAAD0L,CAAOxL,oDAAMG,CAAAA,IAAbqL,CAlDgBA,CNjHnB9L,CMsKAgM,wDAAAA,QAA2BA,CAC/B/L,CAD+B+L,CAE/B9L,CAF+B8L,CAERA,CAGvBA,MAAMd,EAAOhL,CAAUa,CAAAA,WAAViL,CAAsB/L,CAAtB+L,CAA6BA,QAA7BA,CAAuC1L,oDAAMU,CAAAA,IAA7CgL,CAAPd,EAA6Dc,IAGnEA,KAAMvI,EAASxD,CAAMI,CAAAA,aAAN2L,CAAoBA,QAApBA,CAAfA,CAEMrI,EAAMzD,CAAUa,CAAAA,WAAViL,CAAsB/L,CAAtB+L,CAA6BA,KAA7BA,CADgBA,UAAXC,GAAAxI,CAAAwI,CAAwB3L,oDAAM4B,CAAAA,KAA9B+J,CAAsC3L,oDAAMU,CAAAA,IACjDgL,CAANrI,EAAuDqI,GAE7DA,IAAeA,OAAfA,GAAIvI,CAAJuI,CACED,CAAAC,CAAQA,CADVA,KAEOA,IAAeA,YAAfA,GAAIvI,CAAJuI,CACLD,CAAAC,CAAQrI,CADHqI,KAEAA,IAAeA,UAAfA;AAAIvI,CAAJuI,CACLD,CAAAC,CAAQA,GAARA,CAAcrI,CADTqI,KAGLA,MAAM3H,MAAA2H,CAAMA,sCAANA,CAANA,CAIItI,CAAAA,CAASzD,CAAMI,CAAAA,aAAN2L,CAAoBA,QAApBA,CAETpI,EAAAA,CAAM1D,CAAUa,CAAAA,WAAViL,CAAsB/L,CAAtB+L,CAA6BA,KAA7BA,CADgBA,UAAXE,GAAAxI,CAAAwI,CAAwB5L,oDAAM4B,CAAAA,KAA9BgK,CAAsC5L,oDAAMU,CAAAA,IACjDgL,CAANpI,EAAuDoI,GAE7DA,IAAeA,MAAfA,GAAItI,CAAJsI,CACEG,CAAAH,CAAMA,CAACA,CADTA,KAEOA,IAAeA,YAAfA,GAAItI,CAAJsI,CAEAA,GAAeA,UAAfA,GAAItI,CAAJsI,CACLG,CAAAH,CAAMA,GAANA,CAAYpI,CADPoI,KAGLA,MAAM3H,MAAA2H,CAAMA,sCAANA,CAANA,CAGFA,MAAOA,CADMA,aACNA,CADsBd,CACtBc,CAD6BA,IAC7BA,CADoCD,CACpCC,CAD4CA,IAC5CA,CADmDG,CACnDH,CADyDA,GACzDA,CAAO1L,oDAAMG,CAAAA,IAAbuL,CAnCgBA,CNxKnBhM,CM8MAoM;AAAAA,QAAyBA,CAC7BnM,CAD6BmM,CAE7BlM,CAF6BkM,CAENA,CAGvBA,MAAMjH,EAAWlF,CAAMI,CAAAA,aAAN+L,CAAoBA,MAApBA,CACXlB,EAAAA,CAAOhL,CAAUa,CAAAA,WAAVqL,CAAsBnM,CAAtBmM,CAA6BA,MAA7BA,CAAqC9L,oDAAMU,CAAAA,IAA3CoL,CAAPlB,EAA2DkB,IACjEA,KAAIzL,CACayL,YAAjBA,GAAIjH,CAAJiH,CACEzL,CADFyL,CACiBA,cADjBA,CAEwBA,WAAjBA,GAAIjH,CAAJiH,CACLzL,CADKyL,CACUA,cADVA,CAEiBA,WAFjBA,GAEIjH,CAFJiH,GAMLzL,CANKyL,CAMUlM,CAAUU,CAAAA,gBAAVwL,CACbA,gBADaA,CAEbA;WACKlM,CAAUW,CAAAA,0BADfuL;;;;;;;;;;;;;;;;;CAFaA,CANVA,CA8BPA,OAAOA,CADMzL,CACNyL,CADqBA,GACrBA,CAD2BlB,CAC3BkB,CADkCA,GAClCA,CAAO9L,oDAAMG,CAAAA,IAAb2L,CAtCgBA,CNhNnBpM,CMyPAqM,gDAAAA,QAAmBA,CACvBpM,CADuBoM,CAEvBnM,CAFuBmM,CAEAA,CAKvBA,MAAMlH,EAFYC,CAACkH,KAAMD,UAAPjH,CAAmBmH,MAAOF,UAA1BjH,CAAsCoH,KAAMH,cAA5CjH,CAEDiH,CAAUpM,CAAMI,CAAAA,aAANgM,CAAoBA,MAApBA,CAAVA,CAGjBA,OAAOA,CADMA,cACNA,EAFMnM,CAAUa,CAAAA,WAAVsL,CAAsBpM,CAAtBoM,CAA6BA,MAA7BA,CAAqC/L,oDAAMU,CAAAA,IAA3CqL,CAENA,EAF0DA,IAE1DA,EAD8BA,KAC9BA,CADsClH,CACtCkH,CADiDA,UACjDA,CAAO/L,oDAAMG,CAAAA,IAAb4L,CARgBA,CN3PnBrM,CMsQAyM,iDAAAA,QAAoBA,CAACxM,CAADwM,CAAevM,CAAfuM,CAAsCA,CAG9DA,MAAOA,QAAPA;CADYvM,CAAUa,CAAAA,WAAV0L,CAAsBxM,CAAtBwM,CAA6BA,MAA7BA,CAAqCnM,oDAAMU,CAAAA,IAA3CyL,CACZA,EADgEA,IAChEA,EAAwBA,KAHsCA,CNtQ1DzM,CM4QA0M,sDAAAA,QAAyBA,CAC7BzM,CAD6ByM,CAE7BxM,CAF6BwM,CAENA,CAGvBA,IAAIC,CAGFA,EAAAD,CAFEzM,CAAMyG,CAAAA,QAANgG,CAAeA,MAAfA,CAAJA,CAEQxM,CAAUC,CAAAA,MAAVuM,CAAiBzM,CAAMI,CAAAA,aAANqM,CAAoBA,MAApBA,CAAjBA,CAFRA,CAKQxM,CAAUa,CAAAA,WAAV2L,CAAsBzM,CAAtByM,CAA6BA,MAA7BA,CAAqCpM,oDAAMU,CAAAA,IAA3C0L,CALRA,EAK4DA,IAaxDtM,EAAAA,CAViBF,CAAUU,CAAAA,gBAAVD,CACnB+L,aADmB/L,CAEnB+L;WACOxM,CAAUW,CAAAA,0BADjB6L;;;;;CAFmB/L,CAUjBP,CAAsBsM,GAAtBtM,CAA4BuM,CAA5BvM,CAAkCsM,GAEWA,SACjDA,GADiBzM,CAAMI,CAAAA,aAANqM,CAAoBA,MAApBA,CACjBA,GACEtM,CADFsM,CACSA,WADTA,CACuBtM,CADvBsM,CAC8BA,OAD9BA,CAGAA,OAAOA,CAACtM,CAADsM,CAAOpM,oDAAMG,CAAAA,IAAbiM,CA5BgBA,CN9QnB1M,CM+SA4M,iDAAAA,QAAoBA,CACxB3M,CADwB2M,CAExB1M,CAFwB0M,CAEDA,CAEvBA,MAAM1B,EAAOhL,CAAUa,CAAAA,WAAV6L,CAAsB3M,CAAtB2M,CAA6BA,MAA7BA,CAAqCtM,oDAAMU,CAAAA,IAA3C4L,CAAP1B,EAA2D0B,IAC3DC,EAAAA,CAAM3M,CAAUa,CAAAA,WAAV6L,CAAsB3M,CAAtB2M,CAA6BA,KAA7BA,CAAoCtM,oDAAMU,CAAAA,IAA1C4L,CAANC,EAAyDD,IAuB/DA,OAAOA,CAtBc1M,CAAUU,CAAAA,gBAAVD,CACnBiM,YADmBjM,CAEnBiM;WACO1M,CAAUW,CAAAA,0BADjB+L;;;;;;;;;;;;;;;;CAFmBjM,CAsBdiM,CADqBA,GACrBA,CAD2B1B,CAC3B0B,CADkCA,IAClCA,CADyCC,CACzCD,CAD+CA,GAC/CA,CAAOtM,oDAAMG,CAAAA,IAAbmM,CA1BgBA,CNjTnB5M,CM8UA8M,mDAAAA,QAAsBA,CAC1B7M,CAD0B6M,CAE1B5M,CAF0B4M,CAEHA,CAEvBA,MAAM5B,EAAOhL,CAAUa,CAAAA,WAAV+L,CAAsB7M,CAAtB6M,CAA6BA,MAA7BA,CAAqCxM,oDAAMU,CAAAA,IAA3C8L,CAAP5B,EAA2D4B,IAAjEA,CACMC,EAAO7M,CAAUa,CAAAA,WAAV+L,CAAsB7M,CAAtB6M,CAA6BA,MAA7BA,CAAqCxM,oDAAMU,CAAAA,IAA3C8L,CAAPC,EAA2DD,IAC3DE,EAAAA,CAAK9M,CAAUa,CAAAA,WAAV+L,CAAsB7M,CAAtB6M,CAA6BA,IAA7BA,CAAmCxM,oDAAMU,CAAAA,IAAzC8L,CAALE,EAAuDF,IAuB7DA,OAAOA,CAtBc5M,CAAUU,CAAAA,gBAAVD,CACnBmM,cADmBnM,CAEnBmM;WACO5M,CAAUW,CAAAA,0BADjBiM;;;;;;;;;;;;;;;;CAFmBnM,CAsBdmM,CADqBA,GACrBA,CAD2B5B,CAC3B4B,CADkCA,IAClCA,CADyCC,CACzCD,CADgDA,IAChDA,CADuDE,CACvDF,CAD4DA,GAC5DA,CAAOxM,oDAAMG,CAAAA,IAAbqM,CA3BgBA,CNhVnB9M,CM8WAiN,mDAAAA,QAAsBA,CAC1BhN,CAD0BgN,CAE1B/M,CAF0B+M,CAEHA,CAIvBA,MAAOA,CADMA,iBACNA,EAFM/M,CAAUa,CAAAA,WAAVkM,CAAsBhN,CAAtBgN,CAA6BA,MAA7BA,CAAqC3M,oDAAMU,CAAAA,IAA3CiM,CAENA,EAF0DA,IAE1DA,EADiCA,GACjCA,CAAO3M,oDAAMG,CAAAA,IAAbwM,CAJgBA,CNhXnBjN,COAAkN,yDAAAA,QAAuBA,CAC3BjN,CAD2BiN,CAE3BhN,CAF2BgN,CAEJA,CAIvBA,MAAOA,CADMhN,CAAUmH,CAAAA,eAAVjH,CAA0BH,CAAMI,CAAAA,aAAN6M,CAAoBA,KAApBA,CAA1B9M,CACN8M,CAAO5M,oDAAMC,CAAAA,MAAb2M,CAJgBA,CPFnBlN;AOSAmN,yDAAAA,QAAuBA,CAAClN,CAADkN,CAAejN,CAAfiN,CAAsCA,CAEjEA,MAAM9H,EAAYnF,CAAUa,CAAAA,WAAVoM,CAAsBlN,CAAtBkN,CAA6BA,OAA7BA,CAAsC7M,oDAAMU,CAAAA,IAA5CmM,CAAZ9H,EAAiE8H,GAEvEA,OADgBjN,EAAUmH,CAAAA,eAAVgC,CAA0BpJ,CAAMI,CAAAA,aAAN8M,CAAoBA,KAApBA,CAA1B9D,CAChB8D,CAAiBA,KAAjBA,CAAyB9H,CAAzB8H,CAAqCA,IAJ4BA,CPT7DnN,CQWMM,oDAAZ;SAAA,CAAYA,CAAZ,CAAiB,CACfA,CAAA,CAAAA,CAAAC,CAAAA,MAAA,CAAA,CAAA,CAAA,CAAA,QAEAD,EAAA,CAAAA,CAAAG,CAAAA,IAAA,CAAA,CAAA,CAAA,CAAA,MACAH,EAAA,CAAAA,CAAAiI,CAAAA,cAAA,CAAA,CAAA,CAAA,CAAA,gBACAjI,EAAA,CAAAA,CAAA4B,CAAAA,KAAA,CAAA,CAAA,CAAA,CAAA,OACA5B,EAAA,CAAAA,CAAAgI,CAAAA,cAAA,CAAA,CAAA,CAAA,CAAA,gBACAhI,EAAA,CAAAA,CAAAwC,CAAAA,QAAA,CAAA,CAAA,CAAA,CAAA,UACAxC,EAAA,CAAAA,CAAA+K,CAAAA,aAAA,CAAA,CAAA,CAAA,CAAA,eACA/K,EAAA,CAAAA,CAAA8B,CAAAA,UAAA,CAAA,CAAA,CAAA,CAAA,YACA9B,EAAA,CAAAA,CAAAmF,CAAAA,GAAA,CAAA,CAAA,CAAA,CAAA,KACAnF,EAAA,CAAAA,CAAAoF,CAAAA,EAAA,CAAA,CAAA,CAAA,CAAA,IACApF,EAAA,CAAAA,CAAAU,CAAAA,IAAA,CAAA,EAAA,CAAA,CAAA,MAZe,CAAjB,CAAA,CAAYV,oDAAZ,GAAYA,oDAAZ,CAAiB,EAAjB,EAsBM;IAAO8M,4DAAP,aAA4BC,EAAAA,CAAAA,8CAA5B,CACJC,WAAA,CAAYC,CAAA,CAAO,KAAnB,CAAwB,CACtB,KAAA,CAAMA,CAAN,CACA,KAAKC,CAAAA,aAAL,CAAqB,CAAA,CASrB,KAAK,MAAMC,CAAX,GAAkBnN,qDAAlB,CAGQiD,CAMN,CANcjD,oDAAA,CAAMmN,CAAN,CAMd,CAAqB,QAArB,GAAI,MAAOlK,EAAX,GACC,IAAA,CAA0C,QAA1C,CAAqDkK,CAArD,CADD,CAC6DlK,CAD7D,CAQF,KAAKmK,CAAAA,gBAAL,CAEE,mzBAFF,CA5BsB,CA6DxBC,IAAI,CAACC,CAAD,CAAqB,CAEvB,KAAMD,CAAAA,IAAN,CAAWC,CAAX,CAEK;IAAK3K,CAAAA,OAAV,CAGE,IAAKA,CAAAA,OAAQ4K,CAAAA,KAAb,EAHF,CACE,IAAK5K,CAAAA,OADP,CACiB,IAAI6K,CAAAA,CAAAA,kCAAJ,CAAU,IAAKC,CAAAA,eAAf,CAIjB,KAAK9K,CAAAA,OAAQ+K,CAAAA,cAAb,CAA4BJ,CAAUK,CAAAA,cAAV,EAA5B,CACA,KAAKhL,CAAAA,OAAQiL,CAAAA,iBAAb,CAA+BN,CAA/B,CACA,KAAK3K,CAAAA,OAAQkL,CAAAA,kBAAb,CAAgCP,CAAhC,CAEA,KAAKJ,CAAAA,aAAL,CAAqB,CAAA,CAbE,CAsBzBY,MAAM,CAAChO,CAAD,CAAa,CAEjB,MAAMiO,EAAcC,MAAOC,CAAAA,MAAP,CAAc,IAAK3D,CAAAA,YAAnB,CAEpBxK,EAAA,CAAO,KAAMgO,CAAAA,MAAN,CAAahO,CAAb,CACP,KAAKoN,CAAAA,aAAL,CAAqB,CAAA,CAErB,KAAKvK,CAAAA,OAAS4K,CAAAA,KAAd,EACA,OAAOQ,EAAYxM,CAAAA,IAAZ,CAAiB,MAAjB,CAAP,CAAkC,QAAlC,CAA6CzB,CAR5B,CAoBnBoO,eAAe,CAACC,CAAD,CAAa,CAC1B,MAAO,YAAP,CAAsBA,CAAtB,CAA6B,IADH,CAW5BtO,MAAM,CAACuO,CAAD,CAAe,CACnBA,CAAA,CAASA,CACNC,CAAAA,OADM,CACE,KADF,CACS,MADT,CAENA,CAAAA,OAFM,CAEE,KAFF,CAES,MAFT,CAGNA,CAAAA,OAHM,CAGE,IAHF;AAGQ,KAHR,CAIT,OAAO,GAAP,CAAaD,CAAb,CAAsB,GALH,CAerBtD,gBAAgB,CAACsD,CAAD,CAAe,CAI7B,MAHcA,EAAOE,CAAAA,KAAP,CAAa,KAAb,CAAoBC,CAAAA,GAApBC,CAAwB,IAAK3O,CAAAA,MAA7B2O,CAGDjN,CAAAA,IAAN,CAAW,gBAAX,CAJsB,CAgB/B8I,MAAM,CAAC1K,CAAD,CAAeG,CAAf,CAA6B2O,CAAA,CAAW,CAAA,CAAxC,CAA6C,CACjD,IAAIC,EAAc,EAElB,IAAI,CAAC/O,CAAMgP,CAAAA,gBAAX,EAA+B,CAAChP,CAAMgP,CAAAA,gBAAiBC,CAAAA,gBAAvD,CAAyE,CAEvE,IAAIC,EAAUlP,CAAMmP,CAAAA,cAAN,EACVD,EAAJ,GACEA,CACA,CADsBE,CAAAA,CAAAA,wCAAZ,CAAiBF,CAAjB,CAA0B,IAAKG,CAAAA,YAA/B,CAA8C,CAA9C,CACV,CAAAN,CAAA,EAAe,IAAKjK,CAAAA,WAAL,CAAiBoK,CAAjB,CAA0B,KAA1B,CAAf,CAAkD,IAFpD,CAMA,KAAK,IAAIvN,EAAI,CAAb,CAAgBA,CAAhB,CAAoB3B,CAAMsP,CAAAA,SAAU7E,CAAAA,MAApC,CAA4C9I,CAAA,EAA5C,CACM3B,CAAMsP,CAAAA,SAAN,CAAgB3N,CAAhB,CAAmBqC,CAAAA,IAAvB,GAAgCuL,CAAAA,CAAAA,oDAAWC,CAAAA,KAA3C,GACQC,CADR,CACqBzP,CAAMsP,CAAAA,SAAN,CAAgB3N,CAAhB,CAAmB+N,CAAAA,UAAYC,CAAAA,WAA/B,EADrB,IAGIT,CAHJ,CAGc,IAAKU,CAAAA,iBAAL,CAAuBH,CAAvB,CAHd;CAKMV,CALN,EAKqB,IAAKjK,CAAAA,WAAL,CAAiBoK,CAAjB,CAA0B,KAA1B,CALrB,CAVqE,CAqBnEW,CAAAA,CACJ7P,CAAM8P,CAAAA,cADFD,EACoB7P,CAAM8P,CAAAA,cAAeH,CAAAA,WAArB,EACpBI,EAAAA,CAAWjB,CAAA,CAAW,EAAX,CAAgB,IAAKkB,CAAAA,WAAL,CAAiBH,CAAjB,CACjC,OAAOd,EAAP,CAAqB5O,CAArB,CAA4B4P,CA3BqB,CAlJ/C,CAAA,CAjDNE,8CAAA,EAiDa9C,8CAAAA,CAAAA,YAAAA,CAAAA,2DAtBD9M,8CAAAA,CAAAA,KAAAA,CAAAA,oD,CR3BZ,IAAA4P,uCAAA,EAyDgB/O,uCAAAA,CAAAA,YAAAA,CAAAA,oDAzCAnB,uCAAAA,CAAAA,aAAAA,CAAAA,qDASAQ,uCAAAA,CAAAA,aAAAA,CAAAA,qDASAE,uCAAAA,CAAAA,UAAAA,CAAAA,kD,CCkGhB,IAAMqC,oDAAeA,QAAA,CACnBoN,CADmB,CAEnBzN,CAFmB,CAGnB0N,CAHmB,CAGL,CAEd,MAAc,OAAd,GAAI1N,CAAJ,CACS,GADT,CAEqB,UAAd,GAAIA,CAAJ,CACE,GADF,CACQyN,CADR,CACmB,SADnB,CAC+BC,CAD/B,CAEc,MAAd,GAAI1N,CAAJ,CACE,GADF,CACQyN,CADR,CAEc,QAAd,GAAIzN,CAAJ,CACE,eADF,CACoByN,CADpB,CAC+B,GAD/B,CAGEC,CAXK,CAHhB,CApIAF,sCAAA,EAkBgB3O,sCAAAA,CAAAA,kBAAAA,CAAAA,yDAQAC,sCAAAA,CAAAA,iBAAAA,CAAAA,wDA4HAgB;qCAAAA,CAAAA,cAAAA,CAAAA,qDAkJAgB,sCAAAA,CAAAA,gBAAAA,CAAAA,uDArNAnB,sCAAAA,CAAAA,aAAAA,CAAAA,oDAVAF,sCAAAA,CAAAA,aAAAA,CAAAA,oDATAF,sCAAAA,CAAAA,YAAAA,CAAAA,mDAvBAH;qCAAAA,CAAAA,YAAAA,CAAAA,mDA+XAwC,sCAAAA,CAAAA,aAAAA,CAAAA,oDA3KAhB,sCAAAA,CAAAA,cAAAA,CAAAA,qDAsFAS,sCAAAA,CAAAA,UAAAA,CAAAA,iDAwCAG,sCAAAA,CAAAA,WAAAA,CAAAA,kD,CCrUT,IAAMmM,uDAAkB9L,kDAAxB,CAtDP2L,sCAAA,EAgBgB3L,sCAAAA,CAAAA,WAAAA,CAAAA,kDAsCH8L,sCAAAA,CAAAA,eAAAA,CAAAA,kDA4DGxK,sCAAAA,CAAAA,aAAAA,CAAAA,oDA1DAX;qCAAAA,CAAAA,aAAAA,CAAAA,oDAgDAU,sCAAAA,CAAAA,YAAAA,CAAAA,mDAmBAE,sCAAAA,CAAAA,UAAAA,CAAAA,iDA9CAP,sCAAAA,CAAAA,eAAAA,CAAAA,sDAsDAQ,sCAAAA,CAAAA,aAAAA,CAAAA,oD,CC3GhB,IAAMQ,0DAAqB,iBAA3B,CAmDa+J,uDAAkB9J,0DAnD/B,CAxBA0J,sCAAA,EAgKgBpI,sCAAAA,CAAAA,wBAAAA,CAAAA,+DAjEAX,sCAAAA,CAAAA,YAAAA,CAAAA,mDA4CAU;qCAAAA,CAAAA,gBAAAA,CAAAA,uDAhEHyI,sCAAAA,CAAAA,eAAAA,CAAAA,0DA9BG9J,sCAAAA,CAAAA,mBAAAA,CAAAA,0DAgCAS,sCAAAA,CAAAA,mBAAAA,CAAAA,0D,CCqIT,IAAMsJ,iDAAa/H,iDAAnB,CAEMgI,gDAAYhI,iDAFlB,CAlNP0H,qCAAA,EA0BgB9H,qCAAAA,CAAAA,eAAAA,CAAAA,qDAmbA0B,qCAAAA,CAAAA,UAAAA,CAAAA,gDApQAV,qCAAAA,CAAAA,WAAAA,CAAAA,iDAhFAV;oCAAAA,CAAAA,aAAAA,CAAAA,mDA4SAgB,qCAAAA,CAAAA,cAAAA,CAAAA,oDAbAD,qCAAAA,CAAAA,WAAAA,CAAAA,iDAxYAtB,qCAAAA,CAAAA,WAAAA,CAAAA,iDAyHAS,qCAAAA,CAAAA,oBAAAA,CAAAA,0DA6EAU;oCAAAA,CAAAA,YAAAA,CAAAA,kDA+OAO,qCAAAA,CAAAA,iBAAAA,CAAAA,uDAXAD,qCAAAA,CAAAA,eAAAA,CAAAA,qDAxOH2G,qCAAAA,CAAAA,UAAAA,CAAAA,iDAlKG/H,qCAAAA,CAAAA,WAAAA,CAAAA,iDAoKHgI;oCAAAA,CAAAA,SAAAA,CAAAA,iD,CCrIN,IAAMC,mEAAyB1G,gEAA/B,CA/EPmG,2CAAA,EAgGgBpF,2CAAAA,CAAAA,uBAAAA,CAAAA,mEAfAD,2CAAAA,CAAAA,qBAAAA,CAAAA,iEAFH4F;0CAAAA,CAAAA,sBAAAA,CAAAA,gEA9DG1G,2CAAAA,CAAAA,oBAAAA,CAAAA,gEA6FAiB,2CAAAA,CAAAA,mBAAAA,CAAAA,+D,CC+MT,IAAM0F,kDAAchE,qDAApB,CA7TPwD,qCAAA,EAiBgBhF,qCAAAA,CAAAA,IAAAA,CAAAA,0CA6CAO,qCAAAA,CAAAA,WAAAA,CAAAA,iDAgKAW,qCAAAA,CAAAA,eAAAA,CAAAA,qDA/FAN,qCAAAA,CAAAA,WAAAA,CAAAA,iDAgMAc;oCAAAA,CAAAA,UAAAA,CAAAA,gDAzIAZ,qCAAAA,CAAAA,iBAAAA,CAAAA,uDA9FAJ,qCAAAA,CAAAA,YAAAA,CAAAA,kDATAD,qCAAAA,CAAAA,YAAAA,CAAAA,kDA9CAL,qCAAAA,CAAAA,SAAAA,CAAAA,+CAqCAI;oCAAAA,CAAAA,WAAAA,CAAAA,iDA/CAP,qCAAAA,CAAAA,cAAAA,CAAAA,oDA+PAsB,qCAAAA,CAAAA,UAAAA,CAAAA,gDAuCHiE,qCAAAA,CAAAA,WAAAA,CAAAA,qDAjCGhE,qCAAAA,CAAAA,eAAAA,CAAAA,qDAkEAI;oCAAAA,CAAAA,YAAAA,CAAAA,kDAgCAG,qCAAAA,CAAAA,YAAAA,CAAAA,kDArHAZ,qCAAAA,CAAAA,SAAAA,CAAAA,+C,CCzQhB,IAAA6D,0CAAA,EAgBgBhD,0CAAAA,CAAAA,aAAAA,CAAAA,wDASAC,0CAAAA,CAAAA,aAAAA,CAAAA,wD,CEzBhB,IAAA+C,kDAAA,EAcEhD,kDAAAA,CAAAA,qBAAAA,CAAAA,wDACAC,kDAAAA,CAAAA,qBAAAA,CAAAA,wD,CCcK,IAAMwD,8CAAe,IAAIvD,2DAAzB,CAGDwD,4CAA2C,MAAA,CAAA,MAAA,CAAA,EAAA,CAC5CC,sCAD4C,CAE5CC,qCAF4C,CAG5CC,qCAH4C,CAI5CC,qCAJ4C,CAK5CC,oCAL4C,CAM5CC,0CAN4C,CAO5ChG,oCAP4C,CAQ5CV,yCAR4C,CAS5C2G,iDAT4C,CAWjD;IAAK,MAAM5D,CAAX,GAAmBqD,4CAAnB,CACED,6CAAa5F,CAAAA,QAAb,CAAsBwC,CAAtB,CAAA,CAA8BqD,2CAAA,CAAWrD,CAAX,CA5ChC,KAAA2C,gCAAA,EAwBA,gCAAA,CAAA,YAAA,CAAA,2DAAA,gCAAA,CAAA,KAAA,CAAA,oDAKaS,gCAAAA,CAAAA,YAAAA,CAAAA","file":"lua_compressed.js","sourcesContent":["/**\r\n * @license\r\n * Copyright 2016 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Lua for colour blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Lua.colour\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {LuaGenerator} from './lua_generator.js';\r\nimport {Order} from './lua_generator.js';\r\n\r\nexport function colour_picker(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Colour picker.\r\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function colour_random(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Generate a random colour.\r\n  const code = 'string.format(\"#%06x\", math.random(0, 2^24 - 1))';\r\n  return [code, Order.HIGH];\r\n}\r\n\r\nexport function colour_rgb(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Compose a colour from RGB components expressed as percentages.\r\n  const functionName = generator.provideFunction_(\r\n    'colour_rgb',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(r, g, b)\r\n  r = math.floor(math.min(100, math.max(0, r)) * 2.55 + .5)\r\n  g = math.floor(math.min(100, math.max(0, g)) * 2.55 + .5)\r\n  b = math.floor(math.min(100, math.max(0, b)) * 2.55 + .5)\r\n  return string.format(\"#%02x%02x%02x\", r, g, b)\r\nend\r\n`,\r\n  );\r\n  const r = generator.valueToCode(block, 'RED', Order.NONE) || 0;\r\n  const g = generator.valueToCode(block, 'GREEN', Order.NONE) || 0;\r\n  const b = generator.valueToCode(block, 'BLUE', Order.NONE) || 0;\r\n  const code = functionName + '(' + r + ', ' + g + ', ' + b + ')';\r\n  return [code, Order.HIGH];\r\n}\r\n\r\nexport function colour_blend(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Blend two colours together.\r\n  const functionName = generator.provideFunction_(\r\n    'colour_blend',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(colour1, colour2, ratio)\r\n  local r1 = tonumber(string.sub(colour1, 2, 3), 16)\r\n  local r2 = tonumber(string.sub(colour2, 2, 3), 16)\r\n  local g1 = tonumber(string.sub(colour1, 4, 5), 16)\r\n  local g2 = tonumber(string.sub(colour2, 4, 5), 16)\r\n  local b1 = tonumber(string.sub(colour1, 6, 7), 16)\r\n  local b2 = tonumber(string.sub(colour2, 6, 7), 16)\r\n  local ratio = math.min(1, math.max(0, ratio))\r\n  local r = math.floor(r1 * (1 - ratio) + r2 * ratio + .5)\r\n  local g = math.floor(g1 * (1 - ratio) + g2 * ratio + .5)\r\n  local b = math.floor(b1 * (1 - ratio) + b2 * ratio + .5)\r\n  return string.format(\"#%02x%02x%02x\", r, g, b)\r\nend\r\n`,\r\n  );\r\n  const colour1 =\r\n    generator.valueToCode(block, 'COLOUR1', Order.NONE) || \"'#000000'\";\r\n  const colour2 =\r\n    generator.valueToCode(block, 'COLOUR2', Order.NONE) || \"'#000000'\";\r\n  const ratio = generator.valueToCode(block, 'RATIO', Order.NONE) || 0;\r\n  const code =\r\n    functionName + '(' + colour1 + ', ' + colour2 + ', ' + ratio + ')';\r\n  return [code, Order.HIGH];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2016 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Lua for list blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Lua.lists\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {CreateWithBlock} from '../../blocks/lists.js';\r\nimport type {LuaGenerator} from './lua_generator.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport {Order} from './lua_generator.js';\r\n\r\nexport function lists_create_empty(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Create an empty list.\r\n  return ['{}', Order.HIGH];\r\n}\r\n\r\nexport function lists_create_with(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  const createWithBlock = block as CreateWithBlock;\r\n  // Create a list with any number of elements of any type.\r\n  const elements = new Array(createWithBlock.itemCount_);\r\n  for (let i = 0; i < createWithBlock.itemCount_; i++) {\r\n    elements[i] =\r\n      generator.valueToCode(createWithBlock, 'ADD' + i, Order.NONE) || 'None';\r\n  }\r\n  const code = '{' + elements.join(', ') + '}';\r\n  return [code, Order.HIGH];\r\n}\r\n\r\nexport function lists_repeat(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Create a list with one element repeated.\r\n  const functionName = generator.provideFunction_(\r\n    'create_list_repeated',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(item, count)\r\n  local t = {}\r\n  for i = 1, count do\r\n    table.insert(t, item)\r\n  end\r\n  return t\r\nend\r\n  `,\r\n  );\r\n  const element = generator.valueToCode(block, 'ITEM', Order.NONE) || 'None';\r\n  const repeatCount = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\r\n  const code = functionName + '(' + element + ', ' + repeatCount + ')';\r\n  return [code, Order.HIGH];\r\n}\r\n\r\nexport function lists_length(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // String or array length.\r\n  const list = generator.valueToCode(block, 'VALUE', Order.UNARY) || '{}';\r\n  return ['#' + list, Order.UNARY];\r\n}\r\n\r\nexport function lists_isEmpty(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Is the string null or array empty?\r\n  const list = generator.valueToCode(block, 'VALUE', Order.UNARY) || '{}';\r\n  const code = '#' + list + ' == 0';\r\n  return [code, Order.RELATIONAL];\r\n}\r\n\r\nexport function lists_indexOf(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Find an item in the list.\r\n  const item = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\r\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || '{}';\r\n  let functionName;\r\n  if (block.getFieldValue('END') === 'FIRST') {\r\n    functionName = generator.provideFunction_(\r\n      'first_index',\r\n      `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t, elem)\r\n  for k, v in ipairs(t) do\r\n    if v == elem then\r\n      return k\r\n    end\r\n  end\r\n  return 0\r\nend\r\n`,\r\n    );\r\n  } else {\r\n    functionName = generator.provideFunction_(\r\n      'last_index',\r\n      `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t, elem)\r\n  for i = #t, 1, -1 do\r\n    if t[i] == elem then\r\n      return i\r\n    end\r\n  end\r\n  return 0\r\nend\r\n`,\r\n    );\r\n  }\r\n  const code = functionName + '(' + list + ', ' + item + ')';\r\n  return [code, Order.HIGH];\r\n}\r\n\r\n/**\r\n * Returns an expression calculating the index into a list.\r\n *\r\n * @param listName Name of the list, used to calculate length.\r\n * @param where The method of indexing, selected by dropdown in Blockly\r\n * @param opt_at The optional offset when indexing from start/end.\r\n * @returns Index expression.\r\n */\r\nconst getListIndex = function (\r\n  listName: string,\r\n  where: string,\r\n  opt_at: string,\r\n): string {\r\n  if (where === 'FIRST') {\r\n    return '1';\r\n  } else if (where === 'FROM_END') {\r\n    return '#' + listName + ' + 1 - ' + opt_at;\r\n  } else if (where === 'LAST') {\r\n    return '#' + listName;\r\n  } else if (where === 'RANDOM') {\r\n    return 'math.random(#' + listName + ')';\r\n  } else {\r\n    return opt_at;\r\n  }\r\n};\r\n\r\nexport function lists_getIndex(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] | string {\r\n  // Get element at index.\r\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\r\n  const mode = block.getFieldValue('MODE') || 'GET';\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  const list = generator.valueToCode(block, 'VALUE', Order.HIGH) || '({})';\r\n\r\n  // If `list` would be evaluated more than once (which is the case for LAST,\r\n  // FROM_END, and RANDOM) and is non-trivial, make sure to access it only once.\r\n  if (\r\n    (where === 'LAST' || where === 'FROM_END' || where === 'RANDOM') &&\r\n    !list.match(/^\\w+$/)\r\n  ) {\r\n    // `list` is an expression, so we may not evaluate it more than once.\r\n    if (mode === 'REMOVE') {\r\n      // We can use multiple statements.\r\n      const atOrder = where === 'FROM_END' ? Order.ADDITIVE : Order.NONE;\r\n      let at = generator.valueToCode(block, 'AT', atOrder) || '1';\r\n      const listVar = generator.nameDB_!.getDistinctName(\r\n        'tmp_list',\r\n        NameType.VARIABLE,\r\n      );\r\n      at = getListIndex(listVar, where, at);\r\n      const code =\r\n        listVar +\r\n        ' = ' +\r\n        list +\r\n        '\\n' +\r\n        'table.remove(' +\r\n        listVar +\r\n        ', ' +\r\n        at +\r\n        ')\\n';\r\n      return code;\r\n    } else {\r\n      // We need to create a procedure to avoid reevaluating values.\r\n      const at = generator.valueToCode(block, 'AT', Order.NONE) || '1';\r\n      let functionName;\r\n      if (mode === 'GET') {\r\n        functionName = generator.provideFunction_(\r\n          'list_get_' + where.toLowerCase(),\r\n          [\r\n            'function ' +\r\n              generator.FUNCTION_NAME_PLACEHOLDER_ +\r\n              '(t' +\r\n              // The value for 'FROM_END' and'FROM_START' depends on `at` so\r\n              // we add it as a parameter.\r\n              (where === 'FROM_END' || where === 'FROM_START' ? ', at)' : ')'),\r\n            '  return t[' + getListIndex('t', where, 'at') + ']',\r\n            'end',\r\n          ],\r\n        );\r\n      } else {\r\n        // `mode` === 'GET_REMOVE'\r\n        functionName = generator.provideFunction_(\r\n          'list_remove_' + where.toLowerCase(),\r\n          [\r\n            'function ' +\r\n              generator.FUNCTION_NAME_PLACEHOLDER_ +\r\n              '(t' +\r\n              // The value for 'FROM_END' and'FROM_START' depends on `at` so\r\n              // we add it as a parameter.\r\n              (where === 'FROM_END' || where === 'FROM_START' ? ', at)' : ')'),\r\n            '  return table.remove(t, ' + getListIndex('t', where, 'at') + ')',\r\n            'end',\r\n          ],\r\n        );\r\n      }\r\n      const code =\r\n        functionName +\r\n        '(' +\r\n        list +\r\n        // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\r\n        // pass it.\r\n        (where === 'FROM_END' || where === 'FROM_START' ? ', ' + at : '') +\r\n        ')';\r\n      return [code, Order.HIGH];\r\n    }\r\n  } else {\r\n    // Either `list` is a simple variable, or we only need to refer to `list`\r\n    // once.\r\n    const atOrder =\r\n      mode === 'GET' && where === 'FROM_END' ? Order.ADDITIVE : Order.NONE;\r\n    let at = generator.valueToCode(block, 'AT', atOrder) || '1';\r\n    at = getListIndex(list, where, at);\r\n    if (mode === 'GET') {\r\n      const code = list + '[' + at + ']';\r\n      return [code, Order.HIGH];\r\n    } else {\r\n      const code = 'table.remove(' + list + ', ' + at + ')';\r\n      if (mode === 'GET_REMOVE') {\r\n        return [code, Order.HIGH];\r\n      } else {\r\n        // `mode` === 'REMOVE'\r\n        return code + '\\n';\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function lists_setIndex(block: Block, generator: LuaGenerator): string {\r\n  // Set element at index.\r\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\r\n  let list = generator.valueToCode(block, 'LIST', Order.HIGH) || '{}';\r\n  const mode = block.getFieldValue('MODE') || 'SET';\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  const at = generator.valueToCode(block, 'AT', Order.ADDITIVE) || '1';\r\n  const value = generator.valueToCode(block, 'TO', Order.NONE) || 'None';\r\n\r\n  let code = '';\r\n  // If `list` would be evaluated more than once (which is the case for LAST,\r\n  // FROM_END, and RANDOM) and is non-trivial, make sure to access it only once.\r\n  if (\r\n    (where === 'LAST' || where === 'FROM_END' || where === 'RANDOM') &&\r\n    !list.match(/^\\w+$/)\r\n  ) {\r\n    // `list` is an expression, so we may not evaluate it more than once.\r\n    // We can use multiple statements.\r\n    const listVar = generator.nameDB_!.getDistinctName(\r\n      'tmp_list',\r\n      NameType.VARIABLE,\r\n    );\r\n    code = listVar + ' = ' + list + '\\n';\r\n    list = listVar;\r\n  }\r\n  if (mode === 'SET') {\r\n    code += list + '[' + getListIndex(list, where, at) + '] = ' + value;\r\n  } else {\r\n    // `mode` === 'INSERT'\r\n    // LAST is a special case, because we want to insert\r\n    // *after* not *before*, the existing last element.\r\n    code +=\r\n      'table.insert(' +\r\n      list +\r\n      ', ' +\r\n      (getListIndex(list, where, at) + (where === 'LAST' ? ' + 1' : '')) +\r\n      ', ' +\r\n      value +\r\n      ')';\r\n  }\r\n  return code + '\\n';\r\n}\r\n\r\nexport function lists_getSublist(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Get sublist.\r\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '{}';\r\n  const where1 = block.getFieldValue('WHERE1');\r\n  const where2 = block.getFieldValue('WHERE2');\r\n  const at1 = generator.valueToCode(block, 'AT1', Order.NONE) || '1';\r\n  const at2 = generator.valueToCode(block, 'AT2', Order.NONE) || '1';\r\n\r\n  // The value for 'FROM_END' and'FROM_START' depends on `at` so\r\n  // we add it as a parameter.\r\n  const at1Param =\r\n    where1 === 'FROM_END' || where1 === 'FROM_START' ? ', at1' : '';\r\n  const at2Param =\r\n    where2 === 'FROM_END' || where2 === 'FROM_START' ? ', at2' : '';\r\n  const functionName = generator.provideFunction_(\r\n    'list_sublist_' + where1.toLowerCase() + '_' + where2.toLowerCase(),\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(source${at1Param}${at2Param})\r\n  local t = {}\r\n  local start = ${getListIndex('source', where1, 'at1')}\r\n  local finish = ${getListIndex('source', where2, 'at2')}\r\n  for i = start, finish do\r\n    table.insert(t, source[i])\r\n  end\r\n  return t\r\nend\r\n`,\r\n  );\r\n  const code =\r\n    functionName +\r\n    '(' +\r\n    list +\r\n    // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\r\n    // pass it.\r\n    (where1 === 'FROM_END' || where1 === 'FROM_START' ? ', ' + at1 : '') +\r\n    (where2 === 'FROM_END' || where2 === 'FROM_START' ? ', ' + at2 : '') +\r\n    ')';\r\n  return [code, Order.HIGH];\r\n}\r\n\r\nexport function lists_sort(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Block for sorting a list.\r\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '{}';\r\n  const direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\r\n  const type = block.getFieldValue('TYPE');\r\n\r\n  const functionName = generator.provideFunction_(\r\n    'list_sort',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(list, typev, direction)\r\n  local t = {}\r\n  for n,v in pairs(list) do table.insert(t, v) end\r\n  local compareFuncs = {\r\n    NUMERIC = function(a, b)\r\n      return (tonumber(tostring(a)) or 0)\r\n          < (tonumber(tostring(b)) or 0) end,\r\n    TEXT = function(a, b)\r\n      return tostring(a) < tostring(b) end,\r\n    IGNORE_CASE = function(a, b)\r\n      return string.lower(tostring(a)) < string.lower(tostring(b)) end\r\n  }\r\n  local compareTemp = compareFuncs[typev]\r\n  local compare = compareTemp\r\n  if direction == -1\r\n  then compare = function(a, b) return compareTemp(b, a) end\r\n  end\r\n  table.sort(t, compare)\r\n  return t\r\nend\r\n`,\r\n  );\r\n\r\n  const code =\r\n    functionName + '(' + list + ',\"' + type + '\", ' + direction + ')';\r\n  return [code, Order.HIGH];\r\n}\r\n\r\nexport function lists_split(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Block for splitting text into a list, or joining a list into text.\r\n  let input = generator.valueToCode(block, 'INPUT', Order.NONE);\r\n  const delimiter = generator.valueToCode(block, 'DELIM', Order.NONE) || \"''\";\r\n  const mode = block.getFieldValue('MODE');\r\n  let functionName;\r\n  if (mode === 'SPLIT') {\r\n    if (!input) {\r\n      input = \"''\";\r\n    }\r\n    functionName = generator.provideFunction_(\r\n      'list_string_split',\r\n      `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(input, delim)\r\n  local t = {}\r\n  local pos = 1\r\n  while true do\r\n    next_delim = string.find(input, delim, pos)\r\n    if next_delim == nil then\r\n      table.insert(t, string.sub(input, pos))\r\n      break\r\n    else\r\n      table.insert(t, string.sub(input, pos, next_delim-1))\r\n      pos = next_delim + #delim\r\n    end\r\n  end\r\n  return t\r\nend\r\n`,\r\n    );\r\n  } else if (mode === 'JOIN') {\r\n    if (!input) {\r\n      input = '{}';\r\n    }\r\n    functionName = 'table.concat';\r\n  } else {\r\n    throw Error('Unknown mode: ' + mode);\r\n  }\r\n  const code = functionName + '(' + input + ', ' + delimiter + ')';\r\n  return [code, Order.HIGH];\r\n}\r\n\r\nexport function lists_reverse(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Block for reversing a list.\r\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '{}';\r\n  const functionName = generator.provideFunction_(\r\n    'list_reverse',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(input)\r\n  local reversed = {}\r\n  for i = #input, 1, -1 do\r\n    table.insert(reversed, input[i])\r\n  end\r\n  return reversed\r\nend\r\n`,\r\n  );\r\n  const code = functionName + '(' + list + ')';\r\n  return [code, Order.HIGH];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2016 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Lua for logic blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Lua.logic\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {LuaGenerator} from './lua_generator.js';\r\nimport {Order} from './lua_generator.js';\r\n\r\nexport function controls_if(block: Block, generator: LuaGenerator): string {\r\n  // If/elseif/else condition.\r\n  let n = 0;\r\n  let code = '';\r\n  if (generator.STATEMENT_PREFIX) {\r\n    // Automatic prefix insertion is switched off for this block.  Add manually.\r\n    code += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  do {\r\n    const conditionCode =\r\n      generator.valueToCode(block, 'IF' + n, Order.NONE) || 'false';\r\n    let branchCode = generator.statementToCode(block, 'DO' + n);\r\n    if (generator.STATEMENT_SUFFIX) {\r\n      branchCode =\r\n        generator.prefixLines(\r\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n          generator.INDENT,\r\n        ) + branchCode;\r\n    }\r\n    code +=\r\n      (n > 0 ? 'else' : '') + 'if ' + conditionCode + ' then\\n' + branchCode;\r\n    n++;\r\n  } while (block.getInput('IF' + n));\r\n\r\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\r\n    let branchCode = generator.statementToCode(block, 'ELSE');\r\n    if (generator.STATEMENT_SUFFIX) {\r\n      branchCode =\r\n        generator.prefixLines(\r\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n          generator.INDENT,\r\n        ) + branchCode;\r\n    }\r\n    code += 'else\\n' + branchCode;\r\n  }\r\n  return code + 'end\\n';\r\n}\r\n\r\nexport const controls_ifelse = controls_if;\r\n\r\nexport function logic_compare(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Comparison operator.\r\n  const OPERATORS = {\r\n    'EQ': '==',\r\n    'NEQ': '~=',\r\n    'LT': '<',\r\n    'LTE': '<=',\r\n    'GT': '>',\r\n    'GTE': '>=',\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('OP') as OperatorOption];\r\n  const argument0 = generator.valueToCode(block, 'A', Order.RELATIONAL) || '0';\r\n  const argument1 = generator.valueToCode(block, 'B', Order.RELATIONAL) || '0';\r\n  const code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, Order.RELATIONAL];\r\n}\r\n\r\nexport function logic_operation(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Operations 'and', 'or'.\r\n  const operator = block.getFieldValue('OP') === 'AND' ? 'and' : 'or';\r\n  const order = operator === 'and' ? Order.AND : Order.OR;\r\n  let argument0 = generator.valueToCode(block, 'A', order);\r\n  let argument1 = generator.valueToCode(block, 'B', order);\r\n  if (!argument0 && !argument1) {\r\n    // If there are no arguments, then the return value is false.\r\n    argument0 = 'false';\r\n    argument1 = 'false';\r\n  } else {\r\n    // Single missing arguments have no effect on the return value.\r\n    const defaultArgument = operator === 'and' ? 'true' : 'false';\r\n    if (!argument0) {\r\n      argument0 = defaultArgument;\r\n    }\r\n    if (!argument1) {\r\n      argument1 = defaultArgument;\r\n    }\r\n  }\r\n  const code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function logic_negate(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Negation.\r\n  const argument0 = generator.valueToCode(block, 'BOOL', Order.UNARY) || 'true';\r\n  const code = 'not ' + argument0;\r\n  return [code, Order.UNARY];\r\n}\r\n\r\nexport function logic_boolean(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Boolean values true and false.\r\n  const code = block.getFieldValue('BOOL') === 'TRUE' ? 'true' : 'false';\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function logic_null(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Null data type.\r\n  return ['nil', Order.ATOMIC];\r\n}\r\n\r\nexport function logic_ternary(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Ternary operator.\r\n  const value_if = generator.valueToCode(block, 'IF', Order.AND) || 'false';\r\n  const value_then = generator.valueToCode(block, 'THEN', Order.AND) || 'nil';\r\n  const value_else = generator.valueToCode(block, 'ELSE', Order.OR) || 'nil';\r\n  const code = value_if + ' and ' + value_then + ' or ' + value_else;\r\n  return [code, Order.OR];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2016 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Lua for loop blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Lua.loops\r\n\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport type {ControlFlowInLoopBlock} from '../../blocks/loops.js';\r\nimport type {LuaGenerator} from './lua_generator.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport {Order} from './lua_generator.js';\r\n\r\n/**\r\n * This is the text used to implement a <pre>continue</pre>.\r\n * It is also used to recognise <pre>continue</pre>s in generated code so that\r\n * the appropriate label can be put at the end of the loop body.\r\n */\r\nconst CONTINUE_STATEMENT = 'goto continue\\n';\r\n\r\n/**\r\n * If the loop body contains a \"goto continue\" statement, add a continue label\r\n * to the loop body. Slightly inefficient, as continue labels will be generated\r\n * in all outer loops, but this is safer than duplicating the logic of\r\n * blockToCode.\r\n *\r\n * @param branch Generated code of the loop body\r\n * @param indent Whitespace by which to indent a continue statement.\r\n * @returns Generated label or '' if unnecessary\r\n */\r\nfunction addContinueLabel(branch: string, indent: string): string {\r\n  if (branch.indexOf(CONTINUE_STATEMENT) !== -1) {\r\n    // False positives are possible (e.g. a string literal), but are harmless.\r\n    return branch + indent + '::continue::\\n';\r\n  } else {\r\n    return branch;\r\n  }\r\n}\r\n\r\nexport function controls_repeat_ext(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): string {\r\n  // Repeat n times.\r\n  let repeats;\r\n  if (block.getField('TIMES')) {\r\n    // Internal number.\r\n    repeats = String(Number(block.getFieldValue('TIMES')));\r\n  } else {\r\n    // External number.\r\n    repeats = generator.valueToCode(block, 'TIMES', Order.NONE) || '0';\r\n  }\r\n  if (stringUtils.isNumber(repeats)) {\r\n    repeats = parseInt(repeats, 10);\r\n  } else {\r\n    repeats = 'math.floor(' + repeats + ')';\r\n  }\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  branch = addContinueLabel(branch, generator.INDENT);\r\n  const loopVar = generator.nameDB_!.getDistinctName(\r\n    'count',\r\n    NameType.VARIABLE,\r\n  );\r\n  const code =\r\n    'for ' + loopVar + ' = 1, ' + repeats + ' do\\n' + branch + 'end\\n';\r\n  return code;\r\n}\r\n\r\nexport const controls_repeat = controls_repeat_ext;\r\n\r\nexport function controls_whileUntil(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): string {\r\n  // Do while/until loop.\r\n  const until = block.getFieldValue('MODE') === 'UNTIL';\r\n  let argument0 =\r\n    generator.valueToCode(block, 'BOOL', until ? Order.UNARY : Order.NONE) ||\r\n    'false';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  branch = addContinueLabel(branch, generator.INDENT);\r\n  if (until) {\r\n    argument0 = 'not ' + argument0;\r\n  }\r\n  return 'while ' + argument0 + ' do\\n' + branch + 'end\\n';\r\n}\r\n\r\nexport function controls_for(block: Block, generator: LuaGenerator): string {\r\n  // For loop.\r\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const startVar = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\r\n  const endVar = generator.valueToCode(block, 'TO', Order.NONE) || '0';\r\n  const increment = generator.valueToCode(block, 'BY', Order.NONE) || '1';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  branch = addContinueLabel(branch, generator.INDENT);\r\n  let code = '';\r\n  let incValue;\r\n  if (\r\n    stringUtils.isNumber(startVar) &&\r\n    stringUtils.isNumber(endVar) &&\r\n    stringUtils.isNumber(increment)\r\n  ) {\r\n    // All arguments are simple numbers.\r\n    const up = Number(startVar) <= Number(endVar);\r\n    const step = Math.abs(Number(increment));\r\n    incValue = (up ? '' : '-') + step;\r\n  } else {\r\n    code = '';\r\n    // Determine loop direction at start, in case one of the bounds\r\n    // changes during loop execution.\r\n    incValue = generator.nameDB_!.getDistinctName(\r\n      variable0 + '_inc',\r\n      NameType.VARIABLE,\r\n    );\r\n    code += incValue + ' = ';\r\n    if (stringUtils.isNumber(increment)) {\r\n      code += Math.abs(increment as unknown as number) + '\\n';\r\n    } else {\r\n      code += 'math.abs(' + increment + ')\\n';\r\n    }\r\n    code += 'if (' + startVar + ') > (' + endVar + ') then\\n';\r\n    code += generator.INDENT + incValue + ' = -' + incValue + '\\n';\r\n    code += 'end\\n';\r\n  }\r\n  code +=\r\n    'for ' + variable0 + ' = ' + startVar + ', ' + endVar + ', ' + incValue;\r\n  code += ' do\\n' + branch + 'end\\n';\r\n  return code;\r\n}\r\n\r\nexport function controls_forEach(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): string {\r\n  // For each loop.\r\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const argument0 = generator.valueToCode(block, 'LIST', Order.NONE) || '{}';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  branch = addContinueLabel(branch, generator.INDENT);\r\n  const code =\r\n    'for _, ' +\r\n    variable0 +\r\n    ' in ipairs(' +\r\n    argument0 +\r\n    ') do \\n' +\r\n    branch +\r\n    'end\\n';\r\n  return code;\r\n}\r\n\r\nexport function controls_flow_statements(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): string {\r\n  // Flow statements: continue, break.\r\n  let xfix = '';\r\n  if (generator.STATEMENT_PREFIX) {\r\n    // Automatic prefix insertion is switched off for this block.  Add manually.\r\n    xfix += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    // Inject any statement suffix here since the regular one at the end\r\n    // will not get executed if the break/continue is triggered.\r\n    xfix += generator.injectId(generator.STATEMENT_SUFFIX, block);\r\n  }\r\n  if (generator.STATEMENT_PREFIX) {\r\n    const loop = (block as ControlFlowInLoopBlock).getSurroundLoop();\r\n    if (loop && !loop.suppressPrefixSuffix) {\r\n      // Inject loop's statement prefix here since the regular one at the end\r\n      // of the loop will not get executed if 'continue' is triggered.\r\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\r\n      xfix += generator.injectId(generator.STATEMENT_PREFIX, loop);\r\n    }\r\n  }\r\n  switch (block.getFieldValue('FLOW')) {\r\n    case 'BREAK':\r\n      return xfix + 'break\\n';\r\n    case 'CONTINUE':\r\n      return xfix + CONTINUE_STATEMENT;\r\n  }\r\n  throw Error('Unknown flow statement.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2016 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Lua for math blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Lua.math\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {LuaGenerator} from './lua_generator.js';\r\nimport {Order} from './lua_generator.js';\r\n\r\nexport function math_number(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Numeric value.\r\n  const code = Number(block.getFieldValue('NUM'));\r\n  const order = code < 0 ? Order.UNARY : Order.ATOMIC;\r\n  return [String(code), order];\r\n}\r\n\r\nexport function math_arithmetic(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Basic arithmetic operators, and power.\r\n  const OPERATORS: Record<string, [string, Order]> = {\r\n    'ADD': [' + ', Order.ADDITIVE],\r\n    'MINUS': [' - ', Order.ADDITIVE],\r\n    'MULTIPLY': [' * ', Order.MULTIPLICATIVE],\r\n    'DIVIDE': [' / ', Order.MULTIPLICATIVE],\r\n    'POWER': [' ^ ', Order.EXPONENTIATION],\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const tuple = OPERATORS[block.getFieldValue('OP') as OperatorOption];\r\n  const operator = tuple[0];\r\n  const order = tuple[1];\r\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\r\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\r\n  const code = argument0 + operator + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function math_single(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Math operators with single operand.\r\n  const operator = block.getFieldValue('OP');\r\n  let arg;\r\n  if (operator === 'NEG') {\r\n    // Negation is a special case given its different operator precedence.\r\n    arg = generator.valueToCode(block, 'NUM', Order.UNARY) || '0';\r\n    return ['-' + arg, Order.UNARY];\r\n  }\r\n  if (operator === 'POW10') {\r\n    arg = generator.valueToCode(block, 'NUM', Order.EXPONENTIATION) || '0';\r\n    return ['10 ^ ' + arg, Order.EXPONENTIATION];\r\n  }\r\n  if (operator === 'ROUND') {\r\n    arg = generator.valueToCode(block, 'NUM', Order.ADDITIVE) || '0';\r\n  } else {\r\n    arg = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\r\n  }\r\n\r\n  let code;\r\n  switch (operator) {\r\n    case 'ABS':\r\n      code = 'math.abs(' + arg + ')';\r\n      break;\r\n    case 'ROOT':\r\n      code = 'math.sqrt(' + arg + ')';\r\n      break;\r\n    case 'LN':\r\n      code = 'math.log(' + arg + ')';\r\n      break;\r\n    case 'LOG10':\r\n      code = 'math.log(' + arg + ', 10)';\r\n      break;\r\n    case 'EXP':\r\n      code = 'math.exp(' + arg + ')';\r\n      break;\r\n    case 'ROUND':\r\n      // This rounds up.  Blockly does not specify rounding direction.\r\n      code = 'math.floor(' + arg + ' + .5)';\r\n      break;\r\n    case 'ROUNDUP':\r\n      code = 'math.ceil(' + arg + ')';\r\n      break;\r\n    case 'ROUNDDOWN':\r\n      code = 'math.floor(' + arg + ')';\r\n      break;\r\n    case 'SIN':\r\n      code = 'math.sin(math.rad(' + arg + '))';\r\n      break;\r\n    case 'COS':\r\n      code = 'math.cos(math.rad(' + arg + '))';\r\n      break;\r\n    case 'TAN':\r\n      code = 'math.tan(math.rad(' + arg + '))';\r\n      break;\r\n    case 'ASIN':\r\n      code = 'math.deg(math.asin(' + arg + '))';\r\n      break;\r\n    case 'ACOS':\r\n      code = 'math.deg(math.acos(' + arg + '))';\r\n      break;\r\n    case 'ATAN':\r\n      code = 'math.deg(math.atan(' + arg + '))';\r\n      break;\r\n    default:\r\n      throw Error('Unknown math operator: ' + operator);\r\n  }\r\n  return [code, Order.HIGH];\r\n}\r\n\r\nexport function math_constant(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\r\n  const CONSTANTS: Record<string, [string, Order]> = {\r\n    'PI': ['math.pi', Order.HIGH],\r\n    'E': ['math.exp(1)', Order.HIGH],\r\n    'GOLDEN_RATIO': ['(1 + math.sqrt(5)) / 2', Order.MULTIPLICATIVE],\r\n    'SQRT2': ['math.sqrt(2)', Order.HIGH],\r\n    'SQRT1_2': ['math.sqrt(1 / 2)', Order.HIGH],\r\n    'INFINITY': ['math.huge', Order.HIGH],\r\n  };\r\n  return CONSTANTS[block.getFieldValue('CONSTANT')];\r\n}\r\n\r\nexport function math_number_property(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Check if a number is even, odd, prime, whole, positive, or negative\r\n  // or if it is divisible by certain number. Returns true or false.\r\n  const PROPERTIES: Record<string, [string | null, Order, Order]> = {\r\n    'EVEN': [' % 2 == 0', Order.MULTIPLICATIVE, Order.RELATIONAL],\r\n    'ODD': [' % 2 == 1', Order.MULTIPLICATIVE, Order.RELATIONAL],\r\n    'WHOLE': [' % 1 == 0', Order.MULTIPLICATIVE, Order.RELATIONAL],\r\n    'POSITIVE': [' > 0', Order.RELATIONAL, Order.RELATIONAL],\r\n    'NEGATIVE': [' < 0', Order.RELATIONAL, Order.RELATIONAL],\r\n    'DIVISIBLE_BY': [null, Order.MULTIPLICATIVE, Order.RELATIONAL],\r\n    'PRIME': [null, Order.NONE, Order.HIGH],\r\n  };\r\n  const dropdownProperty = block.getFieldValue('PROPERTY');\r\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\r\n  const numberToCheck =\r\n    generator.valueToCode(block, 'NUMBER_TO_CHECK', inputOrder) || '0';\r\n  let code;\r\n  if (dropdownProperty === 'PRIME') {\r\n    // Prime is a special case as it is not a one-liner test.\r\n    const functionName = generator.provideFunction_(\r\n      'math_isPrime',\r\n      `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(n)\r\n  -- https://en.wikipedia.org/wiki/Primality_test#Naive_methods\r\n  if n == 2 or n == 3 then\r\n    return true\r\n  end\r\n  -- False if n is NaN, negative, is 1, or not whole.\r\n  -- And false if n is divisible by 2 or 3.\r\n  if not(n > 1) or n % 1 ~= 0 or n % 2 == 0 or n % 3 == 0 then\r\n    return false\r\n  end\r\n  -- Check all the numbers of form 6k +/- 1, up to sqrt(n).\r\n  for x = 6, math.sqrt(n) + 1.5, 6 do\r\n    if n % (x - 1) == 0 or n % (x + 1) == 0 then\r\n      return false\r\n    end\r\n  end\r\n  return true\r\nend\r\n`,\r\n    );\r\n    code = functionName + '(' + numberToCheck + ')';\r\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\r\n    const divisor =\r\n      generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATIVE) || '0';\r\n    // If 'divisor' is some code that evals to 0, generator will produce a nan.\r\n    // Let's produce nil if we can determine this at compile-time.\r\n    if (divisor === '0') {\r\n      return ['nil', Order.ATOMIC];\r\n    }\r\n    // The normal trick to implement ?: with and/or doesn't work here:\r\n    //   divisor == 0 and nil or number_to_check % divisor == 0\r\n    // because nil is false, so allow a runtime failure. :-(\r\n    code = numberToCheck + ' % ' + divisor + ' == 0';\r\n  } else {\r\n    code = numberToCheck + suffix;\r\n  }\r\n  return [code, outputOrder];\r\n}\r\n\r\nexport function math_change(block: Block, generator: LuaGenerator): string {\r\n  // Add to a variable in place.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'DELTA', Order.ADDITIVE) || '0';\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return varName + ' = ' + varName + ' + ' + argument0 + '\\n';\r\n}\r\n\r\n// Rounding functions have a single operand.\r\nexport const math_round = math_single;\r\n// Trigonometry functions have a single operand.\r\nexport const math_trig = math_single;\r\n\r\nexport function math_on_list(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Math functions for lists.\r\n  const func = block.getFieldValue('OP');\r\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '{}';\r\n  let functionName;\r\n\r\n  // Functions needed in more than one case.\r\n  function provideSum() {\r\n    return generator.provideFunction_(\r\n      'math_sum',\r\n      `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\r\n  local result = 0\r\n  for _, v in ipairs(t) do\r\n    result = result + v\r\n  end\r\n  return result\r\nend\r\n`,\r\n    );\r\n  }\r\n\r\n  switch (func) {\r\n    case 'SUM':\r\n      functionName = provideSum();\r\n      break;\r\n\r\n    case 'MIN':\r\n      // Returns 0 for the empty list.\r\n      functionName = generator.provideFunction_(\r\n        'math_min',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\r\n  if #t == 0 then\r\n    return 0\r\n  end\r\n  local result = math.huge\r\n  for _, v in ipairs(t) do\r\n    if v < result then\r\n      result = v\r\n    end\r\n  end\r\n  return result\r\nend\r\n`,\r\n      );\r\n      break;\r\n\r\n    case 'AVERAGE':\r\n      // Returns 0 for the empty list.\r\n      functionName = generator.provideFunction_(\r\n        'math_average',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\r\n  if #t == 0 then\r\n    return 0\r\n  end\r\n  return ${provideSum()}(t) / #t\r\nend\r\n`,\r\n      );\r\n      break;\r\n\r\n    case 'MAX':\r\n      // Returns 0 for the empty list.\r\n      functionName = generator.provideFunction_(\r\n        'math_max',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\r\n  if #t == 0 then\r\n    return 0\r\n  end\r\n  local result = -math.huge\r\n  for _, v in ipairs(t) do\r\n    if v > result then\r\n      result = v\r\n    end\r\n  end\r\n  return result\r\nend\r\n`,\r\n      );\r\n      break;\r\n\r\n    case 'MEDIAN':\r\n      // This operation excludes non-numbers.\r\n      functionName = generator.provideFunction_(\r\n        'math_median',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\r\n  -- Source: http://lua-users.org/wiki/SimpleStats\r\n  if #t == 0 then\r\n    return 0\r\n  end\r\n  local temp = {}\r\n  for _, v in ipairs(t) do\r\n    if type(v) == 'number' then\r\n      table.insert(temp, v)\r\n    end\r\n  end\r\n  table.sort(temp)\r\n  if #temp % 2 == 0 then\r\n    return (temp[#temp / 2] + temp[(#temp / 2) + 1]) / 2\r\n  else\r\n    return temp[math.ceil(#temp / 2)]\r\n  end\r\nend\r\n`,\r\n      );\r\n      break;\r\n\r\n    case 'MODE':\r\n      // As a list of numbers can contain more than one mode,\r\n      // the returned result is provided as an array.\r\n      // The generator version includes non-numbers.\r\n      functionName = generator.provideFunction_(\r\n        'math_modes',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\r\n  -- Source: http://lua-users.org/wiki/SimpleStats\r\n  local counts = {}\r\n  for _, v in ipairs(t) do\r\n    if counts[v] == nil then\r\n      counts[v] = 1\r\n    else\r\n      counts[v] = counts[v] + 1\r\n    end\r\n  end\r\n  local biggestCount = 0\r\n  for _, v  in pairs(counts) do\r\n    if v > biggestCount then\r\n      biggestCount = v\r\n    end\r\n  end\r\n  local temp = {}\r\n  for k, v in pairs(counts) do\r\n    if v == biggestCount then\r\n      table.insert(temp, k)\r\n    end\r\n  end\r\n  return temp\r\nend\r\n`,\r\n      );\r\n      break;\r\n\r\n    case 'STD_DEV':\r\n      functionName = generator.provideFunction_(\r\n        'math_standard_deviation',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\r\n  local m\r\n  local vm\r\n  local total = 0\r\n  local count = 0\r\n  local result\r\n  m = #t == 0 and 0 or ${provideSum()}(t) / #t\r\n  for _, v in ipairs(t) do\r\n    if type(v) == 'number' then\r\n      vm = v - m\r\n      total = total + (vm * vm)\r\n      count = count + 1\r\n    end\r\n  end\r\n  result = math.sqrt(total / (count-1))\r\n  return result\r\nend\r\n`,\r\n      );\r\n      break;\r\n\r\n    case 'RANDOM':\r\n      functionName = generator.provideFunction_(\r\n        'math_random_list',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\r\n  if #t == 0 then\r\n    return nil\r\n  end\r\n  return t[math.random(#t)]\r\nend\r\n`,\r\n      );\r\n      break;\r\n\r\n    default:\r\n      throw Error('Unknown operator: ' + func);\r\n  }\r\n  return [functionName + '(' + list + ')', Order.HIGH];\r\n}\r\n\r\nexport function math_modulo(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Remainder computation.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'DIVIDEND', Order.MULTIPLICATIVE) || '0';\r\n  const argument1 =\r\n    generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATIVE) || '0';\r\n  const code = argument0 + ' % ' + argument1;\r\n  return [code, Order.MULTIPLICATIVE];\r\n}\r\n\r\nexport function math_constrain(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Constrain a number between two limits.\r\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\r\n  const argument1 =\r\n    generator.valueToCode(block, 'LOW', Order.NONE) || '-math.huge';\r\n  const argument2 =\r\n    generator.valueToCode(block, 'HIGH', Order.NONE) || 'math.huge';\r\n  const code =\r\n    'math.min(math.max(' +\r\n    argument0 +\r\n    ', ' +\r\n    argument1 +\r\n    '), ' +\r\n    argument2 +\r\n    ')';\r\n  return [code, Order.HIGH];\r\n}\r\n\r\nexport function math_random_int(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Random integer between [X] and [Y].\r\n  const argument0 = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'TO', Order.NONE) || '0';\r\n  const code = 'math.random(' + argument0 + ', ' + argument1 + ')';\r\n  return [code, Order.HIGH];\r\n}\r\n\r\nexport function math_random_float(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Random fraction between 0 and 1.\r\n  return ['math.random()', Order.HIGH];\r\n}\r\n\r\nexport function math_atan2(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\r\n  const argument0 = generator.valueToCode(block, 'X', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'Y', Order.NONE) || '0';\r\n  return [\r\n    'math.deg(math.atan2(' + argument1 + ', ' + argument0 + '))',\r\n    Order.HIGH,\r\n  ];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2016 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Lua for procedure blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Lua.procedures\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {IfReturnBlock} from '../../blocks/procedures.js';\r\nimport type {LuaGenerator} from './lua_generator.js';\r\nimport {Order} from './lua_generator.js';\r\n\r\nexport function procedures_defreturn(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): null {\r\n  // Define a procedure with a return value.\r\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\r\n  let xfix1 = '';\r\n  if (generator.STATEMENT_PREFIX) {\r\n    xfix1 += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    xfix1 += generator.injectId(generator.STATEMENT_SUFFIX, block);\r\n  }\r\n  if (xfix1) {\r\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\r\n  }\r\n  let loopTrap = '';\r\n  if (generator.INFINITE_LOOP_TRAP) {\r\n    loopTrap = generator.prefixLines(\r\n      generator.injectId(generator.INFINITE_LOOP_TRAP, block),\r\n      generator.INDENT,\r\n    );\r\n  }\r\n  let branch = generator.statementToCode(block, 'STACK');\r\n  let returnValue = generator.valueToCode(block, 'RETURN', Order.NONE) || '';\r\n  let xfix2 = '';\r\n  if (branch && returnValue) {\r\n    // After executing the function body, revisit this block for the return.\r\n    xfix2 = xfix1;\r\n  }\r\n  if (returnValue) {\r\n    returnValue = generator.INDENT + 'return ' + returnValue + '\\n';\r\n  } else if (!branch) {\r\n    branch = '';\r\n  }\r\n  const args = [];\r\n  const variables = block.getVars();\r\n  for (let i = 0; i < variables.length; i++) {\r\n    args[i] = generator.getVariableName(variables[i]);\r\n  }\r\n  let code =\r\n    'function ' +\r\n    funcName +\r\n    '(' +\r\n    args.join(', ') +\r\n    ')\\n' +\r\n    xfix1 +\r\n    loopTrap +\r\n    branch +\r\n    xfix2 +\r\n    returnValue +\r\n    'end\\n';\r\n  code = generator.scrub_(block, code);\r\n  // Add % so as not to collide with helper functions in definitions list.\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['%' + funcName] = code;\r\n  return null;\r\n}\r\n\r\n// Defining a procedure without a return value uses the same generator as\r\n// a procedure with a return value.\r\nexport const procedures_defnoreturn = procedures_defreturn;\r\n\r\nexport function procedures_callreturn(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Call a procedure with a return value.\r\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\r\n  const args = [];\r\n  const variables = block.getVars();\r\n  for (let i = 0; i < variables.length; i++) {\r\n    args[i] = generator.valueToCode(block, 'ARG' + i, Order.NONE) || 'nil';\r\n  }\r\n  const code = funcName + '(' + args.join(', ') + ')';\r\n  return [code, Order.HIGH];\r\n}\r\n\r\nexport function procedures_callnoreturn(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): string {\r\n  // Call a procedure with no return value.\r\n  // Generated code is for a function call as a statement is the same as a\r\n  // function call as a value, with the addition of line ending.\r\n  const tuple = generator.forBlock['procedures_callreturn'](\r\n    block,\r\n    generator,\r\n  ) as [string, number];\r\n  return tuple[0] + '\\n';\r\n}\r\n\r\nexport function procedures_ifreturn(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): string {\r\n  // Conditionally return value from a procedure.\r\n  const condition =\r\n    generator.valueToCode(block, 'CONDITION', Order.NONE) || 'false';\r\n  let code = 'if ' + condition + ' then\\n';\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    // Inject any statement suffix here since the regular one at the end\r\n    // will not get executed if the return is triggered.\r\n    code += generator.prefixLines(\r\n      generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n      generator.INDENT,\r\n    );\r\n  }\r\n  if ((block as IfReturnBlock).hasReturnValue_) {\r\n    const value = generator.valueToCode(block, 'VALUE', Order.NONE) || 'nil';\r\n    code += generator.INDENT + 'return ' + value + '\\n';\r\n  } else {\r\n    code += generator.INDENT + 'return\\n';\r\n  }\r\n  code += 'end\\n';\r\n  return code;\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2016 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Lua for text blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Lua.texts\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {JoinMutatorBlock} from '../../blocks/text.js';\r\nimport type {LuaGenerator} from './lua_generator.js';\r\nimport {Order} from './lua_generator.js';\r\n\r\nexport function text(block: Block, generator: LuaGenerator): [string, Order] {\r\n  // Text value.\r\n  const code = generator.quote_(block.getFieldValue('TEXT'));\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function text_multiline(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Text value.\r\n  const code = generator.multiline_quote_(block.getFieldValue('TEXT'));\r\n  const order = code.indexOf('..') !== -1 ? Order.CONCATENATION : Order.ATOMIC;\r\n  return [code, order];\r\n}\r\n\r\nexport function text_join(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  const joinBlock = block as JoinMutatorBlock;\r\n  // Create a string made up of any number of elements of any type.\r\n  if (joinBlock.itemCount_ === 0) {\r\n    return [\"''\", Order.ATOMIC];\r\n  } else if (joinBlock.itemCount_ === 1) {\r\n    const element = generator.valueToCode(block, 'ADD0', Order.NONE) || \"''\";\r\n    const code = 'tostring(' + element + ')';\r\n    return [code, Order.HIGH];\r\n  } else if (joinBlock.itemCount_ === 2) {\r\n    const element0 =\r\n      generator.valueToCode(block, 'ADD0', Order.CONCATENATION) || \"''\";\r\n    const element1 =\r\n      generator.valueToCode(block, 'ADD1', Order.CONCATENATION) || \"''\";\r\n    const code = element0 + ' .. ' + element1;\r\n    return [code, Order.CONCATENATION];\r\n  } else {\r\n    const elements = [];\r\n    for (let i = 0; i < joinBlock.itemCount_; i++) {\r\n      elements[i] = generator.valueToCode(block, 'ADD' + i, Order.NONE) || \"''\";\r\n    }\r\n    const code = 'table.concat({' + elements.join(', ') + '})';\r\n    return [code, Order.HIGH];\r\n  }\r\n}\r\n\r\nexport function text_append(block: Block, generator: LuaGenerator): string {\r\n  // Append to a variable in place.\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const value =\r\n    generator.valueToCode(block, 'TEXT', Order.CONCATENATION) || \"''\";\r\n  return varName + ' = ' + varName + ' .. ' + value + '\\n';\r\n}\r\n\r\nexport function text_length(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // String or array length.\r\n  const text = generator.valueToCode(block, 'VALUE', Order.UNARY) || \"''\";\r\n  return ['#' + text, Order.UNARY];\r\n}\r\n\r\nexport function text_isEmpty(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Is the string null or array empty?\r\n  const text = generator.valueToCode(block, 'VALUE', Order.UNARY) || \"''\";\r\n  return ['#' + text + ' == 0', Order.RELATIONAL];\r\n}\r\n\r\nexport function text_indexOf(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Search the text for a substring.\r\n  const substring = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\r\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\r\n  let functionName;\r\n  if (block.getFieldValue('END') === 'FIRST') {\r\n    functionName = generator.provideFunction_(\r\n      'firstIndexOf',\r\n      `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str, substr)\r\n  local i = string.find(str, substr, 1, true)\r\n  if i == nil then\r\n    return 0\r\n  end\r\n  return i\r\nend\r\n`,\r\n    );\r\n  } else {\r\n    functionName = generator.provideFunction_(\r\n      'lastIndexOf',\r\n      `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str, substr)\r\n  local i = string.find(string.reverse(str), string.reverse(substr), 1, true)\r\n  if i then\r\n    return #str + 2 - i - #substr\r\n  end\r\n  return 0\r\nend\r\n`,\r\n    );\r\n  }\r\n  const code = functionName + '(' + text + ', ' + substring + ')';\r\n  return [code, Order.HIGH];\r\n}\r\n\r\nexport function text_charAt(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Get letter at index.\r\n  // Note: Until January 2013 this block did not have the WHERE input.\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  const atOrder = where === 'FROM_END' ? Order.UNARY : Order.NONE;\r\n  const at = generator.valueToCode(block, 'AT', atOrder) || '1';\r\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\r\n  let code;\r\n  if (where === 'RANDOM') {\r\n    const functionName = generator.provideFunction_(\r\n      'text_random_letter',\r\n      `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str)\r\n  local index = math.random(string.len(str))\r\n  return string.sub(str, index, index)\r\nend\r\n`,\r\n    );\r\n    code = functionName + '(' + text + ')';\r\n  } else {\r\n    let start;\r\n    if (where === 'FIRST') {\r\n      start = '1';\r\n    } else if (where === 'LAST') {\r\n      start = '-1';\r\n    } else {\r\n      if (where === 'FROM_START') {\r\n        start = at;\r\n      } else if (where === 'FROM_END') {\r\n        start = '-' + at;\r\n      } else {\r\n        throw Error('Unhandled option (text_charAt).');\r\n      }\r\n    }\r\n    if (start.match(/^-?\\w*$/)) {\r\n      code = 'string.sub(' + text + ', ' + start + ', ' + start + ')';\r\n    } else {\r\n      // use function to avoid reevaluation\r\n      const functionName = generator.provideFunction_(\r\n        'text_char_at',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str, index)\r\n  return string.sub(str, index, index)\r\nend\r\n`,\r\n      );\r\n      code = functionName + '(' + text + ', ' + start + ')';\r\n    }\r\n  }\r\n  return [code, Order.HIGH];\r\n}\r\n\r\nexport function text_getSubstring(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Get substring.\r\n  const text = generator.valueToCode(block, 'STRING', Order.NONE) || \"''\";\r\n\r\n  // Get start index.\r\n  const where1 = block.getFieldValue('WHERE1');\r\n  const at1Order = where1 === 'FROM_END' ? Order.UNARY : Order.NONE;\r\n  const at1 = generator.valueToCode(block, 'AT1', at1Order) || '1';\r\n  let start;\r\n  if (where1 === 'FIRST') {\r\n    start = 1;\r\n  } else if (where1 === 'FROM_START') {\r\n    start = at1;\r\n  } else if (where1 === 'FROM_END') {\r\n    start = '-' + at1;\r\n  } else {\r\n    throw Error('Unhandled option (text_getSubstring)');\r\n  }\r\n\r\n  // Get end index.\r\n  const where2 = block.getFieldValue('WHERE2');\r\n  const at2Order = where2 === 'FROM_END' ? Order.UNARY : Order.NONE;\r\n  const at2 = generator.valueToCode(block, 'AT2', at2Order) || '1';\r\n  let end;\r\n  if (where2 === 'LAST') {\r\n    end = -1;\r\n  } else if (where2 === 'FROM_START') {\r\n    end = at2;\r\n  } else if (where2 === 'FROM_END') {\r\n    end = '-' + at2;\r\n  } else {\r\n    throw Error('Unhandled option (text_getSubstring)');\r\n  }\r\n  const code = 'string.sub(' + text + ', ' + start + ', ' + end + ')';\r\n  return [code, Order.HIGH];\r\n}\r\n\r\nexport function text_changeCase(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Change capitalization.\r\n  const operator = block.getFieldValue('CASE');\r\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  let functionName;\r\n  if (operator === 'UPPERCASE') {\r\n    functionName = 'string.upper';\r\n  } else if (operator === 'LOWERCASE') {\r\n    functionName = 'string.lower';\r\n  } else if (operator === 'TITLECASE') {\r\n    // There are shorter versions at\r\n    // http://lua-users.org/wiki/SciteTitleCase\r\n    // that do not preserve whitespace.\r\n    functionName = generator.provideFunction_(\r\n      'text_titlecase',\r\n      `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str)\r\n  local buf = {}\r\n  local inWord = false\r\n  for i = 1, #str do\r\n    local c = string.sub(str, i, i)\r\n    if inWord then\r\n      table.insert(buf, string.lower(c))\r\n      if string.find(c, \"%s\") then\r\n        inWord = false\r\n      end\r\n    else\r\n      table.insert(buf, string.upper(c))\r\n      inWord = true\r\n    end\r\n  end\r\n  return table.concat(buf)\r\nend\r\n`,\r\n    );\r\n  }\r\n  const code = functionName + '(' + text + ')';\r\n  return [code, Order.HIGH];\r\n}\r\n\r\nexport function text_trim(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Trim spaces.\r\n  const OPERATORS = {LEFT: '^%s*(,-)', RIGHT: '(.-)%s*$', BOTH: '^%s*(.-)%s*$'};\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('MODE') as OperatorOption];\r\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  const code = 'string.gsub(' + text + ', \"' + operator + '\", \"%1\")';\r\n  return [code, Order.HIGH];\r\n}\r\n\r\nexport function text_print(block: Block, generator: LuaGenerator): string {\r\n  // Print statement.\r\n  const msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  return 'print(' + msg + ')\\n';\r\n}\r\n\r\nexport function text_prompt_ext(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Prompt function.\r\n  let msg;\r\n  if (block.getField('TEXT')) {\r\n    // Internal message.\r\n    msg = generator.quote_(block.getFieldValue('TEXT'));\r\n  } else {\r\n    // External message.\r\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  }\r\n\r\n  const functionName = generator.provideFunction_(\r\n    'text_prompt',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(msg)\r\n  io.write(msg)\r\n  io.flush()\r\n  return io.read()\r\nend\r\n`,\r\n  );\r\n  let code = functionName + '(' + msg + ')';\r\n\r\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\r\n  if (toNumber) {\r\n    code = 'tonumber(' + code + ', 10)';\r\n  }\r\n  return [code, Order.HIGH];\r\n}\r\n\r\nexport const text_prompt = text_prompt_ext;\r\n\r\nexport function text_count(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  const sub = generator.valueToCode(block, 'SUB', Order.NONE) || \"''\";\r\n  const functionName = generator.provideFunction_(\r\n    'text_count',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle)\r\n  if #needle == 0 then\r\n    return #haystack + 1\r\n  end\r\n  local i = 1\r\n  local count = 0\r\n  while true do\r\n    i = string.find(haystack, needle, i, true)\r\n    if i == nil then\r\n      break\r\n    end\r\n    count = count + 1\r\n    i = i + #needle\r\n  end\r\n  return count\r\nend\r\n`,\r\n  );\r\n  const code = functionName + '(' + text + ', ' + sub + ')';\r\n  return [code, Order.HIGH];\r\n}\r\n\r\nexport function text_replace(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  const from = generator.valueToCode(block, 'FROM', Order.NONE) || \"''\";\r\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\r\n  const functionName = generator.provideFunction_(\r\n    'text_replace',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle, replacement)\r\n  local buf = {}\r\n  local i = 1\r\n  while i <= #haystack do\r\n    if string.sub(haystack, i, i + #needle - 1) == needle then\r\n      for j = 1, #replacement do\r\n        table.insert(buf, string.sub(replacement, j, j))\r\n      end\r\n      i = i + #needle\r\n    else\r\n      table.insert(buf, string.sub(haystack, i, i))\r\n      i = i + 1\r\n    end\r\n  end\r\n  return table.concat(buf)\r\nend\r\n`,\r\n  );\r\n  const code = functionName + '(' + text + ', ' + from + ', ' + to + ')';\r\n  return [code, Order.HIGH];\r\n}\r\n\r\nexport function text_reverse(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  const code = 'string.reverse(' + text + ')';\r\n  return [code, Order.HIGH];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2016 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Lua for variable blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Lua.variables\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {LuaGenerator} from './lua_generator.js';\r\nimport {Order} from './lua_generator.js';\r\n\r\nexport function variables_get(\r\n  block: Block,\r\n  generator: LuaGenerator,\r\n): [string, Order] {\r\n  // Variable getter.\r\n  const code = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function variables_set(block: Block, generator: LuaGenerator): string {\r\n  // Variable setter.\r\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return varName + ' = ' + argument0 + '\\n';\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2016 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Lua code generator class, including helper methods for\r\n * generating Lua for blocks.\r\n *\r\n * Based on Ellen Spertus's blocky-lua project.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Lua\r\n\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport {CodeGenerator} from '../../core/generator.js';\r\nimport {Names} from '../../core/names.js';\r\nimport type {Workspace} from '../../core/workspace.js';\r\nimport {inputTypes} from '../../core/inputs/input_types.js';\r\n\r\n/**\r\n * Order of operation ENUMs.\r\n * http://www.lua.org/manual/5.3/manual.html#3.4.8\r\n */\r\n// prettier-ignore\r\nexport enum Order {\r\n  ATOMIC = 0,    // literals\r\n  // The next level was not explicit in documentation and inferred by Ellen.\r\n  HIGH = 1,            // Function calls, tables[]\r\n  EXPONENTIATION = 2,  // ^\r\n  UNARY = 3,           // not # - ~\r\n  MULTIPLICATIVE = 4,  // * / %\r\n  ADDITIVE = 5,        // + -\r\n  CONCATENATION = 6,   // ..\r\n  RELATIONAL = 7,      // < > <=  >= ~= ==\r\n  AND = 8,             // and\r\n  OR = 9,              // or\r\n  NONE = 99,\r\n}\r\n\r\n/**\r\n * Lua code generator class.\r\n *\r\n * Note: Lua is not supporting zero-indexing since the language itself is\r\n * one-indexed, so the generator does not repoct the oneBasedIndex configuration\r\n * option used for lists and text.\r\n */\r\nexport class LuaGenerator extends CodeGenerator {\r\n  constructor(name = 'Lua') {\r\n    super(name);\r\n    this.isInitialized = false;\r\n\r\n    // Copy Order values onto instance for backwards compatibility\r\n    // while ensuring they are not part of the publically-advertised\r\n    // API.\r\n    //\r\n    // TODO(#7085): deprecate these in due course.  (Could initially\r\n    // replace data properties with get accessors that call\r\n    // deprecate.warn().)\r\n    for (const key in Order) {\r\n      // Must assign Order[key] to a temporary to get the type guard to work;\r\n      // see https://github.com/microsoft/TypeScript/issues/10530.\r\n      const value = Order[key];\r\n      // Skip reverse-lookup entries in the enum.  Due to\r\n      // https://github.com/microsoft/TypeScript/issues/55713 this (as\r\n      // of TypeScript 5.5.2) actually narrows the type of value to\r\n      // never - but that still allows the following assignment to\r\n      // succeed.\r\n      if (typeof value === 'string') continue;\r\n      (this as unknown as Record<string, Order>)['ORDER_' + key] = value;\r\n    }\r\n\r\n    // List of illegal variable names.  This is not intended to be a\r\n    // security feature.  Blockly is 100% client-side, so bypassing\r\n    // this list is trivial.  This is intended to prevent users from\r\n    // accidentally clobbering a built-in object or function.\r\n    this.addReservedWords(\r\n      // Special character\r\n      '_,' +\r\n        // From theoriginalbit's script:\r\n        // https://github.com/espertus/blockly-lua/issues/6\r\n        '__inext,assert,bit,colors,colours,coroutine,disk,dofile,error,fs,' +\r\n        'fetfenv,getmetatable,gps,help,io,ipairs,keys,loadfile,loadstring,math,' +\r\n        'native,next,os,paintutils,pairs,parallel,pcall,peripheral,print,' +\r\n        'printError,rawequal,rawget,rawset,read,rednet,redstone,rs,select,' +\r\n        'setfenv,setmetatable,sleep,string,table,term,textutils,tonumber,' +\r\n        'tostring,turtle,type,unpack,vector,write,xpcall,_VERSION,__indext,' +\r\n        // Not included in the script, probably because it wasn't enabled:\r\n        'HTTP,' +\r\n        // Keywords (http://www.lua.org/pil/1.3.html).\r\n        'and,break,do,else,elseif,end,false,for,function,if,in,local,nil,not,' +\r\n        'or,repeat,return,then,true,until,while,' +\r\n        // Metamethods (http://www.lua.org/manual/5.2/manual.html).\r\n        'add,sub,mul,div,mod,pow,unm,concat,len,eq,lt,le,index,newindex,call,' +\r\n        // Basic functions (http://www.lua.org/manual/5.2/manual.html,\r\n        // section 6.1).\r\n        'assert,collectgarbage,dofile,error,_G,getmetatable,inpairs,load,' +\r\n        'loadfile,next,pairs,pcall,print,rawequal,rawget,rawlen,rawset,select,' +\r\n        'setmetatable,tonumber,tostring,type,_VERSION,xpcall,' +\r\n        // Modules (http://www.lua.org/manual/5.2/manual.html, section 6.3).\r\n        'require,package,string,table,math,bit32,io,file,os,debug',\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Initialise the database of variable names.\r\n   *\r\n   * @param workspace Workspace to generate code from.\r\n   */\r\n  init(workspace: Workspace) {\r\n    // Call Blockly.CodeGenerator's init.\r\n    super.init(workspace);\r\n\r\n    if (!this.nameDB_) {\r\n      this.nameDB_ = new Names(this.RESERVED_WORDS_);\r\n    } else {\r\n      this.nameDB_.reset();\r\n    }\r\n    this.nameDB_.setVariableMap(workspace.getVariableMap());\r\n    this.nameDB_.populateVariables(workspace);\r\n    this.nameDB_.populateProcedures(workspace);\r\n\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  /**\r\n   * Prepend the generated code with the variable definitions.\r\n   *\r\n   * @param code Generated code.\r\n   * @returns Completed code.\r\n   */\r\n  finish(code: string): string {\r\n    // Convert the definitions dictionary into a list.\r\n    const definitions = Object.values(this.definitions_);\r\n    // Call Blockly.CodeGenerator's finish.\r\n    code = super.finish(code);\r\n    this.isInitialized = false;\r\n\r\n    this.nameDB_!.reset();\r\n    return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\r\n  }\r\n\r\n  /**\r\n   * Naked values are top-level blocks with outputs that aren't plugged into\r\n   * anything. In Lua, an expression is not a legal statement, so we must assign\r\n   * the value to the (conventionally ignored) _.\r\n   * http://lua-users.org/wiki/ExpressionsAsStatements\r\n   *\r\n   * @param line Line of generated code.\r\n   * @return Legal line of code.\r\n   */\r\n  scrubNakedValue(line: string): string {\r\n    return 'local _ = ' + line + '\\n';\r\n  }\r\n\r\n  /**\r\n   * Encode a string as a properly escaped Lua string, complete with\r\n   * quotes.\r\n   *\r\n   * @param string Text to encode.\r\n   * @returns Lua string.\r\n   */\r\n  quote_(string: string): string {\r\n    string = string\r\n      .replace(/\\\\/g, '\\\\\\\\')\r\n      .replace(/\\n/g, '\\\\\\n')\r\n      .replace(/'/g, \"\\\\'\");\r\n    return \"'\" + string + \"'\";\r\n  }\r\n\r\n  /**\r\n   * Encode a string as a properly escaped multiline Lua string, complete with\r\n   * quotes.\r\n   *\r\n   * @param string Text to encode.\r\n   * @returns Lua string.\r\n   */\r\n  multiline_quote_(string: string): string {\r\n    const lines = string.split(/\\n/g).map(this.quote_);\r\n    // Join with the following, plus a newline:\r\n    // .. '\\n' ..\r\n    return lines.join(\" .. '\\\\n' ..\\n\");\r\n  }\r\n\r\n  /**\r\n   * Common tasks for generating Lua from blocks.\r\n   * Handles comments for the specified block and any connected value blocks.\r\n   * Calls any statements following this block.\r\n   * @param block The current block.\r\n   * @param code The Lua code created for this block.\r\n   * @param thisOnly True to generate code for only this statement.\r\n   * @returns Lua code with comments and subsequent blocks added.\r\n   */\r\n  scrub_(block: Block, code: string, thisOnly = false): string {\r\n    let commentCode = '';\r\n    // Only collect comments for blocks that aren't inline.\r\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\r\n      // Collect comment for this block.\r\n      let comment = block.getCommentText();\r\n      if (comment) {\r\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\r\n        commentCode += this.prefixLines(comment, '-- ') + '\\n';\r\n      }\r\n      // Collect comments for all value arguments.\r\n      // Don't collect comments for nested statements.\r\n      for (let i = 0; i < block.inputList.length; i++) {\r\n        if (block.inputList[i].type === inputTypes.VALUE) {\r\n          const childBlock = block.inputList[i].connection!.targetBlock();\r\n          if (childBlock) {\r\n            comment = this.allNestedComments(childBlock);\r\n            if (comment) {\r\n              commentCode += this.prefixLines(comment, '-- ');\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const nextBlock =\r\n      block.nextConnection && block.nextConnection.targetBlock();\r\n    const nextCode = thisOnly ? '' : this.blockToCode(nextBlock);\r\n    return commentCode + code + nextCode;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Lua for dynamic variable blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Lua.variablesDynamic\r\n\r\n// Lua is dynamically typed.\r\nexport {\r\n  variables_get as variables_get_dynamic,\r\n  variables_set as variables_set_dynamic,\r\n} from './variables.js';\r\n","/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Complete helper functions for generating Lua for\r\n *     blocks.  This is the entrypoint for lua_compressed.js.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Lua.all\r\n\r\nimport {LuaGenerator} from './lua/lua_generator.js';\r\nimport * as colour from './lua/colour.js';\r\nimport * as lists from './lua/lists.js';\r\nimport * as logic from './lua/logic.js';\r\nimport * as loops from './lua/loops.js';\r\nimport * as math from './lua/math.js';\r\nimport * as procedures from './lua/procedures.js';\r\nimport * as text from './lua/text.js';\r\nimport * as variables from './lua/variables.js';\r\nimport * as variablesDynamic from './lua/variables_dynamic.js';\r\n\r\nexport * from './lua/lua_generator.js';\r\n\r\n/**\r\n * Lua code generator instance.\r\n */\r\nexport const luaGenerator = new LuaGenerator();\r\n\r\n// Install per-block-type generator functions:\r\nconst generators: typeof luaGenerator.forBlock = {\r\n  ...colour,\r\n  ...lists,\r\n  ...logic,\r\n  ...loops,\r\n  ...math,\r\n  ...procedures,\r\n  ...text,\r\n  ...variables,\r\n  ...variablesDynamic,\r\n};\r\nfor (const name in generators) {\r\n  luaGenerator.forBlock[name] = generators[name];\r\n}\r\n"]}