{"version":3,"sources":["generators/javascript/colour.ts","generators/javascript/lists.ts","generators/javascript/logic.ts","generators/javascript/loops.ts","generators/javascript/math.ts","generators/javascript/procedures.ts","generators/javascript/text.ts","generators/javascript/variables.ts","generators/javascript/javascript_generator.ts","generators/javascript/variables_dynamic.ts","generators/javascript.ts"],"names":["colour_picker","block","generator","quote_","code","getFieldValue","Order","ATOMIC","colour_random","provideFunction_","functionName","FUNCTION_NAME_PLACEHOLDER_","FUNCTION_CALL","colour_rgb","red","valueToCode","NONE","green","blue","colour_blend","c1","c2","ratio","lists_create_empty","lists_create_with","elements","Array","itemCount_","i","join","lists_repeat","element","repeatCount","lists_length","MEMBER","lists_isEmpty","LOGICAL_NOT","lists_indexOf","operator","item","workspace","options","oneBasedIndex","ADDITION","lists_getIndex","mode","where","list","listOrder","at","getAdjusted","Error","lists_setIndex","cacheList","match","listVar","nameDB_","getDistinctName","NameType","VARIABLE","value","ASSIGNMENT","SUBTRACTION","xVar","lists_getSublist","wherePascalCase","where1","where2","at1","at2","at1Param","at2Param","getSubstringIndex","lists_sort","direction","type","getCompareFunctionName","lists_split","input","delimiter","lists_reverse","controls_if","n","STATEMENT_PREFIX","injectId","conditionCode","branchCode","statementToCode","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","logic_compare","OPERATORS","order","EQUALITY","RELATIONAL","argument0","argument1","logic_operation","LOGICAL_AND","LOGICAL_OR","defaultArgument","logic_negate","logic_boolean","logic_null","logic_ternary","value_if","CONDITIONAL","value_then","value_else","controls_repeat_ext","repeats","getField","String","Number","branch","addLoopTrap","loopVar","endVar","isNumber","controls_whileUntil","until","controls_for","variable0","getVariableName","increment","up","step","Math","abs","startVar","incVar","controls_forEach","indexVar","controls_flow_statements","xfix","loop","getSurroundLoop","suppressPrefixSuffix","math_number","number","UNARY_NEGATION","math_arithmetic","tuple","MULTIPLICATION","DIVISION","math_single","arg","math_constant","CONSTANTS","math_number_property","PROPERTIES","MODULUS","dropdownProperty","suffix","inputOrder","outputOrder","numberToCheck","divisor","math_change","varName","math_on_list","func","math_modulo","math_constrain","argument2","math_random_int","math_random_float","math_atan2","procedures_defreturn","funcName","getProcedureName","xfix1","loopTrap","INFINITE_LOOP_TRAP","returnValue","xfix2","args","variables","getVars","length","scrub_","definitions_","procedures_callreturn","procedures_callnoreturn","forBlock","procedures_ifreturn","hasReturnValue_","text","text_multiline","multiline_quote_","indexOf","text_join","codeAndOrder","forceString","element0","element1","text_append","text_length","text_isEmpty","text_indexOf","substring","text_charAt","textOrder","text_getSubstring","requiresLengthCall","text_changeCase","text_trim","text_print","text_prompt_ext","msg","text_count","sub","text_replace","from","to","text_reverse","variables_get","variables_set","NEW","INCREMENT","DECREMENT","BITWISE_NOT","UNARY_PLUS","TYPEOF","VOID","DELETE","AWAIT","EXPONENTIATION","BITWISE_SHIFT","IN","INSTANCEOF","BITWISE_AND","BITWISE_XOR","BITWISE_OR","YIELD","COMMA","JavascriptGenerator","CodeGenerator","constructor","name","ORDER_OVERRIDES","isInitialized","key","addReservedWords","Object","getOwnPropertyNames","globalThis","init","reset","Names","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","defvars","devVarList","allDeveloperVariables","push","getName","DEVELOPER_VARIABLE","allUsedVarModels","getId","finish","definitions","values","scrubNakedValue","line","string","replace","split","map","lines","thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","wrap","COMMENT_WRAP","inputList","inputTypes","VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","atId","delta","negate","defaultAtIndex","orderForInput","floor","$jscomp$tmp$exports$module$name","listName","opt_at","controls_ifelse","controls_repeat","math_round","math_trig","procedures_defnoreturn","strRegExp","test","stringName","text_prompt","javascriptGenerator","generators","colour","lists","logic","loops","math","procedures","variablesDynamic"],"mappings":"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","file":"javascript_compressed.js","sourcesContent":["/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating JavaScript for colour blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.JavaScript.colour\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {JavascriptGenerator} from './javascript_generator.js';\r\nimport {Order} from './javascript_generator.js';\r\n\r\nexport function colour_picker(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Colour picker.\r\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function colour_random(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Generate a random colour.\r\n  const functionName = generator.provideFunction_(\r\n    'colourRandom',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}() {\r\n  var num = Math.floor(Math.random() * Math.pow(2, 24));\r\n  return '#' + ('00000' + num.toString(16)).substr(-6);\r\n}\r\n`,\r\n  );\r\n  const code = functionName + '()';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function colour_rgb(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Compose a colour from RGB components expressed as percentages.\r\n  const red = generator.valueToCode(block, 'RED', Order.NONE) || 0;\r\n  const green = generator.valueToCode(block, 'GREEN', Order.NONE) || 0;\r\n  const blue = generator.valueToCode(block, 'BLUE', Order.NONE) || 0;\r\n  const functionName = generator.provideFunction_(\r\n    'colourRgb',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(r, g, b) {\r\n  r = Math.max(Math.min(Number(r), 100), 0) * 2.55;\r\n  g = Math.max(Math.min(Number(g), 100), 0) * 2.55;\r\n  b = Math.max(Math.min(Number(b), 100), 0) * 2.55;\r\n  r = ('0' + (Math.round(r) || 0).toString(16)).slice(-2);\r\n  g = ('0' + (Math.round(g) || 0).toString(16)).slice(-2);\r\n  b = ('0' + (Math.round(b) || 0).toString(16)).slice(-2);\r\n  return '#' + r + g + b;\r\n}\r\n`,\r\n  );\r\n  const code = functionName + '(' + red + ', ' + green + ', ' + blue + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function colour_blend(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Blend two colours together.\r\n  const c1 = generator.valueToCode(block, 'COLOUR1', Order.NONE) || \"'#000000'\";\r\n  const c2 = generator.valueToCode(block, 'COLOUR2', Order.NONE) || \"'#000000'\";\r\n  const ratio = generator.valueToCode(block, 'RATIO', Order.NONE) || 0.5;\r\n  const functionName = generator.provideFunction_(\r\n    'colourBlend',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(c1, c2, ratio) {\r\n  ratio = Math.max(Math.min(Number(ratio), 1), 0);\r\n  var r1 = parseInt(c1.substring(1, 3), 16);\r\n  var g1 = parseInt(c1.substring(3, 5), 16);\r\n  var b1 = parseInt(c1.substring(5, 7), 16);\r\n  var r2 = parseInt(c2.substring(1, 3), 16);\r\n  var g2 = parseInt(c2.substring(3, 5), 16);\r\n  var b2 = parseInt(c2.substring(5, 7), 16);\r\n  var r = Math.round(r1 * (1 - ratio) + r2 * ratio);\r\n  var g = Math.round(g1 * (1 - ratio) + g2 * ratio);\r\n  var b = Math.round(b1 * (1 - ratio) + b2 * ratio);\r\n  r = ('0' + (r || 0).toString(16)).slice(-2);\r\n  g = ('0' + (g || 0).toString(16)).slice(-2);\r\n  b = ('0' + (b || 0).toString(16)).slice(-2);\r\n  return '#' + r + g + b;\r\n}\r\n`,\r\n  );\r\n  const code = functionName + '(' + c1 + ', ' + c2 + ', ' + ratio + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating JavaScript for list blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.JavaScript.lists\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {CreateWithBlock} from '../../blocks/lists.js';\r\nimport type {JavascriptGenerator} from './javascript_generator.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport {Order} from './javascript_generator.js';\r\n\r\nexport function lists_create_empty(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Create an empty list.\r\n  return ['[]', Order.ATOMIC];\r\n}\r\n\r\nexport function lists_create_with(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Create a list with any number of elements of any type.\r\n  const createWithBlock = block as CreateWithBlock;\r\n  const elements = new Array(createWithBlock.itemCount_);\r\n  for (let i = 0; i < createWithBlock.itemCount_; i++) {\r\n    elements[i] = generator.valueToCode(block, 'ADD' + i, Order.NONE) || 'null';\r\n  }\r\n  const code = '[' + elements.join(', ') + ']';\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function lists_repeat(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Create a list with one element repeated.\r\n  const functionName = generator.provideFunction_(\r\n    'listsRepeat',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(value, n) {\r\n  var array = [];\r\n  for (var i = 0; i < n; i++) {\r\n    array[i] = value;\r\n  }\r\n  return array;\r\n}\r\n`,\r\n  );\r\n  const element = generator.valueToCode(block, 'ITEM', Order.NONE) || 'null';\r\n  const repeatCount = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\r\n  const code = functionName + '(' + element + ', ' + repeatCount + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_length(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // String or array length.\r\n  const list = generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\r\n  return [list + '.length', Order.MEMBER];\r\n}\r\n\r\nexport function lists_isEmpty(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Is the string null or array empty?\r\n  const list = generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\r\n  return ['!' + list + '.length', Order.LOGICAL_NOT];\r\n}\r\n\r\nexport function lists_indexOf(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Find an item in the list.\r\n  const operator =\r\n    block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\r\n  const item = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\r\n  const list = generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\r\n  const code = list + '.' + operator + '(' + item + ')';\r\n  if (block.workspace.options.oneBasedIndex) {\r\n    return [code + ' + 1', Order.ADDITION];\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_getIndex(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] | string {\r\n  // Get element at index.\r\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\r\n  const mode = block.getFieldValue('MODE') || 'GET';\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  const listOrder = where === 'RANDOM' ? Order.NONE : Order.MEMBER;\r\n  const list = generator.valueToCode(block, 'VALUE', listOrder) || '[]';\r\n\r\n  switch (where) {\r\n    case 'FIRST':\r\n      if (mode === 'GET') {\r\n        const code = list + '[0]';\r\n        return [code, Order.MEMBER];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const code = list + '.shift()';\r\n        return [code, Order.MEMBER];\r\n      } else if (mode === 'REMOVE') {\r\n        return list + '.shift();\\n';\r\n      }\r\n      break;\r\n    case 'LAST':\r\n      if (mode === 'GET') {\r\n        const code = list + '.slice(-1)[0]';\r\n        return [code, Order.MEMBER];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const code = list + '.pop()';\r\n        return [code, Order.MEMBER];\r\n      } else if (mode === 'REMOVE') {\r\n        return list + '.pop();\\n';\r\n      }\r\n      break;\r\n    case 'FROM_START': {\r\n      const at = generator.getAdjusted(block, 'AT');\r\n      if (mode === 'GET') {\r\n        const code = list + '[' + at + ']';\r\n        return [code, Order.MEMBER];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const code = list + '.splice(' + at + ', 1)[0]';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'REMOVE') {\r\n        return list + '.splice(' + at + ', 1);\\n';\r\n      }\r\n      break;\r\n    }\r\n    case 'FROM_END': {\r\n      const at = generator.getAdjusted(block, 'AT', 1, true);\r\n      if (mode === 'GET') {\r\n        const code = list + '.slice(' + at + ')[0]';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const code = list + '.splice(' + at + ', 1)[0]';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'REMOVE') {\r\n        return list + '.splice(' + at + ', 1);';\r\n      }\r\n      break;\r\n    }\r\n    case 'RANDOM': {\r\n      const functionName = generator.provideFunction_(\r\n        'listsGetRandomItem',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(list, remove) {\r\n  var x = Math.floor(Math.random() * list.length);\r\n  if (remove) {\r\n    return list.splice(x, 1)[0];\r\n  } else {\r\n    return list[x];\r\n  }\r\n}\r\n`,\r\n      );\r\n      const code = functionName + '(' + list + ', ' + (mode !== 'GET') + ')';\r\n      if (mode === 'GET' || mode === 'GET_REMOVE') {\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'REMOVE') {\r\n        return code + ';\\n';\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  throw Error('Unhandled combination (lists_getIndex).');\r\n}\r\n\r\nexport function lists_setIndex(block: Block, generator: JavascriptGenerator) {\r\n  // Set element at index.\r\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\r\n  let list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\r\n  const mode = block.getFieldValue('MODE') || 'GET';\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  const value = generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || 'null';\r\n  // Cache non-trivial values to variables to prevent repeated look-ups.\r\n  // Closure, which accesses and modifies 'list'.\r\n  function cacheList() {\r\n    if (list.match(/^\\w+$/)) {\r\n      return '';\r\n    }\r\n    const listVar = generator.nameDB_!.getDistinctName(\r\n      'tmpList',\r\n      NameType.VARIABLE,\r\n    )!;\r\n    const code = 'var ' + listVar + ' = ' + list + ';\\n';\r\n    list = listVar;\r\n    return code;\r\n  }\r\n  switch (where) {\r\n    case 'FIRST':\r\n      if (mode === 'SET') {\r\n        return list + '[0] = ' + value + ';\\n';\r\n      } else if (mode === 'INSERT') {\r\n        return list + '.unshift(' + value + ');\\n';\r\n      }\r\n      break;\r\n    case 'LAST':\r\n      if (mode === 'SET') {\r\n        let code = cacheList();\r\n        code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode === 'INSERT') {\r\n        return list + '.push(' + value + ');\\n';\r\n      }\r\n      break;\r\n    case 'FROM_START': {\r\n      const at = generator.getAdjusted(block, 'AT');\r\n      if (mode === 'SET') {\r\n        return list + '[' + at + '] = ' + value + ';\\n';\r\n      } else if (mode === 'INSERT') {\r\n        return list + '.splice(' + at + ', 0, ' + value + ');\\n';\r\n      }\r\n      break;\r\n    }\r\n    case 'FROM_END': {\r\n      const at = generator.getAdjusted(\r\n        block,\r\n        'AT',\r\n        1,\r\n        false,\r\n        Order.SUBTRACTION,\r\n      );\r\n      let code = cacheList();\r\n      if (mode === 'SET') {\r\n        code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode === 'INSERT') {\r\n        code +=\r\n          list +\r\n          '.splice(' +\r\n          list +\r\n          '.length - ' +\r\n          at +\r\n          ', 0, ' +\r\n          value +\r\n          ');\\n';\r\n        return code;\r\n      }\r\n      break;\r\n    }\r\n    case 'RANDOM': {\r\n      let code = cacheList();\r\n      const xVar = generator.nameDB_!.getDistinctName(\r\n        'tmpX',\r\n        NameType.VARIABLE,\r\n      );\r\n      code +=\r\n        'var ' + xVar + ' = Math.floor(Math.random() * ' + list + '.length);\\n';\r\n      if (mode === 'SET') {\r\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode === 'INSERT') {\r\n        code += list + '.splice(' + xVar + ', 0, ' + value + ');\\n';\r\n        return code;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  throw Error('Unhandled combination (lists_setIndex).');\r\n}\r\n\r\n/**\r\n * Returns an expression calculating the index into a list.\r\n * @param listName Name of the list, used to calculate length.\r\n * @param where The method of indexing, selected by dropdown in Blockly\r\n * @param opt_at The optional offset when indexing from start/end.\r\n * @returns Index expression.\r\n */\r\nconst getSubstringIndex = function (\r\n  listName: string,\r\n  where: string,\r\n  opt_at?: string,\r\n): string | undefined {\r\n  if (where === 'FIRST') {\r\n    return '0';\r\n  } else if (where === 'FROM_END') {\r\n    return listName + '.length - 1 - ' + opt_at;\r\n  } else if (where === 'LAST') {\r\n    return listName + '.length - 1';\r\n  } else {\r\n    return opt_at;\r\n  }\r\n};\r\n\r\nexport function lists_getSublist(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Get sublist.\r\n  // Dictionary of WHEREn field choices and their CamelCase equivalents.\r\n  const wherePascalCase = {\r\n    'FIRST': 'First',\r\n    'LAST': 'Last',\r\n    'FROM_START': 'FromStart',\r\n    'FROM_END': 'FromEnd',\r\n  };\r\n  type WhereOption = keyof typeof wherePascalCase;\r\n  const list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\r\n  const where1 = block.getFieldValue('WHERE1') as WhereOption;\r\n  const where2 = block.getFieldValue('WHERE2') as WhereOption;\r\n  let code;\r\n  if (where1 === 'FIRST' && where2 === 'LAST') {\r\n    code = list + '.slice(0)';\r\n  } else if (\r\n    list.match(/^\\w+$/) ||\r\n    (where1 !== 'FROM_END' && where2 === 'FROM_START')\r\n  ) {\r\n    // If the list is a variable or doesn't require a call for length, don't\r\n    // generate a helper function.\r\n    let at1;\r\n    switch (where1) {\r\n      case 'FROM_START':\r\n        at1 = generator.getAdjusted(block, 'AT1');\r\n        break;\r\n      case 'FROM_END':\r\n        at1 = generator.getAdjusted(block, 'AT1', 1, false, Order.SUBTRACTION);\r\n        at1 = list + '.length - ' + at1;\r\n        break;\r\n      case 'FIRST':\r\n        at1 = '0';\r\n        break;\r\n      default:\r\n        throw Error('Unhandled option (lists_getSublist).');\r\n    }\r\n    let at2;\r\n    switch (where2) {\r\n      case 'FROM_START':\r\n        at2 = generator.getAdjusted(block, 'AT2', 1);\r\n        break;\r\n      case 'FROM_END':\r\n        at2 = generator.getAdjusted(block, 'AT2', 0, false, Order.SUBTRACTION);\r\n        at2 = list + '.length - ' + at2;\r\n        break;\r\n      case 'LAST':\r\n        at2 = list + '.length';\r\n        break;\r\n      default:\r\n        throw Error('Unhandled option (lists_getSublist).');\r\n    }\r\n    code = list + '.slice(' + at1 + ', ' + at2 + ')';\r\n  } else {\r\n    const at1 = generator.getAdjusted(block, 'AT1');\r\n    const at2 = generator.getAdjusted(block, 'AT2');\r\n    // The value for 'FROM_END' and'FROM_START' depends on `at` so\r\n    // we add it as a parameter.\r\n    const at1Param =\r\n      where1 === 'FROM_END' || where1 === 'FROM_START' ? ', at1' : '';\r\n    const at2Param =\r\n      where2 === 'FROM_END' || where2 === 'FROM_START' ? ', at2' : '';\r\n    const functionName = generator.provideFunction_(\r\n      'subsequence' + wherePascalCase[where1] + wherePascalCase[where2],\r\n      `\r\nfunction ${\r\n        generator.FUNCTION_NAME_PLACEHOLDER_\r\n      }(sequence${at1Param}${at2Param}) {\r\n  var start = ${getSubstringIndex('sequence', where1, 'at1')};\r\n  var end = ${getSubstringIndex('sequence', where2, 'at2')} + 1;\r\n  return sequence.slice(start, end);\r\n}\r\n`,\r\n    );\r\n    code =\r\n      functionName +\r\n      '(' +\r\n      list +\r\n      // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\r\n      // pass it.\r\n      (where1 === 'FROM_END' || where1 === 'FROM_START' ? ', ' + at1 : '') +\r\n      (where2 === 'FROM_END' || where2 === 'FROM_START' ? ', ' + at2 : '') +\r\n      ')';\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_sort(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Block for sorting a list.\r\n  const list =\r\n    generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL) || '[]';\r\n  const direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\r\n  const type = block.getFieldValue('TYPE');\r\n  const getCompareFunctionName = generator.provideFunction_(\r\n    'listsGetSortCompare',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(type, direction) {\r\n  var compareFuncs = {\r\n    'NUMERIC': function(a, b) {\r\n        return Number(a) - Number(b); },\r\n    'TEXT': function(a, b) {\r\n        return String(a) > String(b) ? 1 : -1; },\r\n    'IGNORE_CASE': function(a, b) {\r\n        return String(a).toLowerCase() > String(b).toLowerCase() ? 1 : -1; },\r\n  };\r\n  var compare = compareFuncs[type];\r\n  return function(a, b) { return compare(a, b) * direction; };\r\n}\r\n      `,\r\n  );\r\n  return [\r\n    list +\r\n      '.slice().sort(' +\r\n      getCompareFunctionName +\r\n      '(\"' +\r\n      type +\r\n      '\", ' +\r\n      direction +\r\n      '))',\r\n    Order.FUNCTION_CALL,\r\n  ];\r\n}\r\n\r\nexport function lists_split(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Block for splitting text into a list, or joining a list into text.\r\n  let input = generator.valueToCode(block, 'INPUT', Order.MEMBER);\r\n  const delimiter = generator.valueToCode(block, 'DELIM', Order.NONE) || \"''\";\r\n  const mode = block.getFieldValue('MODE');\r\n  let functionName;\r\n  if (mode === 'SPLIT') {\r\n    if (!input) {\r\n      input = \"''\";\r\n    }\r\n    functionName = 'split';\r\n  } else if (mode === 'JOIN') {\r\n    if (!input) {\r\n      input = '[]';\r\n    }\r\n    functionName = 'join';\r\n  } else {\r\n    throw Error('Unknown mode: ' + mode);\r\n  }\r\n  const code = input + '.' + functionName + '(' + delimiter + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_reverse(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Block for reversing a list.\r\n  const list =\r\n    generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL) || '[]';\r\n  const code = list + '.slice().reverse()';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating JavaScript for logic blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.JavaScript.logic\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {JavascriptGenerator} from './javascript_generator.js';\r\nimport {Order} from './javascript_generator.js';\r\n\r\nexport function controls_if(block: Block, generator: JavascriptGenerator) {\r\n  // If/elseif/else condition.\r\n  let n = 0;\r\n  let code = '';\r\n  if (generator.STATEMENT_PREFIX) {\r\n    // Automatic prefix insertion is switched off for this block.  Add manually.\r\n    code += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  do {\r\n    const conditionCode =\r\n      generator.valueToCode(block, 'IF' + n, Order.NONE) || 'false';\r\n    let branchCode = generator.statementToCode(block, 'DO' + n);\r\n    if (generator.STATEMENT_SUFFIX) {\r\n      branchCode =\r\n        generator.prefixLines(\r\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n          generator.INDENT,\r\n        ) + branchCode;\r\n    }\r\n    code +=\r\n      (n > 0 ? ' else ' : '') +\r\n      'if (' +\r\n      conditionCode +\r\n      ') {\\n' +\r\n      branchCode +\r\n      '}';\r\n    n++;\r\n  } while (block.getInput('IF' + n));\r\n\r\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\r\n    let branchCode = generator.statementToCode(block, 'ELSE');\r\n    if (generator.STATEMENT_SUFFIX) {\r\n      branchCode =\r\n        generator.prefixLines(\r\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n          generator.INDENT,\r\n        ) + branchCode;\r\n    }\r\n    code += ' else {\\n' + branchCode + '}';\r\n  }\r\n  return code + '\\n';\r\n}\r\n\r\nexport const controls_ifelse = controls_if;\r\n\r\nexport function logic_compare(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Comparison operator.\r\n  const OPERATORS = {\r\n    'EQ': '==',\r\n    'NEQ': '!=',\r\n    'LT': '<',\r\n    'LTE': '<=',\r\n    'GT': '>',\r\n    'GTE': '>=',\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('OP') as OperatorOption];\r\n  const order =\r\n    operator === '==' || operator === '!=' ? Order.EQUALITY : Order.RELATIONAL;\r\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\r\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\r\n  const code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function logic_operation(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Operations 'and', 'or'.\r\n  const operator = block.getFieldValue('OP') === 'AND' ? '&&' : '||';\r\n  const order = operator === '&&' ? Order.LOGICAL_AND : Order.LOGICAL_OR;\r\n  let argument0 = generator.valueToCode(block, 'A', order);\r\n  let argument1 = generator.valueToCode(block, 'B', order);\r\n  if (!argument0 && !argument1) {\r\n    // If there are no arguments, then the return value is false.\r\n    argument0 = 'false';\r\n    argument1 = 'false';\r\n  } else {\r\n    // Single missing arguments have no effect on the return value.\r\n    const defaultArgument = operator === '&&' ? 'true' : 'false';\r\n    if (!argument0) {\r\n      argument0 = defaultArgument;\r\n    }\r\n    if (!argument1) {\r\n      argument1 = defaultArgument;\r\n    }\r\n  }\r\n  const code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function logic_negate(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Negation.\r\n  const order = Order.LOGICAL_NOT;\r\n  const argument0 = generator.valueToCode(block, 'BOOL', order) || 'true';\r\n  const code = '!' + argument0;\r\n  return [code, order];\r\n}\r\n\r\nexport function logic_boolean(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Boolean values true and false.\r\n  const code = block.getFieldValue('BOOL') === 'TRUE' ? 'true' : 'false';\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function logic_null(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Null data type.\r\n  return ['null', Order.ATOMIC];\r\n}\r\n\r\nexport function logic_ternary(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Ternary operator.\r\n  const value_if =\r\n    generator.valueToCode(block, 'IF', Order.CONDITIONAL) || 'false';\r\n  const value_then =\r\n    generator.valueToCode(block, 'THEN', Order.CONDITIONAL) || 'null';\r\n  const value_else =\r\n    generator.valueToCode(block, 'ELSE', Order.CONDITIONAL) || 'null';\r\n  const code = value_if + ' ? ' + value_then + ' : ' + value_else;\r\n  return [code, Order.CONDITIONAL];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating JavaScript for loop blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.JavaScript.loops\r\n\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport type {ControlFlowInLoopBlock} from '../../blocks/loops.js';\r\nimport type {JavascriptGenerator} from './javascript_generator.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport {Order} from './javascript_generator.js';\r\n\r\nexport function controls_repeat_ext(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n) {\r\n  // Repeat n times.\r\n  let repeats;\r\n  if (block.getField('TIMES')) {\r\n    // Internal number.\r\n    repeats = String(Number(block.getFieldValue('TIMES')));\r\n  } else {\r\n    // External number.\r\n    repeats = generator.valueToCode(block, 'TIMES', Order.ASSIGNMENT) || '0';\r\n  }\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  let code = '';\r\n  const loopVar = generator.nameDB_!.getDistinctName(\r\n    'count',\r\n    NameType.VARIABLE,\r\n  );\r\n  let endVar = repeats;\r\n  if (!repeats.match(/^\\w+$/) && !stringUtils.isNumber(repeats)) {\r\n    endVar = generator.nameDB_!.getDistinctName(\r\n      'repeat_end',\r\n      NameType.VARIABLE,\r\n    );\r\n    code += 'var ' + endVar + ' = ' + repeats + ';\\n';\r\n  }\r\n  code +=\r\n    'for (var ' +\r\n    loopVar +\r\n    ' = 0; ' +\r\n    loopVar +\r\n    ' < ' +\r\n    endVar +\r\n    '; ' +\r\n    loopVar +\r\n    '++) {\\n' +\r\n    branch +\r\n    '}\\n';\r\n  return code;\r\n}\r\n\r\nexport const controls_repeat = controls_repeat_ext;\r\n\r\nexport function controls_whileUntil(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n) {\r\n  // Do while/until loop.\r\n  const until = block.getFieldValue('MODE') === 'UNTIL';\r\n  let argument0 =\r\n    generator.valueToCode(\r\n      block,\r\n      'BOOL',\r\n      until ? Order.LOGICAL_NOT : Order.NONE,\r\n    ) || 'false';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  if (until) {\r\n    argument0 = '!' + argument0;\r\n  }\r\n  return 'while (' + argument0 + ') {\\n' + branch + '}\\n';\r\n}\r\n\r\nexport function controls_for(block: Block, generator: JavascriptGenerator) {\r\n  // For loop.\r\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const argument0 =\r\n    generator.valueToCode(block, 'FROM', Order.ASSIGNMENT) || '0';\r\n  const argument1 = generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || '0';\r\n  const increment = generator.valueToCode(block, 'BY', Order.ASSIGNMENT) || '1';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  let code;\r\n  if (\r\n    stringUtils.isNumber(argument0) &&\r\n    stringUtils.isNumber(argument1) &&\r\n    stringUtils.isNumber(increment)\r\n  ) {\r\n    // All arguments are simple numbers.\r\n    const up = Number(argument0) <= Number(argument1);\r\n    code =\r\n      'for (' +\r\n      variable0 +\r\n      ' = ' +\r\n      argument0 +\r\n      '; ' +\r\n      variable0 +\r\n      (up ? ' <= ' : ' >= ') +\r\n      argument1 +\r\n      '; ' +\r\n      variable0;\r\n    const step = Math.abs(Number(increment));\r\n    if (step === 1) {\r\n      code += up ? '++' : '--';\r\n    } else {\r\n      code += (up ? ' += ' : ' -= ') + step;\r\n    }\r\n    code += ') {\\n' + branch + '}\\n';\r\n  } else {\r\n    code = '';\r\n    // Cache non-trivial values to variables to prevent repeated look-ups.\r\n    let startVar = argument0;\r\n    if (!argument0.match(/^\\w+$/) && !stringUtils.isNumber(argument0)) {\r\n      startVar = generator.nameDB_!.getDistinctName(\r\n        variable0 + '_start',\r\n        NameType.VARIABLE,\r\n      );\r\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\r\n    }\r\n    let endVar = argument1;\r\n    if (!argument1.match(/^\\w+$/) && !stringUtils.isNumber(argument1)) {\r\n      endVar = generator.nameDB_!.getDistinctName(\r\n        variable0 + '_end',\r\n        NameType.VARIABLE,\r\n      );\r\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\r\n    }\r\n    // Determine loop direction at start, in case one of the bounds\r\n    // changes during loop execution.\r\n    const incVar = generator.nameDB_!.getDistinctName(\r\n      variable0 + '_inc',\r\n      NameType.VARIABLE,\r\n    );\r\n    code += 'var ' + incVar + ' = ';\r\n    if (stringUtils.isNumber(increment)) {\r\n      code += Math.abs(Number(increment)) + ';\\n';\r\n    } else {\r\n      code += 'Math.abs(' + increment + ');\\n';\r\n    }\r\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\r\n    code += generator.INDENT + incVar + ' = -' + incVar + ';\\n';\r\n    code += '}\\n';\r\n    code +=\r\n      'for (' +\r\n      variable0 +\r\n      ' = ' +\r\n      startVar +\r\n      '; ' +\r\n      incVar +\r\n      ' >= 0 ? ' +\r\n      variable0 +\r\n      ' <= ' +\r\n      endVar +\r\n      ' : ' +\r\n      variable0 +\r\n      ' >= ' +\r\n      endVar +\r\n      '; ' +\r\n      variable0 +\r\n      ' += ' +\r\n      incVar +\r\n      ') {\\n' +\r\n      branch +\r\n      '}\\n';\r\n  }\r\n  return code;\r\n}\r\n\r\nexport function controls_forEach(block: Block, generator: JavascriptGenerator) {\r\n  // For each loop.\r\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const argument0 =\r\n    generator.valueToCode(block, 'LIST', Order.ASSIGNMENT) || '[]';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  let code = '';\r\n  // Cache non-trivial values to variables to prevent repeated look-ups.\r\n  let listVar = argument0;\r\n  if (!argument0.match(/^\\w+$/)) {\r\n    listVar = generator.nameDB_!.getDistinctName(\r\n      variable0 + '_list',\r\n      NameType.VARIABLE,\r\n    );\r\n    code += 'var ' + listVar + ' = ' + argument0 + ';\\n';\r\n  }\r\n  const indexVar = generator.nameDB_!.getDistinctName(\r\n    variable0 + '_index',\r\n    NameType.VARIABLE,\r\n  );\r\n  branch =\r\n    generator.INDENT +\r\n    variable0 +\r\n    ' = ' +\r\n    listVar +\r\n    '[' +\r\n    indexVar +\r\n    '];\\n' +\r\n    branch;\r\n  code += 'for (var ' + indexVar + ' in ' + listVar + ') {\\n' + branch + '}\\n';\r\n  return code;\r\n}\r\n\r\nexport function controls_flow_statements(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n) {\r\n  // Flow statements: continue, break.\r\n  let xfix = '';\r\n  if (generator.STATEMENT_PREFIX) {\r\n    // Automatic prefix insertion is switched off for this block.  Add manually.\r\n    xfix += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    // Inject any statement suffix here since the regular one at the end\r\n    // will not get executed if the break/continue is triggered.\r\n    xfix += generator.injectId(generator.STATEMENT_SUFFIX, block);\r\n  }\r\n  if (generator.STATEMENT_PREFIX) {\r\n    const loop = (block as ControlFlowInLoopBlock).getSurroundLoop();\r\n    if (loop && !loop.suppressPrefixSuffix) {\r\n      // Inject loop's statement prefix here since the regular one at the end\r\n      // of the loop will not get executed if 'continue' is triggered.\r\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\r\n      xfix += generator.injectId(generator.STATEMENT_PREFIX, loop);\r\n    }\r\n  }\r\n  switch (block.getFieldValue('FLOW')) {\r\n    case 'BREAK':\r\n      return xfix + 'break;\\n';\r\n    case 'CONTINUE':\r\n      return xfix + 'continue;\\n';\r\n  }\r\n  throw Error('Unknown flow statement.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating JavaScript for math blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.JavaScript.math\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {JavascriptGenerator} from './javascript_generator.js';\r\nimport {Order} from './javascript_generator.js';\r\n\r\nexport function math_number(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Numeric value.\r\n  const number = Number(block.getFieldValue('NUM'));\r\n  const order = number >= 0 ? Order.ATOMIC : Order.UNARY_NEGATION;\r\n  return [String(number), order];\r\n}\r\n\r\nexport function math_arithmetic(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Basic arithmetic operators, and power.\r\n  const OPERATORS: Record<string, [string | null, Order]> = {\r\n    'ADD': [' + ', Order.ADDITION],\r\n    'MINUS': [' - ', Order.SUBTRACTION],\r\n    'MULTIPLY': [' * ', Order.MULTIPLICATION],\r\n    'DIVIDE': [' / ', Order.DIVISION],\r\n    'POWER': [null, Order.NONE], // Handle power separately.\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const tuple = OPERATORS[block.getFieldValue('OP') as OperatorOption];\r\n  const operator = tuple[0];\r\n  const order = tuple[1];\r\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\r\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\r\n  let code;\r\n  // Power in JavaScript requires a special case since it has no operator.\r\n  if (!operator) {\r\n    code = 'Math.pow(' + argument0 + ', ' + argument1 + ')';\r\n    return [code, Order.FUNCTION_CALL];\r\n  }\r\n  code = argument0 + operator + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function math_single(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Math operators with single operand.\r\n  const operator = block.getFieldValue('OP');\r\n  let code;\r\n  let arg;\r\n  if (operator === 'NEG') {\r\n    // Negation is a special case given its different operator precedence.\r\n    arg = generator.valueToCode(block, 'NUM', Order.UNARY_NEGATION) || '0';\r\n    if (arg[0] === '-') {\r\n      // --3 is not legal in JS.\r\n      arg = ' ' + arg;\r\n    }\r\n    code = '-' + arg;\r\n    return [code, Order.UNARY_NEGATION];\r\n  }\r\n  if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\r\n    arg = generator.valueToCode(block, 'NUM', Order.DIVISION) || '0';\r\n  } else {\r\n    arg = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\r\n  }\r\n  // First, handle cases which generate values that don't need parentheses\r\n  // wrapping the code.\r\n  switch (operator) {\r\n    case 'ABS':\r\n      code = 'Math.abs(' + arg + ')';\r\n      break;\r\n    case 'ROOT':\r\n      code = 'Math.sqrt(' + arg + ')';\r\n      break;\r\n    case 'LN':\r\n      code = 'Math.log(' + arg + ')';\r\n      break;\r\n    case 'EXP':\r\n      code = 'Math.exp(' + arg + ')';\r\n      break;\r\n    case 'POW10':\r\n      code = 'Math.pow(10,' + arg + ')';\r\n      break;\r\n    case 'ROUND':\r\n      code = 'Math.round(' + arg + ')';\r\n      break;\r\n    case 'ROUNDUP':\r\n      code = 'Math.ceil(' + arg + ')';\r\n      break;\r\n    case 'ROUNDDOWN':\r\n      code = 'Math.floor(' + arg + ')';\r\n      break;\r\n    case 'SIN':\r\n      code = 'Math.sin(' + arg + ' / 180 * Math.PI)';\r\n      break;\r\n    case 'COS':\r\n      code = 'Math.cos(' + arg + ' / 180 * Math.PI)';\r\n      break;\r\n    case 'TAN':\r\n      code = 'Math.tan(' + arg + ' / 180 * Math.PI)';\r\n      break;\r\n  }\r\n  if (code) {\r\n    return [code, Order.FUNCTION_CALL];\r\n  }\r\n  // Second, handle cases which generate values that may need parentheses\r\n  // wrapping the code.\r\n  switch (operator) {\r\n    case 'LOG10':\r\n      code = 'Math.log(' + arg + ') / Math.log(10)';\r\n      break;\r\n    case 'ASIN':\r\n      code = 'Math.asin(' + arg + ') / Math.PI * 180';\r\n      break;\r\n    case 'ACOS':\r\n      code = 'Math.acos(' + arg + ') / Math.PI * 180';\r\n      break;\r\n    case 'ATAN':\r\n      code = 'Math.atan(' + arg + ') / Math.PI * 180';\r\n      break;\r\n    default:\r\n      throw Error('Unknown math operator: ' + operator);\r\n  }\r\n  return [code, Order.DIVISION];\r\n}\r\n\r\nexport function math_constant(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\r\n  const CONSTANTS: Record<string, [string, Order]> = {\r\n    'PI': ['Math.PI', Order.MEMBER],\r\n    'E': ['Math.E', Order.MEMBER],\r\n    'GOLDEN_RATIO': ['(1 + Math.sqrt(5)) / 2', Order.DIVISION],\r\n    'SQRT2': ['Math.SQRT2', Order.MEMBER],\r\n    'SQRT1_2': ['Math.SQRT1_2', Order.MEMBER],\r\n    'INFINITY': ['Infinity', Order.ATOMIC],\r\n  };\r\n  type ConstantOption = keyof typeof CONSTANTS;\r\n  return CONSTANTS[block.getFieldValue('CONSTANT') as ConstantOption];\r\n}\r\n\r\nexport function math_number_property(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Check if a number is even, odd, prime, whole, positive, or negative\r\n  // or if it is divisible by certain number. Returns true or false.\r\n  const PROPERTIES: Record<string, [string | null, Order, Order]> = {\r\n    'EVEN': [' % 2 === 0', Order.MODULUS, Order.EQUALITY],\r\n    'ODD': [' % 2 === 1', Order.MODULUS, Order.EQUALITY],\r\n    'WHOLE': [' % 1 === 0', Order.MODULUS, Order.EQUALITY],\r\n    'POSITIVE': [' > 0', Order.RELATIONAL, Order.RELATIONAL],\r\n    'NEGATIVE': [' < 0', Order.RELATIONAL, Order.RELATIONAL],\r\n    'DIVISIBLE_BY': [null, Order.MODULUS, Order.EQUALITY],\r\n    'PRIME': [null, Order.NONE, Order.FUNCTION_CALL],\r\n  };\r\n  type PropertyOption = keyof typeof PROPERTIES;\r\n  const dropdownProperty = block.getFieldValue('PROPERTY') as PropertyOption;\r\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\r\n  const numberToCheck =\r\n    generator.valueToCode(block, 'NUMBER_TO_CHECK', inputOrder) || '0';\r\n  let code;\r\n  if (dropdownProperty === 'PRIME') {\r\n    // Prime is a special case as it is not a one-liner test.\r\n    const functionName = generator.provideFunction_(\r\n      'mathIsPrime',\r\n      `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(n) {\r\n  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\r\n  if (n == 2 || n == 3) {\r\n    return true;\r\n  }\r\n  // False if n is NaN, negative, is 1, or not whole.\r\n  // And false if n is divisible by 2 or 3.\r\n  if (isNaN(n) || n <= 1 || n % 1 !== 0 || n % 2 === 0 || n % 3 === 0) {\r\n    return false;\r\n  }\r\n  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\r\n  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {\r\n    if (n % (x - 1) === 0 || n % (x + 1) === 0) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n`,\r\n    );\r\n    code = functionName + '(' + numberToCheck + ')';\r\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\r\n    const divisor =\r\n      generator.valueToCode(block, 'DIVISOR', Order.MODULUS) || '0';\r\n    code = numberToCheck + ' % ' + divisor + ' === 0';\r\n  } else {\r\n    code = numberToCheck + suffix;\r\n  }\r\n  return [code, outputOrder];\r\n}\r\n\r\nexport function math_change(block: Block, generator: JavascriptGenerator) {\r\n  // Add to a variable in place.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'DELTA', Order.ADDITION) || '0';\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return (\r\n    varName +\r\n    ' = (typeof ' +\r\n    varName +\r\n    \" === 'number' ? \" +\r\n    varName +\r\n    ' : 0) + ' +\r\n    argument0 +\r\n    ';\\n'\r\n  );\r\n}\r\n\r\n// Rounding functions have a single operand.\r\nexport const math_round = math_single;\r\n// Trigonometry functions have a single operand.\r\nexport const math_trig = math_single;\r\n\r\nexport function math_on_list(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Math functions for lists.\r\n  const func = block.getFieldValue('OP');\r\n  let list;\r\n  let code;\r\n  switch (func) {\r\n    case 'SUM':\r\n      list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\r\n      code = list + '.reduce(function(x, y) {return x + y;}, 0)';\r\n      break;\r\n    case 'MIN':\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n      code = 'Math.min.apply(null, ' + list + ')';\r\n      break;\r\n    case 'MAX':\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n      code = 'Math.max.apply(null, ' + list + ')';\r\n      break;\r\n    case 'AVERAGE': {\r\n      // mathMean([null,null,1,3]) === 2.0.\r\n      const functionName = generator.provideFunction_(\r\n        'mathMean',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList) {\r\n  return myList.reduce(function(x, y) {return x + y;}, 0) / myList.length;\r\n}\r\n`,\r\n      );\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'MEDIAN': {\r\n      // mathMedian([null,null,1,3]) === 2.0.\r\n      const functionName = generator.provideFunction_(\r\n        'mathMedian',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList) {\r\n  var localList = myList.filter(function (x) {return typeof x === 'number';});\r\n  if (!localList.length) return null;\r\n  localList.sort(function(a, b) {return b - a;});\r\n  if (localList.length % 2 === 0) {\r\n    return (localList[localList.length / 2 - 1] + localList[localList.length / 2]) / 2;\r\n  } else {\r\n    return localList[(localList.length - 1) / 2];\r\n  }\r\n}\r\n`,\r\n      );\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'MODE': {\r\n      // As a list of numbers can contain more than one mode,\r\n      // the returned result is provided as an array.\r\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1].\r\n      const functionName = generator.provideFunction_(\r\n        'mathModes',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(values) {\r\n  var modes = [];\r\n  var counts = [];\r\n  var maxCount = 0;\r\n  for (var i = 0; i < values.length; i++) {\r\n    var value = values[i];\r\n    var found = false;\r\n    var thisCount;\r\n    for (var j = 0; j < counts.length; j++) {\r\n      if (counts[j][0] === value) {\r\n        thisCount = ++counts[j][1];\r\n        found = true;\r\n        break;\r\n      }\r\n    }\r\n    if (!found) {\r\n      counts.push([value, 1]);\r\n      thisCount = 1;\r\n    }\r\n    maxCount = Math.max(thisCount, maxCount);\r\n  }\r\n  for (var j = 0; j < counts.length; j++) {\r\n    if (counts[j][1] === maxCount) {\r\n        modes.push(counts[j][0]);\r\n    }\r\n  }\r\n  return modes;\r\n}\r\n`,\r\n      );\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'STD_DEV': {\r\n      const functionName = generator.provideFunction_(\r\n        'mathStandardDeviation',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(numbers) {\r\n  var n = numbers.length;\r\n  if (!n) return null;\r\n  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;\r\n  var variance = 0;\r\n  for (var j = 0; j < n; j++) {\r\n    variance += Math.pow(numbers[j] - mean, 2);\r\n  }\r\n  variance = variance / n;\r\n  return Math.sqrt(variance);\r\n}\r\n`,\r\n      );\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'RANDOM': {\r\n      const functionName = generator.provideFunction_(\r\n        'mathRandomList',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(list) {\r\n  var x = Math.floor(Math.random() * list.length);\r\n  return list[x];\r\n}\r\n`,\r\n      );\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    default:\r\n      throw Error('Unknown operator: ' + func);\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_modulo(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Remainder computation.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'DIVIDEND', Order.MODULUS) || '0';\r\n  const argument1 =\r\n    generator.valueToCode(block, 'DIVISOR', Order.MODULUS) || '0';\r\n  const code = argument0 + ' % ' + argument1;\r\n  return [code, Order.MODULUS];\r\n}\r\n\r\nexport function math_constrain(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Constrain a number between two limits.\r\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'LOW', Order.NONE) || '0';\r\n  const argument2 =\r\n    generator.valueToCode(block, 'HIGH', Order.NONE) || 'Infinity';\r\n  const code =\r\n    'Math.min(Math.max(' +\r\n    argument0 +\r\n    ', ' +\r\n    argument1 +\r\n    '), ' +\r\n    argument2 +\r\n    ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_random_int(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Random integer between [X] and [Y].\r\n  const argument0 = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'TO', Order.NONE) || '0';\r\n  const functionName = generator.provideFunction_(\r\n    'mathRandomInt',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(a, b) {\r\n  if (a > b) {\r\n    // Swap a and b to ensure a is smaller.\r\n    var c = a;\r\n    a = b;\r\n    b = c;\r\n  }\r\n  return Math.floor(Math.random() * (b - a + 1) + a);\r\n}\r\n`,\r\n  );\r\n  const code = functionName + '(' + argument0 + ', ' + argument1 + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_random_float(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Random fraction between 0 and 1.\r\n  return ['Math.random()', Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_atan2(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\r\n  const argument0 = generator.valueToCode(block, 'X', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'Y', Order.NONE) || '0';\r\n  return [\r\n    'Math.atan2(' + argument1 + ', ' + argument0 + ') / Math.PI * 180',\r\n    Order.DIVISION,\r\n  ];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating JavaScript for procedure blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.JavaScript.procedures\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {IfReturnBlock} from '../../blocks/procedures.js';\r\nimport type {JavascriptGenerator} from './javascript_generator.js';\r\nimport {Order} from './javascript_generator.js';\r\n\r\nexport function procedures_defreturn(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n) {\r\n  // Define a procedure with a return value.\r\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\r\n  let xfix1 = '';\r\n  if (generator.STATEMENT_PREFIX) {\r\n    xfix1 += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    xfix1 += generator.injectId(generator.STATEMENT_SUFFIX, block);\r\n  }\r\n  if (xfix1) {\r\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\r\n  }\r\n  let loopTrap = '';\r\n  if (generator.INFINITE_LOOP_TRAP) {\r\n    loopTrap = generator.prefixLines(\r\n      generator.injectId(generator.INFINITE_LOOP_TRAP, block),\r\n      generator.INDENT,\r\n    );\r\n  }\r\n  const branch = generator.statementToCode(block, 'STACK');\r\n  let returnValue = generator.valueToCode(block, 'RETURN', Order.NONE) || '';\r\n  let xfix2 = '';\r\n  if (branch && returnValue) {\r\n    // After executing the function body, revisit this block for the return.\r\n    xfix2 = xfix1;\r\n  }\r\n  if (returnValue) {\r\n    returnValue = generator.INDENT + 'return ' + returnValue + ';\\n';\r\n  }\r\n  const args = [];\r\n  const variables = block.getVars();\r\n  for (let i = 0; i < variables.length; i++) {\r\n    args[i] = generator.getVariableName(variables[i]);\r\n  }\r\n  let code =\r\n    'function ' +\r\n    funcName +\r\n    '(' +\r\n    args.join(', ') +\r\n    ') {\\n' +\r\n    xfix1 +\r\n    loopTrap +\r\n    branch +\r\n    xfix2 +\r\n    returnValue +\r\n    '}';\r\n  code = generator.scrub_(block, code);\r\n  // Add % so as not to collide with helper functions in definitions list.\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['%' + funcName] = code;\r\n  return null;\r\n}\r\n\r\n// Defining a procedure without a return value uses the same generator as\r\n// a procedure with a return value.\r\nexport const procedures_defnoreturn = procedures_defreturn;\r\n\r\nexport function procedures_callreturn(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Call a procedure with a return value.\r\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\r\n  const args = [];\r\n  const variables = block.getVars();\r\n  for (let i = 0; i < variables.length; i++) {\r\n    args[i] = generator.valueToCode(block, 'ARG' + i, Order.NONE) || 'null';\r\n  }\r\n  const code = funcName + '(' + args.join(', ') + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function procedures_callnoreturn(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n) {\r\n  // Call a procedure with no return value.\r\n  // Generated code is for a function call as a statement is the same as a\r\n  // function call as a value, with the addition of line ending.\r\n  const tuple = generator.forBlock['procedures_callreturn'](\r\n    block,\r\n    generator,\r\n  ) as [string, Order];\r\n  return tuple[0] + ';\\n';\r\n}\r\n\r\nexport function procedures_ifreturn(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n) {\r\n  // Conditionally return value from a procedure.\r\n  const condition =\r\n    generator.valueToCode(block, 'CONDITION', Order.NONE) || 'false';\r\n  let code = 'if (' + condition + ') {\\n';\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    // Inject any statement suffix here since the regular one at the end\r\n    // will not get executed if the return is triggered.\r\n    code += generator.prefixLines(\r\n      generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n      generator.INDENT,\r\n    );\r\n  }\r\n  if ((block as IfReturnBlock).hasReturnValue_) {\r\n    const value = generator.valueToCode(block, 'VALUE', Order.NONE) || 'null';\r\n    code += generator.INDENT + 'return ' + value + ';\\n';\r\n  } else {\r\n    code += generator.INDENT + 'return;\\n';\r\n  }\r\n  code += '}\\n';\r\n  return code;\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating JavaScript for text blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.JavaScript.texts\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {JavascriptGenerator} from './javascript_generator.js';\r\nimport type {JoinMutatorBlock} from '../../blocks/text.js';\r\nimport {Order} from './javascript_generator.js';\r\n\r\n/**\r\n * Regular expression to detect a single-quoted string literal.\r\n */\r\nconst strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/;\r\n\r\n/**\r\n * Enclose the provided value in 'String(...)' function.\r\n * Leave string literals alone.\r\n * @param value Code evaluating to a value.\r\n * @returns Array containing code evaluating to a string\r\n *     and the order of the returned code.[string, number]\r\n */\r\nconst forceString = function (value: string): [string, Order] {\r\n  if (strRegExp.test(value)) {\r\n    return [value, Order.ATOMIC];\r\n  }\r\n  return ['String(' + value + ')', Order.FUNCTION_CALL];\r\n};\r\n\r\n/**\r\n * Returns an expression calculating the index into a string.\r\n * @param stringName Name of the string, used to calculate length.\r\n * @param where The method of indexing, selected by dropdown in Blockly\r\n * @param opt_at The optional offset when indexing from start/end.\r\n * @returns Index expression.\r\n */\r\nconst getSubstringIndex = function (\r\n  stringName: string,\r\n  where: string,\r\n  opt_at?: string,\r\n): string | undefined {\r\n  if (where === 'FIRST') {\r\n    return '0';\r\n  } else if (where === 'FROM_END') {\r\n    return stringName + '.length - 1 - ' + opt_at;\r\n  } else if (where === 'LAST') {\r\n    return stringName + '.length - 1';\r\n  } else {\r\n    return opt_at;\r\n  }\r\n};\r\n\r\nexport function text(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Text value.\r\n  const code = generator.quote_(block.getFieldValue('TEXT'));\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function text_multiline(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Text value.\r\n  const code = generator.multiline_quote_(block.getFieldValue('TEXT'));\r\n  const order = code.indexOf('+') !== -1 ? Order.ADDITION : Order.ATOMIC;\r\n  return [code, order];\r\n}\r\n\r\nexport function text_join(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Create a string made up of any number of elements of any type.\r\n  const joinBlock = block as JoinMutatorBlock;\r\n  switch (joinBlock.itemCount_) {\r\n    case 0:\r\n      return [\"''\", Order.ATOMIC];\r\n    case 1: {\r\n      const element =\r\n        generator.valueToCode(joinBlock, 'ADD0', Order.NONE) || \"''\";\r\n      const codeAndOrder = forceString(element);\r\n      return codeAndOrder;\r\n    }\r\n    case 2: {\r\n      const element0 =\r\n        generator.valueToCode(joinBlock, 'ADD0', Order.NONE) || \"''\";\r\n      const element1 =\r\n        generator.valueToCode(joinBlock, 'ADD1', Order.NONE) || \"''\";\r\n      const code = forceString(element0)[0] + ' + ' + forceString(element1)[0];\r\n      return [code, Order.ADDITION];\r\n    }\r\n    default: {\r\n      const elements = new Array(joinBlock.itemCount_);\r\n      for (let i = 0; i < joinBlock.itemCount_; i++) {\r\n        elements[i] =\r\n          generator.valueToCode(joinBlock, 'ADD' + i, Order.NONE) || \"''\";\r\n      }\r\n      const code = '[' + elements.join(',') + \"].join('')\";\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n  }\r\n}\r\n\r\nexport function text_append(block: Block, generator: JavascriptGenerator) {\r\n  // Append to a variable in place.\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const value = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  const code = varName + ' += ' + forceString(value)[0] + ';\\n';\r\n  return code;\r\n}\r\n\r\nexport function text_length(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // String or array length.\r\n  const text = generator.valueToCode(block, 'VALUE', Order.MEMBER) || \"''\";\r\n  return [text + '.length', Order.MEMBER];\r\n}\r\n\r\nexport function text_isEmpty(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Is the string null or array empty?\r\n  const text = generator.valueToCode(block, 'VALUE', Order.MEMBER) || \"''\";\r\n  return ['!' + text + '.length', Order.LOGICAL_NOT];\r\n}\r\n\r\nexport function text_indexOf(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Search the text for a substring.\r\n  const operator =\r\n    block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\r\n  const substring = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\r\n  const text = generator.valueToCode(block, 'VALUE', Order.MEMBER) || \"''\";\r\n  const code = text + '.' + operator + '(' + substring + ')';\r\n  // Adjust index if using one-based indices.\r\n  if (block.workspace.options.oneBasedIndex) {\r\n    return [code + ' + 1', Order.ADDITION];\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_charAt(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Get letter at index.\r\n  // Note: Until January 2013 this block did not have the WHERE input.\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  const textOrder = where === 'RANDOM' ? Order.NONE : Order.MEMBER;\r\n  const text = generator.valueToCode(block, 'VALUE', textOrder) || \"''\";\r\n  switch (where) {\r\n    case 'FIRST': {\r\n      const code = text + '.charAt(0)';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n    case 'LAST': {\r\n      const code = text + '.slice(-1)';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n    case 'FROM_START': {\r\n      const at = generator.getAdjusted(block, 'AT');\r\n      // Adjust index if using one-based indices.\r\n      const code = text + '.charAt(' + at + ')';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n    case 'FROM_END': {\r\n      const at = generator.getAdjusted(block, 'AT', 1, true);\r\n      const code = text + '.slice(' + at + ').charAt(0)';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n    case 'RANDOM': {\r\n      const functionName = generator.provideFunction_(\r\n        'textRandomLetter',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(text) {\r\n  var x = Math.floor(Math.random() * text.length);\r\n  return text[x];\r\n}\r\n`,\r\n      );\r\n      const code = functionName + '(' + text + ')';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n  }\r\n  throw Error('Unhandled option (text_charAt).');\r\n}\r\n\r\nexport function text_getSubstring(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Dictionary of WHEREn field choices and their CamelCase equivalents. */\r\n  const wherePascalCase = {\r\n    'FIRST': 'First',\r\n    'LAST': 'Last',\r\n    'FROM_START': 'FromStart',\r\n    'FROM_END': 'FromEnd',\r\n  };\r\n  type WhereOption = keyof typeof wherePascalCase;\r\n  // Get substring.\r\n  const where1 = block.getFieldValue('WHERE1') as WhereOption;\r\n  const where2 = block.getFieldValue('WHERE2') as WhereOption;\r\n  const requiresLengthCall =\r\n    where1 !== 'FROM_END' &&\r\n    where1 !== 'LAST' &&\r\n    where2 !== 'FROM_END' &&\r\n    where2 !== 'LAST';\r\n  const textOrder = requiresLengthCall ? Order.MEMBER : Order.NONE;\r\n  const text = generator.valueToCode(block, 'STRING', textOrder) || \"''\";\r\n  let code;\r\n  if (where1 === 'FIRST' && where2 === 'LAST') {\r\n    code = text;\r\n    return [code, Order.NONE];\r\n  } else if (text.match(/^'?\\w+'?$/) || requiresLengthCall) {\r\n    // If the text is a variable or literal or doesn't require a call for\r\n    // length, don't generate a helper function.\r\n    let at1;\r\n    switch (where1) {\r\n      case 'FROM_START':\r\n        at1 = generator.getAdjusted(block, 'AT1');\r\n        break;\r\n      case 'FROM_END':\r\n        at1 = generator.getAdjusted(block, 'AT1', 1, false, Order.SUBTRACTION);\r\n        at1 = text + '.length - ' + at1;\r\n        break;\r\n      case 'FIRST':\r\n        at1 = '0';\r\n        break;\r\n      default:\r\n        throw Error('Unhandled option (text_getSubstring).');\r\n    }\r\n    let at2;\r\n    switch (where2) {\r\n      case 'FROM_START':\r\n        at2 = generator.getAdjusted(block, 'AT2', 1);\r\n        break;\r\n      case 'FROM_END':\r\n        at2 = generator.getAdjusted(block, 'AT2', 0, false, Order.SUBTRACTION);\r\n        at2 = text + '.length - ' + at2;\r\n        break;\r\n      case 'LAST':\r\n        at2 = text + '.length';\r\n        break;\r\n      default:\r\n        throw Error('Unhandled option (text_getSubstring).');\r\n    }\r\n    code = text + '.slice(' + at1 + ', ' + at2 + ')';\r\n  } else {\r\n    const at1 = generator.getAdjusted(block, 'AT1');\r\n    const at2 = generator.getAdjusted(block, 'AT2');\r\n    // The value for 'FROM_END' and'FROM_START' depends on `at` so\r\n    // we add it as a parameter.\r\n    const at1Param =\r\n      where1 === 'FROM_END' || where1 === 'FROM_START' ? ', at1' : '';\r\n    const at2Param =\r\n      where2 === 'FROM_END' || where2 === 'FROM_START' ? ', at2' : '';\r\n    const functionName = generator.provideFunction_(\r\n      'subsequence' + wherePascalCase[where1] + wherePascalCase[where2],\r\n      `\r\nfunction ${\r\n        generator.FUNCTION_NAME_PLACEHOLDER_\r\n      }(sequence${at1Param}${at2Param}) {\r\n  var start = ${getSubstringIndex('sequence', where1, 'at1')};\r\n  var end = ${getSubstringIndex('sequence', where2, 'at2')} + 1;\r\n  return sequence.slice(start, end);\r\n}\r\n`,\r\n    );\r\n    code =\r\n      functionName +\r\n      '(' +\r\n      text +\r\n      // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\r\n      // pass it.\r\n      (where1 === 'FROM_END' || where1 === 'FROM_START' ? ', ' + at1 : '') +\r\n      (where2 === 'FROM_END' || where2 === 'FROM_START' ? ', ' + at2 : '') +\r\n      ')';\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_changeCase(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Change capitalization.\r\n  const OPERATORS = {\r\n    'UPPERCASE': '.toUpperCase()',\r\n    'LOWERCASE': '.toLowerCase()',\r\n    'TITLECASE': null,\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('CASE') as OperatorOption];\r\n  const textOrder = operator ? Order.MEMBER : Order.NONE;\r\n  const text = generator.valueToCode(block, 'TEXT', textOrder) || \"''\";\r\n  let code;\r\n  if (operator) {\r\n    // Upper and lower case are functions built into generator.\r\n    code = text + operator;\r\n  } else {\r\n    // Title case is not a native JavaScript function.  Define one.\r\n    const functionName = generator.provideFunction_(\r\n      'textToTitleCase',\r\n      `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str) {\r\n  return str.replace(/\\\\S+/g,\r\n      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});\r\n}\r\n`,\r\n    );\r\n    code = functionName + '(' + text + ')';\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_trim(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Trim spaces.\r\n  const OPERATORS = {\r\n    'LEFT': \".replace(/^[\\\\s\\\\xa0]+/, '')\",\r\n    'RIGHT': \".replace(/[\\\\s\\\\xa0]+$/, '')\",\r\n    'BOTH': '.trim()',\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('MODE') as OperatorOption];\r\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\r\n  return [text + operator, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_print(block: Block, generator: JavascriptGenerator) {\r\n  // Print statement.\r\n  const msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  return 'window.alert(' + msg + ');\\n';\r\n}\r\n\r\nexport function text_prompt_ext(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Prompt function.\r\n  let msg;\r\n  if (block.getField('TEXT')) {\r\n    // Internal message.\r\n    msg = generator.quote_(block.getFieldValue('TEXT'));\r\n  } else {\r\n    // External message.\r\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  }\r\n  let code = 'window.prompt(' + msg + ')';\r\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\r\n  if (toNumber) {\r\n    code = 'Number(' + code + ')';\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport const text_prompt = text_prompt_ext;\r\n\r\nexport function text_count(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  const sub = generator.valueToCode(block, 'SUB', Order.NONE) || \"''\";\r\n  const functionName = generator.provideFunction_(\r\n    'textCount',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle) {\r\n  if (needle.length === 0) {\r\n    return haystack.length + 1;\r\n  } else {\r\n    return haystack.split(needle).length - 1;\r\n  }\r\n}\r\n`,\r\n  );\r\n  const code = functionName + '(' + text + ', ' + sub + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_replace(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  const from = generator.valueToCode(block, 'FROM', Order.NONE) || \"''\";\r\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\r\n  // The regex escaping code below is taken from the implementation of\r\n  // goog.string.regExpEscape.\r\n  const functionName = generator.provideFunction_(\r\n    'textReplace',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle, replacement) {\r\n  needle = needle.replace(/([-()\\\\[\\\\]{}+?*.$\\\\^|,:#<!\\\\\\\\])/g, '\\\\\\\\$1')\r\n                 .replace(/\\\\x08/g, '\\\\\\\\x08');\r\n  return haystack.replace(new RegExp(needle, 'g'), replacement);\r\n}\r\n`,\r\n  );\r\n  const code = functionName + '(' + text + ', ' + from + ', ' + to + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_reverse(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\r\n  const code = text + \".split('').reverse().join('')\";\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating JavaScript for variable blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.JavaScript.variables\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {JavascriptGenerator} from './javascript_generator.js';\r\nimport {Order} from './javascript_generator.js';\r\n\r\nexport function variables_get(\r\n  block: Block,\r\n  generator: JavascriptGenerator,\r\n): [string, Order] {\r\n  // Variable getter.\r\n  const code = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function variables_set(block: Block, generator: JavascriptGenerator) {\r\n  // Variable setter.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'VALUE', Order.ASSIGNMENT) || '0';\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return varName + ' = ' + argument0 + ';\\n';\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2012 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file JavaScript code generator class, including helper methods for\r\n * generating JavaScript for blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.JavaScript\r\n\r\nimport * as Variables from '../../core/variables.js';\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport {CodeGenerator} from '../../core/generator.js';\r\nimport {Names, NameType} from '../../core/names.js';\r\nimport type {Workspace} from '../../core/workspace.js';\r\nimport {inputTypes} from '../../core/inputs/input_types.js';\r\n\r\n/**\r\n * Order of operation ENUMs.\r\n * https://developer.mozilla.org/en/JavaScript/Reference/Operators/Operator_Precedence\r\n */\r\n// prettier-ignore\r\nexport enum Order {\r\n  ATOMIC = 0,            // 0 \"\" ...\r\n  NEW = 1.1,             // new\r\n  MEMBER = 1.2,          // . []\r\n  FUNCTION_CALL = 2,     // ()\r\n  INCREMENT = 3,         // ++\r\n  DECREMENT = 3,         // --\r\n  BITWISE_NOT = 4.1,     // ~\r\n  UNARY_PLUS = 4.2,      // +\r\n  UNARY_NEGATION = 4.3,  // -\r\n  LOGICAL_NOT = 4.4,     // !\r\n  TYPEOF = 4.5,          // typeof\r\n  VOID = 4.6,            // void\r\n  DELETE = 4.7,          // delete\r\n  AWAIT = 4.8,           // await\r\n  EXPONENTIATION = 5.0,  // **\r\n  MULTIPLICATION = 5.1,  // *\r\n  DIVISION = 5.2,        // /\r\n  MODULUS = 5.3,         // %\r\n  SUBTRACTION = 6.1,     // -\r\n  ADDITION = 6.2,        // +\r\n  BITWISE_SHIFT = 7,     // << >> >>>\r\n  RELATIONAL = 8,        // < <= > >=\r\n  IN = 8,                // in\r\n  INSTANCEOF = 8,        // instanceof\r\n  EQUALITY = 9,          // == != === !==\r\n  BITWISE_AND = 10,      // &\r\n  BITWISE_XOR = 11,      // ^\r\n  BITWISE_OR = 12,       // |\r\n  LOGICAL_AND = 13,      // &&\r\n  LOGICAL_OR = 14,       // ||\r\n  CONDITIONAL = 15,      // ?:\r\n  ASSIGNMENT = 16,       // = += -= **= *= /= %= <<= >>= ...\r\n  YIELD = 17,            // yield\r\n  COMMA = 18,            // ,\r\n  NONE = 99,             // (...)\r\n}\r\n\r\n/**\r\n * JavaScript code generator class.\r\n */\r\nexport class JavascriptGenerator extends CodeGenerator {\r\n  /** List of outer-inner pairings that do NOT require parentheses. */\r\n  ORDER_OVERRIDES: [Order, Order][] = [\r\n    // (foo()).bar -> foo().bar\r\n    // (foo())[0] -> foo()[0]\r\n    [Order.FUNCTION_CALL, Order.MEMBER],\r\n    // (foo())() -> foo()()\r\n    [Order.FUNCTION_CALL, Order.FUNCTION_CALL],\r\n    // (foo.bar).baz -> foo.bar.baz\r\n    // (foo.bar)[0] -> foo.bar[0]\r\n    // (foo[0]).bar -> foo[0].bar\r\n    // (foo[0])[1] -> foo[0][1]\r\n    [Order.MEMBER, Order.MEMBER],\r\n    // (foo.bar)() -> foo.bar()\r\n    // (foo[0])() -> foo[0]()\r\n    [Order.MEMBER, Order.FUNCTION_CALL],\r\n\r\n    // !(!foo) -> !!foo\r\n    [Order.LOGICAL_NOT, Order.LOGICAL_NOT],\r\n    // a * (b * c) -> a * b * c\r\n    [Order.MULTIPLICATION, Order.MULTIPLICATION],\r\n    // a + (b + c) -> a + b + c\r\n    [Order.ADDITION, Order.ADDITION],\r\n    // a && (b && c) -> a && b && c\r\n    [Order.LOGICAL_AND, Order.LOGICAL_AND],\r\n    // a || (b || c) -> a || b || c\r\n    [Order.LOGICAL_OR, Order.LOGICAL_OR],\r\n  ];\r\n\r\n  /** @param name Name of the language the generator is for. */\r\n  constructor(name = 'JavaScript') {\r\n    super(name);\r\n    this.isInitialized = false;\r\n\r\n    // Copy Order values onto instance for backwards compatibility\r\n    // while ensuring they are not part of the publically-advertised\r\n    // API.\r\n    //\r\n    // TODO(#7085): deprecate these in due course.  (Could initially\r\n    // replace data properties with get accessors that call\r\n    // deprecate.warn().)\r\n    for (const key in Order) {\r\n      // Must assign Order[key] to a temporary to get the type guard to work;\r\n      // see https://github.com/microsoft/TypeScript/issues/10530.\r\n      const value = Order[key];\r\n      // Skip reverse-lookup entries in the enum.  Due to\r\n      // https://github.com/microsoft/TypeScript/issues/55713 this (as\r\n      // of TypeScript 5.5.2) actually narrows the type of value to\r\n      // never - but that still allows the following assignment to\r\n      // succeed.\r\n      if (typeof value === 'string') continue;\r\n      (this as unknown as Record<string, Order>)['ORDER_' + key] = value;\r\n    }\r\n\r\n    // List of illegal variable names.  This is not intended to be a\r\n    // security feature.  Blockly is 100% client-side, so bypassing\r\n    // this list is trivial.  This is intended to prevent users from\r\n    // accidentally clobbering a built-in object or function.\r\n    //\r\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords\r\n    this.addReservedWords(\r\n      'break,case,catch,class,const,continue,debugger,default,delete,do,' +\r\n        'else,export,extends,finally,for,function,if,import,in,instanceof,' +\r\n        'new,return,super,switch,this,throw,try,typeof,var,void,' +\r\n        'while,with,yield,' +\r\n        'enum,' +\r\n        'implements,interface,let,package,private,protected,public,static,' +\r\n        'await,' +\r\n        'null,true,false,' +\r\n        // Magic variable.\r\n        'arguments,' +\r\n        // Everything in the current environment (835 items in Chrome,\r\n        // 104 in Node).\r\n        Object.getOwnPropertyNames(globalThis).join(','),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Initialise the database of variable names.\r\n   *\r\n   * @param workspace Workspace to generate code from.\r\n   */\r\n  init(workspace: Workspace) {\r\n    super.init(workspace);\r\n\r\n    if (!this.nameDB_) {\r\n      this.nameDB_ = new Names(this.RESERVED_WORDS_);\r\n    } else {\r\n      this.nameDB_.reset();\r\n    }\r\n\r\n    this.nameDB_.setVariableMap(workspace.getVariableMap());\r\n    this.nameDB_.populateVariables(workspace);\r\n    this.nameDB_.populateProcedures(workspace);\r\n\r\n    const defvars = [];\r\n    // Add developer variables (not created or named by the user).\r\n    const devVarList = Variables.allDeveloperVariables(workspace);\r\n    for (let i = 0; i < devVarList.length; i++) {\r\n      defvars.push(\r\n        this.nameDB_.getName(devVarList[i], NameType.DEVELOPER_VARIABLE),\r\n      );\r\n    }\r\n\r\n    // Add user variables, but only ones that are being used.\r\n    const variables = Variables.allUsedVarModels(workspace);\r\n    for (let i = 0; i < variables.length; i++) {\r\n      defvars.push(\r\n        this.nameDB_.getName(variables[i].getId(), NameType.VARIABLE),\r\n      );\r\n    }\r\n\r\n    // Declare all of the variables.\r\n    if (defvars.length) {\r\n      this.definitions_['variables'] = 'var ' + defvars.join(', ') + ';';\r\n    }\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  /**\r\n   * Prepend the generated code with the variable definitions.\r\n   *\r\n   * @param code Generated code.\r\n   * @returns Completed code.\r\n   */\r\n  finish(code: string): string {\r\n    // Convert the definitions dictionary into a list.\r\n    const definitions = Object.values(this.definitions_);\r\n    // Call Blockly.CodeGenerator's finish.\r\n    super.finish(code);\r\n    this.isInitialized = false;\r\n\r\n    this.nameDB_!.reset();\r\n    return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\r\n  }\r\n\r\n  /**\r\n   * Naked values are top-level blocks with outputs that aren't plugged into\r\n   * anything.  A trailing semicolon is needed to make this legal.\r\n   *\r\n   * @param line Line of generated code.\r\n   * @returns Legal line of code.\r\n   */\r\n  scrubNakedValue(line: string): string {\r\n    return line + ';\\n';\r\n  }\r\n\r\n  /**\r\n   * Encode a string as a properly escaped JavaScript string, complete with\r\n   * quotes.\r\n   *\r\n   * @param string Text to encode.\r\n   * @returns JavaScript string.\r\n   */\r\n  quote_(string: string): string {\r\n    // Can't use goog.string.quote since Google's style guide recommends\r\n    // JS string literals use single quotes.\r\n    string = string\r\n      .replace(/\\\\/g, '\\\\\\\\')\r\n      .replace(/\\n/g, '\\\\\\n')\r\n      .replace(/'/g, \"\\\\'\");\r\n    return \"'\" + string + \"'\";\r\n  }\r\n\r\n  /**\r\n   * Encode a string as a properly escaped multiline JavaScript string, complete\r\n   * with quotes.\r\n   * @param string Text to encode.\r\n   * @returns JavaScript string.\r\n   */\r\n  multiline_quote_(string: string): string {\r\n    // Can't use goog.string.quote since Google's style guide recommends\r\n    // JS string literals use single quotes.\r\n    const lines = string.split(/\\n/g).map(this.quote_);\r\n    return lines.join(\" + '\\\\n' +\\n\");\r\n  }\r\n\r\n  /**\r\n   * Common tasks for generating JavaScript from blocks.\r\n   * Handles comments for the specified block and any connected value blocks.\r\n   * Calls any statements following this block.\r\n   *\r\n   * @param block The current block.\r\n   * @param code The JavaScript code created for this block.\r\n   * @param thisOnly True to generate code for only this statement.\r\n   * @returns JavaScript code with comments and subsequent blocks added.\r\n   * @protected\r\n   */\r\n  scrub_(block: Block, code: string, thisOnly = false): string {\r\n    let commentCode = '';\r\n    // Only collect comments for blocks that aren't inline.\r\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\r\n      // Collect comment for this block.\r\n      let comment = block.getCommentText();\r\n      if (comment) {\r\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\r\n        commentCode += this.prefixLines(comment + '\\n', '// ');\r\n      }\r\n      // Collect comments for all value arguments.\r\n      // Don't collect comments for nested statements.\r\n      for (let i = 0; i < block.inputList.length; i++) {\r\n        if (block.inputList[i].type === inputTypes.VALUE) {\r\n          const childBlock = block.inputList[i].connection!.targetBlock();\r\n          if (childBlock) {\r\n            comment = this.allNestedComments(childBlock);\r\n            if (comment) {\r\n              commentCode += this.prefixLines(comment, '// ');\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const nextBlock =\r\n      block.nextConnection && block.nextConnection.targetBlock();\r\n    const nextCode = thisOnly ? '' : this.blockToCode(nextBlock);\r\n    return commentCode + code + nextCode;\r\n  }\r\n\r\n  /**\r\n   * Generate code representing the specified value input, adjusted to take into\r\n   * account indexing (zero- or one-based) and optionally by a specified delta\r\n   * and/or by negation.\r\n   *\r\n   * @param block The block.\r\n   * @param atId The ID of the input block to get (and adjust) the value of.\r\n   * @param delta Value to add.\r\n   * @param negate Whether to negate the value.\r\n   * @param order The highest order acting on this value.\r\n   * @returns The adjusted value or code that evaluates to it.\r\n   */\r\n  getAdjusted(\r\n    block: Block,\r\n    atId: string,\r\n    delta = 0,\r\n    negate = false,\r\n    order = Order.NONE,\r\n  ): string {\r\n    if (block.workspace.options.oneBasedIndex) {\r\n      delta--;\r\n    }\r\n    const defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\r\n\r\n    let orderForInput = order;\r\n    if (delta > 0) {\r\n      orderForInput = Order.ADDITION;\r\n    } else if (delta < 0) {\r\n      orderForInput = Order.SUBTRACTION;\r\n    } else if (negate) {\r\n      orderForInput = Order.UNARY_NEGATION;\r\n    }\r\n\r\n    let at = this.valueToCode(block, atId, orderForInput) || defaultAtIndex;\r\n\r\n    // Easy case: no adjustments.\r\n    if (delta === 0 && !negate) {\r\n      return at;\r\n    }\r\n    // If the index is a naked number, adjust it right now.\r\n    if (stringUtils.isNumber(at)) {\r\n      at = String(Number(at) + delta);\r\n      if (negate) {\r\n        at = String(-Number(at));\r\n      }\r\n      return at;\r\n    }\r\n    // If the index is dynamic, adjust it in code.\r\n    if (delta > 0) {\r\n      at = `${at} + ${delta}`;\r\n    } else if (delta < 0) {\r\n      at = `${at} - ${-delta}`;\r\n    }\r\n    if (negate) {\r\n      at = delta ? `-(${at})` : `-${at}`;\r\n    }\r\n    if (Math.floor(order) >= Math.floor(orderForInput)) {\r\n      at = `(${at})`;\r\n    }\r\n    return at;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating JavaScript for dynamic variable blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.JavaScript.variablesDynamic\r\n\r\n// JavaScript is dynamically typed.\r\nexport {\r\n  variables_get as variables_get_dynamic,\r\n  variables_set as variables_set_dynamic,\r\n} from './variables.js';\r\n","/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Instantiate a JavascriptGenerator and populate it with the\r\n * complete set of block generator functions for JavaScript.  This is\r\n * the entrypoint for javascript_compressed.js.\r\n */\r\n\r\n// Former goog.module ID: Blockly.JavaScript.all\r\n\r\nimport {JavascriptGenerator} from './javascript/javascript_generator.js';\r\nimport * as colour from './javascript/colour.js';\r\nimport * as lists from './javascript/lists.js';\r\nimport * as logic from './javascript/logic.js';\r\nimport * as loops from './javascript/loops.js';\r\nimport * as math from './javascript/math.js';\r\nimport * as procedures from './javascript/procedures.js';\r\nimport * as text from './javascript/text.js';\r\nimport * as variables from './javascript/variables.js';\r\nimport * as variablesDynamic from './javascript/variables_dynamic.js';\r\n\r\nexport * from './javascript/javascript_generator.js';\r\n\r\n/**\r\n * JavaScript code generator instance.\r\n * @type {!JavascriptGenerator}\r\n */\r\nexport const javascriptGenerator = new JavascriptGenerator();\r\n\r\n// Install per-block-type generator functions:\r\nconst generators: typeof javascriptGenerator.forBlock = {\r\n  ...colour,\r\n  ...lists,\r\n  ...logic,\r\n  ...loops,\r\n  ...math,\r\n  ...procedures,\r\n  ...text,\r\n  ...variables,\r\n  ...variablesDynamic,\r\n};\r\nfor (const name in generators) {\r\n  javascriptGenerator.forBlock[name] = generators[name];\r\n}\r\n"]}