{"version":3,"sources":["generators/dart/colour.ts","generators/dart/lists.ts","generators/dart/logic.ts","generators/dart/loops.ts","generators/dart/math.ts","generators/dart/procedures.ts","generators/dart/text.ts","generators/dart/variables.ts","generators/dart/dart_generator.ts","generators/dart/variables_dynamic.ts","generators/dart.ts"],"names":["colour_picker","block","generator","quote_","code","getFieldValue","Order","ATOMIC","colour_random","definitions_","provideFunction_","functionName","FUNCTION_NAME_PLACEHOLDER_","UNARY_POSTFIX","colour_rgb","red","valueToCode","NONE","green","blue","colour_blend","c1","c2","ratio","lists_create_empty","lists_create_with","elements","Array","itemCount_","i","join","lists_repeat","element","lists_length","lists_isEmpty","lists_indexOf","operator","item","workspace","options","oneBasedIndex","ADDITIVE","lists_getIndex","cacheList","listVar","nameDB_","getDistinctName","NameType","VARIABLE","list","mode","where","listOrder","match","at","getAdjusted","xVar","Error","lists_setIndex","value","ASSIGNMENT","lists_getSublist","where1","where2","at1","at2","lists_sort","direction","type","sortFunctionName","lists_split","input","delimiter","lists_reverse","controls_if","n","branchCode","conditionCode","STATEMENT_PREFIX","injectId","statementToCode","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","logic_compare","OPERATORS","order","EQUALITY","RELATIONAL","argument0","argument1","logic_operation","LOGICAL_AND","LOGICAL_OR","defaultArgument","logic_negate","UNARY_PREFIX","logic_boolean","logic_null","logic_ternary","value_if","CONDITIONAL","value_then","value_else","controls_repeat_ext","repeats","getField","String","Number","branch","addLoopTrap","loopVar","endVar","isNumber","controls_whileUntil","until","controls_for","variable0","getVariableName","increment","up","step","Math","abs","startVar","incVar","controls_forEach","controls_flow_statements","xfix","loop","getSurroundLoop","suppressPrefixSuffix","math_number","number","Infinity","math_arithmetic","tuple","MULTIPLICATIVE","math_single","arg","substring","math_constant","CONSTANTS","constant","math_number_property","PROPERTIES","dropdownProperty","suffix","inputOrder","outputOrder","numberToCheck","divisor","math_change","varName","math_on_list","func","math_modulo","math_constrain","argument2","math_random_int","math_random_float","math_atan2","procedures_defreturn","funcName","getProcedureName","xfix1","loopTrap","INFINITE_LOOP_TRAP","returnValue","xfix2","returnType","args","variables","getVars","length","scrub_","procedures_callreturn","procedures_callnoreturn","forBlock","procedures_ifreturn","hasReturnValue_","text","text_multiline","multiline_quote_","indexOf","text_join","text_append","text_length","text_isEmpty","text_indexOf","text_charAt","textOrder","text_getSubstring","requiresLengthCall","text_changeCase","text_trim","text_print","text_prompt_ext","msg","text_count","sub","text_replace","from","to","text_reverse","variables_get","variables_set","SHIFT","BITWISE_AND","BITWISE_XOR","BITWISE_OR","IF_NULL","CASCADE","DartGenerator","CodeGenerator","constructor","name","isInitialized","key","addReservedWords","init","reset","Names","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","defvars","devVarList","allDeveloperVariables","push","getName","DEVELOPER_VARIABLE","allUsedVarModels","getId","finish","imports","definitions","def","replace","scrubNakedValue","line","string","split","map","lines","thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","wrap","COMMENT_WRAP","getProcedureDef","inputList","inputTypes","VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","atId","delta","negate","defaultAtIndex","orderForInput","floor","$jscomp$tmp$exports$module$name","controls_ifelse","controls_repeat","math_round","math_trig","procedures_defnoreturn","text_prompt","dartGenerator","generators","colour","lists","logic","loops","math","procedures","variablesDynamic"],"mappings":"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","file":"dart_compressed.js","sourcesContent":["/**\r\n * @license\r\n * Copyright 2014 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Dart for colour blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Dart.colour\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {DartGenerator} from './dart_generator.js';\r\nimport {Order} from './dart_generator.js';\r\n\r\n// RESERVED WORDS: 'Math'\r\n\r\nexport function colour_picker(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Colour picker.\r\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function colour_random(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Generate a random colour.\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n    \"import 'dart:math' as Math;\";\r\n  const functionName = generator.provideFunction_(\r\n    'colour_random',\r\n    `\r\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}() {\r\n  String hex = '0123456789abcdef';\r\n  var rnd = new Math.Random();\r\n  return '#\\${hex[rnd.nextInt(16)]}\\${hex[rnd.nextInt(16)]}'\r\n      '\\${hex[rnd.nextInt(16)]}\\${hex[rnd.nextInt(16)]}'\r\n      '\\${hex[rnd.nextInt(16)]}\\${hex[rnd.nextInt(16)]}';\r\n}\r\n`,\r\n  );\r\n  const code = functionName + '()';\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function colour_rgb(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Compose a colour from RGB components expressed as percentages.\r\n  const red = generator.valueToCode(block, 'RED', Order.NONE) || 0;\r\n  const green = generator.valueToCode(block, 'GREEN', Order.NONE) || 0;\r\n  const blue = generator.valueToCode(block, 'BLUE', Order.NONE) || 0;\r\n\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n    \"import 'dart:math' as Math;\";\r\n  const functionName = generator.provideFunction_(\r\n    'colour_rgb',\r\n    `\r\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(num r, num g, num b) {\r\n  num rn = (Math.max(Math.min(r, 100), 0) * 2.55).round();\r\n  String rs = rn.toInt().toRadixString(16);\r\n  rs = '0$rs';\r\n  rs = rs.substring(rs.length - 2);\r\n  num gn = (Math.max(Math.min(g, 100), 0) * 2.55).round();\r\n  String gs = gn.toInt().toRadixString(16);\r\n  gs = '0$gs';\r\n  gs = gs.substring(gs.length - 2);\r\n  num bn = (Math.max(Math.min(b, 100), 0) * 2.55).round();\r\n  String bs = bn.toInt().toRadixString(16);\r\n  bs = '0$bs';\r\n  bs = bs.substring(bs.length - 2);\r\n  return '#$rs$gs$bs';\r\n}\r\n`,\r\n  );\r\n  const code = functionName + '(' + red + ', ' + green + ', ' + blue + ')';\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function colour_blend(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Blend two colours together.\r\n  const c1 = generator.valueToCode(block, 'COLOUR1', Order.NONE) || \"'#000000'\";\r\n  const c2 = generator.valueToCode(block, 'COLOUR2', Order.NONE) || \"'#000000'\";\r\n  const ratio = generator.valueToCode(block, 'RATIO', Order.NONE) || 0.5;\r\n\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n    \"import 'dart:math' as Math;\";\r\n  const functionName = generator.provideFunction_(\r\n    'colour_blend',\r\n    `\r\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(String c1, String c2, num ratio) {\r\n  ratio = Math.max(Math.min(ratio, 1), 0);\r\n  int r1 = int.parse('0x\\${c1.substring(1, 3)}');\r\n  int g1 = int.parse('0x\\${c1.substring(3, 5)}');\r\n  int b1 = int.parse('0x\\${c1.substring(5, 7)}');\r\n  int r2 = int.parse('0x\\${c2.substring(1, 3)}');\r\n  int g2 = int.parse('0x\\${c2.substring(3, 5)}');\r\n  int b2 = int.parse('0x\\${c2.substring(5, 7)}');\r\n  num rn = (r1 * (1 - ratio) + r2 * ratio).round();\r\n  String rs = rn.toInt().toRadixString(16);\r\n  num gn = (g1 * (1 - ratio) + g2 * ratio).round();\r\n  String gs = gn.toInt().toRadixString(16);\r\n  num bn = (b1 * (1 - ratio) + b2 * ratio).round();\r\n  String bs = bn.toInt().toRadixString(16);\r\n  rs = '0$rs';\r\n  rs = rs.substring(rs.length - 2);\r\n  gs = '0$gs';\r\n  gs = gs.substring(gs.length - 2);\r\n  bs = '0$bs';\r\n  bs = bs.substring(bs.length - 2);\r\n  return '#$rs$gs$bs';\r\n}\r\n`,\r\n  );\r\n  const code = functionName + '(' + c1 + ', ' + c2 + ', ' + ratio + ')';\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2014 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Dart for list blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Dart.lists\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {CreateWithBlock} from '../../blocks/lists.js';\r\nimport type {DartGenerator} from './dart_generator.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport {Order} from './dart_generator.js';\r\n\r\n// RESERVED WORDS: 'Math'\r\n\r\nexport function lists_create_empty(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Create an empty list.\r\n  return ['[]', Order.ATOMIC];\r\n}\r\n\r\nexport function lists_create_with(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Create a list with any number of elements of any type.\r\n  const createWithBlock = block as CreateWithBlock;\r\n  const elements = new Array(createWithBlock.itemCount_);\r\n  for (let i = 0; i < createWithBlock.itemCount_; i++) {\r\n    elements[i] = generator.valueToCode(block, 'ADD' + i, Order.NONE) || 'null';\r\n  }\r\n  const code = '[' + elements.join(', ') + ']';\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function lists_repeat(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Create a list with one element repeated.\r\n  const element = generator.valueToCode(block, 'ITEM', Order.NONE) || 'null';\r\n  const repeatCount = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\r\n  const code = 'new List.filled(' + repeatCount + ', ' + element + ')';\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function lists_length(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // String or array length.\r\n  const list =\r\n    generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || '[]';\r\n  return [list + '.length', Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function lists_isEmpty(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Is the string null or array empty?\r\n  const list =\r\n    generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || '[]';\r\n  return [list + '.isEmpty', Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function lists_indexOf(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Find an item in the list.\r\n  const operator =\r\n    block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\r\n  const item = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\r\n  const list =\r\n    generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || '[]';\r\n  const code = list + '.' + operator + '(' + item + ')';\r\n  if (block.workspace.options.oneBasedIndex) {\r\n    return [code + ' + 1', Order.ADDITIVE];\r\n  }\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function lists_getIndex(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] | string {\r\n  // Get element at index.\r\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\r\n  const mode = block.getFieldValue('MODE') || 'GET';\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  const listOrder =\r\n    where === 'RANDOM' || where === 'FROM_END'\r\n      ? Order.NONE\r\n      : Order.UNARY_POSTFIX;\r\n  let list = generator.valueToCode(block, 'VALUE', listOrder) || '[]';\r\n  // Cache non-trivial values to variables to prevent repeated look-ups.\r\n  // Closure, which accesses and modifies 'list'.\r\n  function cacheList() {\r\n    const listVar = generator.nameDB_!.getDistinctName(\r\n      'tmp_list',\r\n      NameType.VARIABLE,\r\n    );\r\n    const code = 'List ' + listVar + ' = ' + list + ';\\n';\r\n    list = listVar;\r\n    return code;\r\n  }\r\n  // If `list` would be evaluated more than once (which is the case for\r\n  // RANDOM REMOVE and FROM_END) and is non-trivial, make sure to access it\r\n  // only once.\r\n  if (\r\n    ((where === 'RANDOM' && mode === 'REMOVE') || where === 'FROM_END') &&\r\n    !list.match(/^\\w+$/)\r\n  ) {\r\n    // `list` is an expression, so we may not evaluate it more than once.\r\n    if (where === 'RANDOM') {\r\n      // TODO(#7600): find better approach than casting to any to override\r\n      // CodeGenerator declaring .definitions protected.\r\n      (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n        \"import 'dart:math' as Math;\";\r\n      // We can use multiple statements.\r\n      let code = cacheList();\r\n      const xVar = generator.nameDB_!.getDistinctName(\r\n        'tmp_x',\r\n        NameType.VARIABLE,\r\n      );\r\n      code +=\r\n        'int ' + xVar + ' = new Math.Random().nextInt(' + list + '.length);\\n';\r\n      code += list + '.removeAt(' + xVar + ');\\n';\r\n      return code;\r\n    } else {\r\n      // where === 'FROM_END'\r\n      if (mode === 'REMOVE') {\r\n        // We can use multiple statements.\r\n        const at = generator.getAdjusted(block, 'AT', 1, false, Order.ADDITIVE);\r\n        let code = cacheList();\r\n        code += list + '.removeAt(' + list + '.length' + ' - ' + at + ');\\n';\r\n        return code;\r\n      } else if (mode === 'GET') {\r\n        const at = generator.getAdjusted(block, 'AT', 1);\r\n        // We need to create a procedure to avoid reevaluating values.\r\n        const functionName = generator.provideFunction_(\r\n          'lists_get_from_end',\r\n          `\r\ndynamic ${generator.FUNCTION_NAME_PLACEHOLDER_}(List my_list, num x) {\r\n  x = my_list.length - x;\r\n  return my_list[x];\r\n}\r\n`,\r\n        );\r\n        const code = functionName + '(' + list + ', ' + at + ')';\r\n        return [code, Order.UNARY_POSTFIX];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const at = generator.getAdjusted(block, 'AT', 1);\r\n        // We need to create a procedure to avoid reevaluating values.\r\n        const functionName = generator.provideFunction_(\r\n          'lists_remove_from_end',\r\n          `\r\ndynamic ${generator.FUNCTION_NAME_PLACEHOLDER_}(List my_list, num x) {\r\n  x = my_list.length - x;\r\n  return my_list.removeAt(x);\r\n}\r\n`,\r\n        );\r\n        const code = functionName + '(' + list + ', ' + at + ')';\r\n        return [code, Order.UNARY_POSTFIX];\r\n      }\r\n    }\r\n  } else {\r\n    // Either `list` is a simple variable, or we only need to refer to `list`\r\n    // once.\r\n    switch (where) {\r\n      case 'FIRST':\r\n        if (mode === 'GET') {\r\n          const code = list + '.first';\r\n          return [code, Order.UNARY_POSTFIX];\r\n        } else if (mode === 'GET_REMOVE') {\r\n          const code = list + '.removeAt(0)';\r\n          return [code, Order.UNARY_POSTFIX];\r\n        } else if (mode === 'REMOVE') {\r\n          return list + '.removeAt(0);\\n';\r\n        }\r\n        break;\r\n      case 'LAST':\r\n        if (mode === 'GET') {\r\n          const code = list + '.last';\r\n          return [code, Order.UNARY_POSTFIX];\r\n        } else if (mode === 'GET_REMOVE') {\r\n          const code = list + '.removeLast()';\r\n          return [code, Order.UNARY_POSTFIX];\r\n        } else if (mode === 'REMOVE') {\r\n          return list + '.removeLast();\\n';\r\n        }\r\n        break;\r\n      case 'FROM_START': {\r\n        const at = generator.getAdjusted(block, 'AT');\r\n        if (mode === 'GET') {\r\n          const code = list + '[' + at + ']';\r\n          return [code, Order.UNARY_POSTFIX];\r\n        } else if (mode === 'GET_REMOVE') {\r\n          const code = list + '.removeAt(' + at + ')';\r\n          return [code, Order.UNARY_POSTFIX];\r\n        } else if (mode === 'REMOVE') {\r\n          return list + '.removeAt(' + at + ');\\n';\r\n        }\r\n        break;\r\n      }\r\n      case 'FROM_END': {\r\n        const at = generator.getAdjusted(block, 'AT', 1, false, Order.ADDITIVE);\r\n        if (mode === 'GET') {\r\n          const code = list + '[' + list + '.length - ' + at + ']';\r\n          return [code, Order.UNARY_POSTFIX];\r\n        } else if (mode === 'GET_REMOVE' || mode === 'REMOVE') {\r\n          const code = list + '.removeAt(' + list + '.length - ' + at + ')';\r\n          if (mode === 'GET_REMOVE') {\r\n            return [code, Order.UNARY_POSTFIX];\r\n          } else if (mode === 'REMOVE') {\r\n            return code + ';\\n';\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case 'RANDOM':\r\n        // TODO(#7600): find better approach than casting to any to override\r\n        // CodeGenerator declaring .definitions protected.\r\n        (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n          \"import 'dart:math' as Math;\";\r\n        if (mode === 'REMOVE') {\r\n          // We can use multiple statements.\r\n          const xVar = generator.nameDB_!.getDistinctName(\r\n            'tmp_x',\r\n            NameType.VARIABLE,\r\n          );\r\n          let code =\r\n            'int ' +\r\n            xVar +\r\n            ' = new Math.Random().nextInt(' +\r\n            list +\r\n            '.length);\\n';\r\n          code += list + '.removeAt(' + xVar + ');\\n';\r\n          return code;\r\n        } else if (mode === 'GET') {\r\n          const functionName = generator.provideFunction_(\r\n            'lists_get_random_item',\r\n            `\r\ndynamic ${generator.FUNCTION_NAME_PLACEHOLDER_}(List my_list) {\r\n  int x = new Math.Random().nextInt(my_list.length);\r\n  return my_list[x];\r\n}\r\n`,\r\n          );\r\n          const code = functionName + '(' + list + ')';\r\n          return [code, Order.UNARY_POSTFIX];\r\n        } else if (mode === 'GET_REMOVE') {\r\n          const functionName = generator.provideFunction_(\r\n            'lists_remove_random_item',\r\n            `\r\ndynamic ${generator.FUNCTION_NAME_PLACEHOLDER_}(List my_list) {\r\n  int x = new Math.Random().nextInt(my_list.length);\r\n  return my_list.removeAt(x);\r\n}\r\n`,\r\n          );\r\n          const code = functionName + '(' + list + ')';\r\n          return [code, Order.UNARY_POSTFIX];\r\n        }\r\n        break;\r\n    }\r\n  }\r\n  throw Error('Unhandled combination (lists_getIndex).');\r\n}\r\n\r\nexport function lists_setIndex(block: Block, generator: DartGenerator) {\r\n  // Set element at index.\r\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\r\n  const mode = block.getFieldValue('MODE') || 'GET';\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  let list = generator.valueToCode(block, 'LIST', Order.UNARY_POSTFIX) || '[]';\r\n  const value = generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || 'null';\r\n  // Cache non-trivial values to variables to prevent repeated look-ups.\r\n  // Closure, which accesses and modifies 'list'.\r\n  function cacheList() {\r\n    if (list.match(/^\\w+$/)) {\r\n      return '';\r\n    }\r\n    const listVar = generator.nameDB_!.getDistinctName(\r\n      'tmp_list',\r\n      NameType.VARIABLE,\r\n    );\r\n    const code = 'List ' + listVar + ' = ' + list + ';\\n';\r\n    list = listVar;\r\n    return code;\r\n  }\r\n  switch (where) {\r\n    case 'FIRST':\r\n      if (mode === 'SET') {\r\n        return list + '[0] = ' + value + ';\\n';\r\n      } else if (mode === 'INSERT') {\r\n        return list + '.insert(0, ' + value + ');\\n';\r\n      }\r\n      break;\r\n    case 'LAST':\r\n      if (mode === 'SET') {\r\n        let code = cacheList();\r\n        code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode === 'INSERT') {\r\n        return list + '.add(' + value + ');\\n';\r\n      }\r\n      break;\r\n    case 'FROM_START': {\r\n      const at = generator.getAdjusted(block, 'AT');\r\n      if (mode === 'SET') {\r\n        return list + '[' + at + '] = ' + value + ';\\n';\r\n      } else if (mode === 'INSERT') {\r\n        return list + '.insert(' + at + ', ' + value + ');\\n';\r\n      }\r\n      break;\r\n    }\r\n    case 'FROM_END': {\r\n      const at = generator.getAdjusted(block, 'AT', 1, false, Order.ADDITIVE);\r\n      let code = cacheList();\r\n      if (mode === 'SET') {\r\n        code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode === 'INSERT') {\r\n        code +=\r\n          list + '.insert(' + list + '.length - ' + at + ', ' + value + ');\\n';\r\n        return code;\r\n      }\r\n      break;\r\n    }\r\n    case 'RANDOM': {\r\n      // TODO(#7600): find better approach than casting to any to override\r\n      // CodeGenerator declaring .definitions protected.\r\n      (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n        \"import 'dart:math' as Math;\";\r\n      let code = cacheList();\r\n      const xVar = generator.nameDB_!.getDistinctName(\r\n        'tmp_x',\r\n        NameType.VARIABLE,\r\n      );\r\n      code +=\r\n        'int ' + xVar + ' = new Math.Random().nextInt(' + list + '.length);\\n';\r\n      if (mode === 'SET') {\r\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode === 'INSERT') {\r\n        code += list + '.insert(' + xVar + ', ' + value + ');\\n';\r\n        return code;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  throw Error('Unhandled combination (lists_setIndex).');\r\n}\r\n\r\nexport function lists_getSublist(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Get sublist.\r\n  const list =\r\n    generator.valueToCode(block, 'LIST', Order.UNARY_POSTFIX) || '[]';\r\n  const where1 = block.getFieldValue('WHERE1');\r\n  const where2 = block.getFieldValue('WHERE2');\r\n  let code;\r\n  if (\r\n    list.match(/^\\w+$/) ||\r\n    (where1 !== 'FROM_END' && where2 === 'FROM_START')\r\n  ) {\r\n    // If the list is a is a variable or doesn't require a call for length,\r\n    // don't generate a helper function.\r\n    let at1;\r\n    switch (where1) {\r\n      case 'FROM_START':\r\n        at1 = generator.getAdjusted(block, 'AT1');\r\n        break;\r\n      case 'FROM_END':\r\n        at1 = generator.getAdjusted(block, 'AT1', 1, false, Order.ADDITIVE);\r\n        at1 = list + '.length - ' + at1;\r\n        break;\r\n      case 'FIRST':\r\n        at1 = '0';\r\n        break;\r\n      default:\r\n        throw Error('Unhandled option (lists_getSublist).');\r\n    }\r\n    let at2;\r\n    switch (where2) {\r\n      case 'FROM_START':\r\n        at2 = generator.getAdjusted(block, 'AT2', 1);\r\n        break;\r\n      case 'FROM_END':\r\n        at2 = generator.getAdjusted(block, 'AT2', 0, false, Order.ADDITIVE);\r\n        at2 = list + '.length - ' + at2;\r\n        break;\r\n      case 'LAST':\r\n        // There is no second index if LAST option is chosen.\r\n        break;\r\n      default:\r\n        throw Error('Unhandled option (lists_getSublist).');\r\n    }\r\n    if (where2 === 'LAST') {\r\n      code = list + '.sublist(' + at1 + ')';\r\n    } else {\r\n      code = list + '.sublist(' + at1 + ', ' + at2 + ')';\r\n    }\r\n  } else {\r\n    const at1 = generator.getAdjusted(block, 'AT1');\r\n    const at2 = generator.getAdjusted(block, 'AT2');\r\n    const functionName = generator.provideFunction_(\r\n      'lists_get_sublist',\r\n      `\r\nList ${generator.FUNCTION_NAME_PLACEHOLDER_}(List list, String where1, num at1, String where2, num at2) {\r\n  int getAt(String where, num at) {\r\n    if (where == 'FROM_END') {\r\n      at = list.length - 1 - at;\r\n    } else if (where == 'FIRST') {\r\n      at = 0;\r\n    } else if (where == 'LAST') {\r\n      at = list.length - 1;\r\n    } else if (where != 'FROM_START') {\r\n      throw 'Unhandled option (lists_getSublist).';\r\n    }\r\n    return at;\r\n  }\r\n  at1 = getAt(where1, at1);\r\n  at2 = getAt(where2, at2) + 1;\r\n  return list.sublist(at1, at2);\r\n}\r\n`,\r\n    );\r\n    code =\r\n      functionName +\r\n      '(' +\r\n      list +\r\n      \", '\" +\r\n      where1 +\r\n      \"', \" +\r\n      at1 +\r\n      \", '\" +\r\n      where2 +\r\n      \"', \" +\r\n      at2 +\r\n      ')';\r\n  }\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function lists_sort(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Block for sorting a list.\r\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n  const direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\r\n  const type = block.getFieldValue('TYPE');\r\n  const sortFunctionName = generator.provideFunction_(\r\n    'lists_sort',\r\n    `\r\nList ${generator.FUNCTION_NAME_PLACEHOLDER_}(List list, String type, int direction) {\r\n  var compareFuncs = {\r\n    'NUMERIC': (a, b) => (direction * a.compareTo(b)).toInt(),\r\n    'TEXT': (a, b) => direction * a.toString().compareTo(b.toString()),\r\n    'IGNORE_CASE':\r\n      (a, b) => direction *\r\n      a.toString().toLowerCase().compareTo(b.toString().toLowerCase())\r\n  };\r\n  list = new List.from(list);\r\n  var compare = compareFuncs[type];\r\n  list.sort(compare);\r\n  return list;\r\n}\r\n`,\r\n  );\r\n  return [\r\n    sortFunctionName + '(' + list + ', ' + '\"' + type + '\", ' + direction + ')',\r\n    Order.UNARY_POSTFIX,\r\n  ];\r\n}\r\n\r\nexport function lists_split(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Block for splitting text into a list, or joining a list into text.\r\n  let input = generator.valueToCode(block, 'INPUT', Order.UNARY_POSTFIX);\r\n  const delimiter = generator.valueToCode(block, 'DELIM', Order.NONE) || \"''\";\r\n  const mode = block.getFieldValue('MODE');\r\n  let functionName;\r\n  if (mode === 'SPLIT') {\r\n    if (!input) {\r\n      input = \"''\";\r\n    }\r\n    functionName = 'split';\r\n  } else if (mode === 'JOIN') {\r\n    if (!input) {\r\n      input = '[]';\r\n    }\r\n    functionName = 'join';\r\n  } else {\r\n    throw Error('Unknown mode: ' + mode);\r\n  }\r\n  const code = input + '.' + functionName + '(' + delimiter + ')';\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function lists_reverse(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Block for reversing a list.\r\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n  // XXX What should the operator precedence be for a `new`?\r\n  const code = 'new List.from(' + list + '.reversed)';\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2014 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Dart for logic blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Dart.logic\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {DartGenerator} from './dart_generator.js';\r\nimport {Order} from './dart_generator.js';\r\n\r\nexport function controls_if(block: Block, generator: DartGenerator) {\r\n  // If/elseif/else condition.\r\n  let n = 0;\r\n  let code = '',\r\n    branchCode,\r\n    conditionCode;\r\n  if (generator.STATEMENT_PREFIX) {\r\n    // Automatic prefix insertion is switched off for this block.  Add manually.\r\n    code += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  do {\r\n    conditionCode =\r\n      generator.valueToCode(block, 'IF' + n, Order.NONE) || 'false';\r\n    branchCode = generator.statementToCode(block, 'DO' + n);\r\n    if (generator.STATEMENT_SUFFIX) {\r\n      branchCode =\r\n        generator.prefixLines(\r\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n          generator.INDENT,\r\n        ) + branchCode;\r\n    }\r\n    code +=\r\n      (n > 0 ? 'else ' : '') +\r\n      'if (' +\r\n      conditionCode +\r\n      ') {\\n' +\r\n      branchCode +\r\n      '}';\r\n    n++;\r\n  } while (block.getInput('IF' + n));\r\n\r\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\r\n    branchCode = generator.statementToCode(block, 'ELSE');\r\n    if (generator.STATEMENT_SUFFIX) {\r\n      branchCode =\r\n        generator.prefixLines(\r\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n          generator.INDENT,\r\n        ) + branchCode;\r\n    }\r\n    code += ' else {\\n' + branchCode + '}';\r\n  }\r\n  return code + '\\n';\r\n}\r\n\r\nexport const controls_ifelse = controls_if;\r\n\r\nexport function logic_compare(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Comparison operator.\r\n  const OPERATORS = {\r\n    'EQ': '==',\r\n    'NEQ': '!=',\r\n    'LT': '<',\r\n    'LTE': '<=',\r\n    'GT': '>',\r\n    'GTE': '>=',\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('OP') as OperatorOption];\r\n  const order =\r\n    operator === '==' || operator === '!=' ? Order.EQUALITY : Order.RELATIONAL;\r\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\r\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\r\n  const code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function logic_operation(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Operations 'and', 'or'.\r\n  const operator = block.getFieldValue('OP') === 'AND' ? '&&' : '||';\r\n  const order = operator === '&&' ? Order.LOGICAL_AND : Order.LOGICAL_OR;\r\n  let argument0 = generator.valueToCode(block, 'A', order);\r\n  let argument1 = generator.valueToCode(block, 'B', order);\r\n  if (!argument0 && !argument1) {\r\n    // If there are no arguments, then the return value is false.\r\n    argument0 = 'false';\r\n    argument1 = 'false';\r\n  } else {\r\n    // Single missing arguments have no effect on the return value.\r\n    const defaultArgument = operator === '&&' ? 'true' : 'false';\r\n    if (!argument0) {\r\n      argument0 = defaultArgument;\r\n    }\r\n    if (!argument1) {\r\n      argument1 = defaultArgument;\r\n    }\r\n  }\r\n  const code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function logic_negate(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Negation.\r\n  const order = Order.UNARY_PREFIX;\r\n  const argument0 = generator.valueToCode(block, 'BOOL', order) || 'true';\r\n  const code = '!' + argument0;\r\n  return [code, order];\r\n}\r\n\r\nexport function logic_boolean(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Boolean values true and false.\r\n  const code = block.getFieldValue('BOOL') === 'TRUE' ? 'true' : 'false';\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function logic_null(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Null data type.\r\n  return ['null', Order.ATOMIC];\r\n}\r\n\r\nexport function logic_ternary(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Ternary operator.\r\n  const value_if =\r\n    generator.valueToCode(block, 'IF', Order.CONDITIONAL) || 'false';\r\n  const value_then =\r\n    generator.valueToCode(block, 'THEN', Order.CONDITIONAL) || 'null';\r\n  const value_else =\r\n    generator.valueToCode(block, 'ELSE', Order.CONDITIONAL) || 'null';\r\n  const code = value_if + ' ? ' + value_then + ' : ' + value_else;\r\n  return [code, Order.CONDITIONAL];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2014 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Dart for loop blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Dart.loops\r\n\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport type {ControlFlowInLoopBlock} from '../../blocks/loops.js';\r\nimport type {DartGenerator} from './dart_generator.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport {Order} from './dart_generator.js';\r\n\r\nexport function controls_repeat_ext(block: Block, generator: DartGenerator) {\r\n  let repeats;\r\n  // Repeat n times.\r\n  if (block.getField('TIMES')) {\r\n    // Internal number.\r\n    repeats = String(Number(block.getFieldValue('TIMES')));\r\n  } else {\r\n    // External number.\r\n    repeats = generator.valueToCode(block, 'TIMES', Order.ASSIGNMENT) || '0';\r\n  }\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  let code = '';\r\n  const loopVar = generator.nameDB_!.getDistinctName(\r\n    'count',\r\n    NameType.VARIABLE,\r\n  );\r\n  let endVar = repeats;\r\n  if (!repeats.match(/^\\w+$/) && !stringUtils.isNumber(repeats)) {\r\n    endVar = generator.nameDB_!.getDistinctName(\r\n      'repeat_end',\r\n      NameType.VARIABLE,\r\n    );\r\n    code += 'var ' + endVar + ' = ' + repeats + ';\\n';\r\n  }\r\n  code +=\r\n    'for (int ' +\r\n    loopVar +\r\n    ' = 0; ' +\r\n    loopVar +\r\n    ' < ' +\r\n    endVar +\r\n    '; ' +\r\n    loopVar +\r\n    '++) {\\n' +\r\n    branch +\r\n    '}\\n';\r\n  return code;\r\n}\r\n\r\nexport const controls_repeat = controls_repeat_ext;\r\n\r\nexport function controls_whileUntil(block: Block, generator: DartGenerator) {\r\n  // Do while/until loop.\r\n  const until = block.getFieldValue('MODE') === 'UNTIL';\r\n  let argument0 =\r\n    generator.valueToCode(\r\n      block,\r\n      'BOOL',\r\n      until ? Order.UNARY_PREFIX : Order.NONE,\r\n    ) || 'false';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  if (until) {\r\n    argument0 = '!' + argument0;\r\n  }\r\n  return 'while (' + argument0 + ') {\\n' + branch + '}\\n';\r\n}\r\n\r\nexport function controls_for(block: Block, generator: DartGenerator) {\r\n  // For loop.\r\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const argument0 =\r\n    generator.valueToCode(block, 'FROM', Order.ASSIGNMENT) || '0';\r\n  const argument1 = generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || '0';\r\n  const increment = generator.valueToCode(block, 'BY', Order.ASSIGNMENT) || '1';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  let code;\r\n  if (\r\n    stringUtils.isNumber(argument0) &&\r\n    stringUtils.isNumber(argument1) &&\r\n    stringUtils.isNumber(increment)\r\n  ) {\r\n    // All arguments are simple numbers.\r\n    const up = Number(argument0) <= Number(argument1);\r\n    code =\r\n      'for (' +\r\n      variable0 +\r\n      ' = ' +\r\n      argument0 +\r\n      '; ' +\r\n      variable0 +\r\n      (up ? ' <= ' : ' >= ') +\r\n      argument1 +\r\n      '; ' +\r\n      variable0;\r\n    const step = Math.abs(Number(increment));\r\n    if (step === 1) {\r\n      code += up ? '++' : '--';\r\n    } else {\r\n      code += (up ? ' += ' : ' -= ') + step;\r\n    }\r\n    code += ') {\\n' + branch + '}\\n';\r\n  } else {\r\n    code = '';\r\n    // Cache non-trivial values to variables to prevent repeated look-ups.\r\n    let startVar = argument0;\r\n    if (!argument0.match(/^\\w+$/) && !stringUtils.isNumber(argument0)) {\r\n      startVar = generator.nameDB_!.getDistinctName(\r\n        variable0 + '_start',\r\n        NameType.VARIABLE,\r\n      );\r\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\r\n    }\r\n    let endVar = argument1;\r\n    if (!argument1.match(/^\\w+$/) && !stringUtils.isNumber(argument1)) {\r\n      endVar = generator.nameDB_!.getDistinctName(\r\n        variable0 + '_end',\r\n        NameType.VARIABLE,\r\n      );\r\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\r\n    }\r\n    // Determine loop direction at start, in case one of the bounds\r\n    // changes during loop execution.\r\n    const incVar = generator.nameDB_!.getDistinctName(\r\n      variable0 + '_inc',\r\n      NameType.VARIABLE,\r\n    );\r\n    code += 'num ' + incVar + ' = ';\r\n    if (stringUtils.isNumber(increment)) {\r\n      code += Math.abs(Number(increment)) + ';\\n';\r\n    } else {\r\n      code += '(' + increment + ').abs();\\n';\r\n    }\r\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\r\n    code += generator.INDENT + incVar + ' = -' + incVar + ';\\n';\r\n    code += '}\\n';\r\n    code +=\r\n      'for (' +\r\n      variable0 +\r\n      ' = ' +\r\n      startVar +\r\n      '; ' +\r\n      incVar +\r\n      ' >= 0 ? ' +\r\n      variable0 +\r\n      ' <= ' +\r\n      endVar +\r\n      ' : ' +\r\n      variable0 +\r\n      ' >= ' +\r\n      endVar +\r\n      '; ' +\r\n      variable0 +\r\n      ' += ' +\r\n      incVar +\r\n      ') {\\n' +\r\n      branch +\r\n      '}\\n';\r\n  }\r\n  return code;\r\n}\r\n\r\nexport function controls_forEach(block: Block, generator: DartGenerator) {\r\n  // For each loop.\r\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const argument0 =\r\n    generator.valueToCode(block, 'LIST', Order.ASSIGNMENT) || '[]';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  const code =\r\n    'for (var ' + variable0 + ' in ' + argument0 + ') {\\n' + branch + '}\\n';\r\n  return code;\r\n}\r\n\r\nexport function controls_flow_statements(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n) {\r\n  // Flow statements: continue, break.\r\n  let xfix = '';\r\n  if (generator.STATEMENT_PREFIX) {\r\n    // Automatic prefix insertion is switched off for this block.  Add manually.\r\n    xfix += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    // Inject any statement suffix here since the regular one at the end\r\n    // will not get executed if the break/continue is triggered.\r\n    xfix += generator.injectId(generator.STATEMENT_SUFFIX, block);\r\n  }\r\n  if (generator.STATEMENT_PREFIX) {\r\n    const loop = (block as ControlFlowInLoopBlock).getSurroundLoop();\r\n    if (loop && !loop.suppressPrefixSuffix) {\r\n      // Inject loop's statement prefix here since the regular one at the end\r\n      // of the loop will not get executed if 'continue' is triggered.\r\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\r\n      xfix += generator.injectId(generator.STATEMENT_PREFIX, loop);\r\n    }\r\n  }\r\n  switch (block.getFieldValue('FLOW')) {\r\n    case 'BREAK':\r\n      return xfix + 'break;\\n';\r\n    case 'CONTINUE':\r\n      return xfix + 'continue;\\n';\r\n  }\r\n  throw Error('Unknown flow statement.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2014 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Dart for math blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Dart.math\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {DartGenerator} from './dart_generator.js';\r\nimport {Order} from './dart_generator.js';\r\n\r\n// RESERVED WORDS: 'Math'\r\n\r\nexport function math_number(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Numeric value.\r\n  const number = Number(block.getFieldValue('NUM'));\r\n  if (number === Infinity) {\r\n    return ['double.infinity', Order.UNARY_POSTFIX];\r\n  } else if (number === -Infinity) {\r\n    return ['-double.infinity', Order.UNARY_PREFIX];\r\n  } else {\r\n    // -4.abs() returns -4 in generator due to strange order of\r\n    // operation choices.  4 is actually an operator and a number.\r\n    // Reflect this in the order.\r\n    return [String(number), number < 0 ? Order.UNARY_PREFIX : Order.ATOMIC];\r\n  }\r\n}\r\n\r\nexport function math_arithmetic(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Basic arithmetic operators, and power.\r\n  const OPERATORS: Record<string, [string | null, Order]> = {\r\n    'ADD': [' + ', Order.ADDITIVE],\r\n    'MINUS': [' - ', Order.ADDITIVE],\r\n    'MULTIPLY': [' * ', Order.MULTIPLICATIVE],\r\n    'DIVIDE': [' / ', Order.MULTIPLICATIVE],\r\n    'POWER': [null, Order.NONE], // Handle power separately.\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const tuple = OPERATORS[block.getFieldValue('OP') as OperatorOption];\r\n  const operator = tuple[0];\r\n  const order = tuple[1];\r\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\r\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\r\n  let code;\r\n  // Power in generator requires a special case since it has no operator.\r\n  if (!operator) {\r\n    // TODO(#7600): find better approach than casting to any to override\r\n    // CodeGenerator declaring .definitions protected.\r\n    (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n      \"import 'dart:math' as Math;\";\r\n    code = 'Math.pow(' + argument0 + ', ' + argument1 + ')';\r\n    return [code, Order.UNARY_POSTFIX];\r\n  }\r\n  code = argument0 + operator + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function math_single(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Math operators with single operand.\r\n  const operator = block.getFieldValue('OP');\r\n  let code;\r\n  let arg;\r\n  if (operator === 'NEG') {\r\n    // Negation is a special case given its different operator precedence.\r\n    arg = generator.valueToCode(block, 'NUM', Order.UNARY_PREFIX) || '0';\r\n    if (arg[0] === '-') {\r\n      // --3 is not legal in generator.\r\n      arg = ' ' + arg;\r\n    }\r\n    code = '-' + arg;\r\n    return [code, Order.UNARY_PREFIX];\r\n  }\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n    \"import 'dart:math' as Math;\";\r\n  if (operator === 'ABS' || operator.substring(0, 5) === 'ROUND') {\r\n    arg = generator.valueToCode(block, 'NUM', Order.UNARY_POSTFIX) || '0';\r\n  } else if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\r\n    arg = generator.valueToCode(block, 'NUM', Order.MULTIPLICATIVE) || '0';\r\n  } else {\r\n    arg = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\r\n  }\r\n  // First, handle cases which generate values that don't need parentheses\r\n  // wrapping the code.\r\n  switch (operator) {\r\n    case 'ABS':\r\n      code = arg + '.abs()';\r\n      break;\r\n    case 'ROOT':\r\n      code = 'Math.sqrt(' + arg + ')';\r\n      break;\r\n    case 'LN':\r\n      code = 'Math.log(' + arg + ')';\r\n      break;\r\n    case 'EXP':\r\n      code = 'Math.exp(' + arg + ')';\r\n      break;\r\n    case 'POW10':\r\n      code = 'Math.pow(10,' + arg + ')';\r\n      break;\r\n    case 'ROUND':\r\n      code = arg + '.round()';\r\n      break;\r\n    case 'ROUNDUP':\r\n      code = arg + '.ceil()';\r\n      break;\r\n    case 'ROUNDDOWN':\r\n      code = arg + '.floor()';\r\n      break;\r\n    case 'SIN':\r\n      code = 'Math.sin(' + arg + ' / 180 * Math.pi)';\r\n      break;\r\n    case 'COS':\r\n      code = 'Math.cos(' + arg + ' / 180 * Math.pi)';\r\n      break;\r\n    case 'TAN':\r\n      code = 'Math.tan(' + arg + ' / 180 * Math.pi)';\r\n      break;\r\n  }\r\n  if (code) {\r\n    return [code, Order.UNARY_POSTFIX];\r\n  }\r\n  // Second, handle cases which generate values that may need parentheses\r\n  // wrapping the code.\r\n  switch (operator) {\r\n    case 'LOG10':\r\n      code = 'Math.log(' + arg + ') / Math.log(10)';\r\n      break;\r\n    case 'ASIN':\r\n      code = 'Math.asin(' + arg + ') / Math.pi * 180';\r\n      break;\r\n    case 'ACOS':\r\n      code = 'Math.acos(' + arg + ') / Math.pi * 180';\r\n      break;\r\n    case 'ATAN':\r\n      code = 'Math.atan(' + arg + ') / Math.pi * 180';\r\n      break;\r\n    default:\r\n      throw Error('Unknown math operator: ' + operator);\r\n  }\r\n  return [code, Order.MULTIPLICATIVE];\r\n}\r\n\r\nexport function math_constant(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\r\n  const CONSTANTS: Record<string, [string, Order]> = {\r\n    'PI': ['Math.pi', Order.UNARY_POSTFIX],\r\n    'E': ['Math.e', Order.UNARY_POSTFIX],\r\n    'GOLDEN_RATIO': ['(1 + Math.sqrt(5)) / 2', Order.MULTIPLICATIVE],\r\n    'SQRT2': ['Math.sqrt2', Order.UNARY_POSTFIX],\r\n    'SQRT1_2': ['Math.sqrt1_2', Order.UNARY_POSTFIX],\r\n    'INFINITY': ['double.infinity', Order.ATOMIC],\r\n  };\r\n  type ConstantOption = keyof typeof CONSTANTS;\r\n  const constant = block.getFieldValue('CONSTANT') as ConstantOption;\r\n  if (constant !== 'INFINITY') {\r\n    // TODO(#7600): find better approach than casting to any to override\r\n    // CodeGenerator declaring .definitions protected.\r\n    (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n      \"import 'dart:math' as Math;\";\r\n  }\r\n  return CONSTANTS[constant];\r\n}\r\n\r\nexport function math_number_property(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Check if a number is even, odd, prime, whole, positive, or negative\r\n  // or if it is divisible by certain number. Returns true or false.\r\n  const PROPERTIES: Record<string, [string | null, Order, Order]> = {\r\n    'EVEN': [' % 2 == 0', Order.MULTIPLICATIVE, Order.EQUALITY],\r\n    'ODD': [' % 2 == 1', Order.MULTIPLICATIVE, Order.EQUALITY],\r\n    'WHOLE': [' % 1 == 0', Order.MULTIPLICATIVE, Order.EQUALITY],\r\n    'POSITIVE': [' > 0', Order.RELATIONAL, Order.RELATIONAL],\r\n    'NEGATIVE': [' < 0', Order.RELATIONAL, Order.RELATIONAL],\r\n    'DIVISIBLE_BY': [null, Order.MULTIPLICATIVE, Order.EQUALITY],\r\n    'PRIME': [null, Order.NONE, Order.UNARY_POSTFIX],\r\n  };\r\n  type PropertyOption = keyof typeof PROPERTIES;\r\n  const dropdownProperty = block.getFieldValue('PROPERTY') as PropertyOption;\r\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\r\n  const numberToCheck =\r\n    generator.valueToCode(block, 'NUMBER_TO_CHECK', inputOrder) || '0';\r\n  let code;\r\n  if (dropdownProperty === 'PRIME') {\r\n    // Prime is a special case as it is not a one-liner test.\r\n    // TODO(#7600): find better approach than casting to any to override\r\n    // CodeGenerator declaring .definitions protected.\r\n    (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n      \"import 'dart:math' as Math;\";\r\n    const functionName = generator.provideFunction_(\r\n      'math_isPrime',\r\n      `\r\nbool ${generator.FUNCTION_NAME_PLACEHOLDER_}(n) {\r\n  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\r\n  if (n == 2 || n == 3) {\r\n    return true;\r\n  }\r\n  // False if n is null, negative, is 1, or not whole.\r\n  // And false if n is divisible by 2 or 3.\r\n  if (n == null || n <= 1 || n % 1 != 0 || n % 2 == 0 || n % 3 == 0) {\r\n    return false;\r\n  }\r\n  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\r\n  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {\r\n    if (n % (x - 1) == 0 || n % (x + 1) == 0) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n`,\r\n    );\r\n    code = functionName + '(' + numberToCheck + ')';\r\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\r\n    const divisor =\r\n      generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATIVE) || '0';\r\n    if (divisor === '0') {\r\n      return ['false', Order.ATOMIC];\r\n    }\r\n    code = numberToCheck + ' % ' + divisor + ' == 0';\r\n  } else {\r\n    code = numberToCheck + suffix;\r\n  }\r\n  return [code, outputOrder];\r\n}\r\n\r\nexport function math_change(block: Block, generator: DartGenerator) {\r\n  // Add to a variable in place.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'DELTA', Order.ADDITIVE) || '0';\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return (\r\n    varName +\r\n    ' = (' +\r\n    varName +\r\n    ' is num ? ' +\r\n    varName +\r\n    ' : 0) + ' +\r\n    argument0 +\r\n    ';\\n'\r\n  );\r\n}\r\n\r\n// Rounding functions have a single operand.\r\nexport const math_round = math_single;\r\n// Trigonometry functions have a single operand.\r\nexport const math_trig = math_single;\r\n\r\nexport function math_on_list(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Math functions for lists.\r\n  const func = block.getFieldValue('OP');\r\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n  let code;\r\n  switch (func) {\r\n    case 'SUM': {\r\n      const functionName = generator.provideFunction_(\r\n        'math_sum',\r\n        `\r\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List<num> myList) {\r\n  num sumVal = 0;\r\n  myList.forEach((num entry) {sumVal += entry;});\r\n  return sumVal;\r\n}\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'MIN': {\r\n      // TODO(#7600): find better approach than casting to any to override\r\n      // CodeGenerator declaring .definitions protected.\r\n      (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n        \"import 'dart:math' as Math;\";\r\n      const functionName = generator.provideFunction_(\r\n        'math_min',\r\n        `\r\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List<num> myList) {\r\n  if (myList.isEmpty) return null;\r\n  num minVal = myList[0];\r\n  myList.forEach((num entry) {minVal = Math.min(minVal, entry);});\r\n  return minVal;\r\n}\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'MAX': {\r\n      // TODO(#7600): find better approach than casting to any to override\r\n      // CodeGenerator declaring .definitions protected.\r\n      (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n        \"import 'dart:math' as Math;\";\r\n      const functionName = generator.provideFunction_(\r\n        'math_max',\r\n        `\r\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List<num> myList) {\r\n  if (myList.isEmpty) return null;\r\n  num maxVal = myList[0];\r\n  myList.forEach((num entry) {maxVal = Math.max(maxVal, entry);});\r\n  return maxVal;\r\n}\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'AVERAGE': {\r\n      // This operation exclude null and values that are not int or float:\r\n      //   math_mean([null,null,\"aString\",1,9]) -> 5.0\r\n      const functionName = generator.provideFunction_(\r\n        'math_mean',\r\n        `\r\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List myList) {\r\n  // First filter list for numbers only.\r\n  List localList = new List.from(myList);\r\n  localList.removeWhere((a) => a is! num);\r\n  if (localList.isEmpty) return null;\r\n  num sumVal = 0;\r\n  localList.forEach((var entry) {sumVal += entry;});\r\n  return sumVal / localList.length;\r\n}\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'MEDIAN': {\r\n      const functionName = generator.provideFunction_(\r\n        'math_median',\r\n        `\r\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List myList) {\r\n  // First filter list for numbers only, then sort, then return middle value\r\n  // or the average of two middle values if list has an even number of elements.\r\n  List localList = new List.from(myList);\r\n  localList.removeWhere((a) => a is! num);\r\n  if (localList.isEmpty) return null;\r\n  localList.sort((a, b) => (a - b));\r\n  int index = localList.length ~/ 2;\r\n  if (localList.length % 2 == 1) {\r\n    return localList[index];\r\n  } else {\r\n    return (localList[index - 1] + localList[index]) / 2;\r\n  }\r\n}\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'MODE': {\r\n      // TODO(#7600): find better approach than casting to any to override\r\n      // CodeGenerator declaring .definitions protected.\r\n      (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n        \"import 'dart:math' as Math;\";\r\n      // As a list of numbers can contain more than one mode,\r\n      // the returned result is provided as an array.\r\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1]\r\n      const functionName = generator.provideFunction_(\r\n        'math_modes',\r\n        `\r\nList ${generator.FUNCTION_NAME_PLACEHOLDER_}(List values) {\r\n  List modes = [];\r\n  List counts = [];\r\n  int maxCount = 0;\r\n  for (int i = 0; i < values.length; i++) {\r\n    var value = values[i];\r\n    bool found = false;\r\n    int thisCount;\r\n    for (int j = 0; j < counts.length; j++) {\r\n      if (counts[j][0] == value) {\r\n        thisCount = ++counts[j][1];\r\n        found = true;\r\n        break;\r\n      }\r\n    }\r\n    if (!found) {\r\n      counts.add([value, 1]);\r\n      thisCount = 1;\r\n    }\r\n    maxCount = Math.max(thisCount, maxCount);\r\n  }\r\n  for (int j = 0; j < counts.length; j++) {\r\n    if (counts[j][1] == maxCount) {\r\n        modes.add(counts[j][0]);\r\n    }\r\n  }\r\n  return modes;\r\n}\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'STD_DEV': {\r\n      // TODO(#7600): find better approach than casting to any to override\r\n      // CodeGenerator declaring .definitions protected.\r\n      (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n        \"import 'dart:math' as Math;\";\r\n      const functionName = generator.provideFunction_(\r\n        'math_standard_deviation',\r\n        `\r\nnum ${generator.FUNCTION_NAME_PLACEHOLDER_}(List myList) {\r\n  // First filter list for numbers only.\r\n  List numbers = new List.from(myList);\r\n  numbers.removeWhere((a) => a is! num);\r\n  if (numbers.isEmpty) return null;\r\n  num n = numbers.length;\r\n  num sum = 0;\r\n  numbers.forEach((x) => sum += x);\r\n  num mean = sum / n;\r\n  num sumSquare = 0;\r\n  numbers.forEach((x) => sumSquare += Math.pow(x - mean, 2));\r\n  return Math.sqrt(sumSquare / n);\r\n}\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'RANDOM': {\r\n      // TODO(#7600): find better approach than casting to any to override\r\n      // CodeGenerator declaring .definitions protected.\r\n      (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n        \"import 'dart:math' as Math;\";\r\n      const functionName = generator.provideFunction_(\r\n        'math_random_item',\r\n        `\r\ndynamic ${generator.FUNCTION_NAME_PLACEHOLDER_}(List myList) {\r\n  int x = new Math.Random().nextInt(myList.length);\r\n  return myList[x];\r\n}\r\n`,\r\n      );\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    default:\r\n      throw Error('Unknown operator: ' + func);\r\n  }\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function math_modulo(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Remainder computation.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'DIVIDEND', Order.MULTIPLICATIVE) || '0';\r\n  const argument1 =\r\n    generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATIVE) || '0';\r\n  const code = argument0 + ' % ' + argument1;\r\n  return [code, Order.MULTIPLICATIVE];\r\n}\r\n\r\nexport function math_constrain(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Constrain a number between two limits.\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n    \"import 'dart:math' as Math;\";\r\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'LOW', Order.NONE) || '0';\r\n  const argument2 =\r\n    generator.valueToCode(block, 'HIGH', Order.NONE) || 'double.infinity';\r\n  const code =\r\n    'Math.min(Math.max(' +\r\n    argument0 +\r\n    ', ' +\r\n    argument1 +\r\n    '), ' +\r\n    argument2 +\r\n    ')';\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function math_random_int(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Random integer between [X] and [Y].\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n    \"import 'dart:math' as Math;\";\r\n  const argument0 = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'TO', Order.NONE) || '0';\r\n  const functionName = generator.provideFunction_(\r\n    'math_random_int',\r\n    `\r\nint ${generator.FUNCTION_NAME_PLACEHOLDER_}(num a, num b) {\r\n  if (a > b) {\r\n    // Swap a and b to ensure a is smaller.\r\n    num c = a;\r\n    a = b;\r\n    b = c;\r\n  }\r\n  return new Math.Random().nextInt(b - a + 1) + a;\r\n}\r\n`,\r\n  );\r\n  const code = functionName + '(' + argument0 + ', ' + argument1 + ')';\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function math_random_float(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Random fraction between 0 and 1.\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n    \"import 'dart:math' as Math;\";\r\n  return ['new Math.Random().nextDouble()', Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function math_atan2(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n    \"import 'dart:math' as Math;\";\r\n  const argument0 = generator.valueToCode(block, 'X', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'Y', Order.NONE) || '0';\r\n  return [\r\n    'Math.atan2(' + argument1 + ', ' + argument0 + ') / Math.pi * 180',\r\n    Order.MULTIPLICATIVE,\r\n  ];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2014 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Dart for procedure blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Dart.procedures\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {IfReturnBlock} from '../../blocks/procedures.js';\r\nimport type {DartGenerator} from './dart_generator.js';\r\nimport {Order} from './dart_generator.js';\r\n\r\nexport function procedures_defreturn(block: Block, generator: DartGenerator) {\r\n  // Define a procedure with a return value.\r\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\r\n  let xfix1 = '';\r\n  if (generator.STATEMENT_PREFIX) {\r\n    xfix1 += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    xfix1 += generator.injectId(generator.STATEMENT_SUFFIX, block);\r\n  }\r\n  if (xfix1) {\r\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\r\n  }\r\n  let loopTrap = '';\r\n  if (generator.INFINITE_LOOP_TRAP) {\r\n    loopTrap = generator.prefixLines(\r\n      generator.injectId(generator.INFINITE_LOOP_TRAP, block),\r\n      generator.INDENT,\r\n    );\r\n  }\r\n  const branch = generator.statementToCode(block, 'STACK');\r\n  let returnValue = generator.valueToCode(block, 'RETURN', Order.NONE) || '';\r\n  let xfix2 = '';\r\n  if (branch && returnValue) {\r\n    // After executing the function body, revisit this block for the return.\r\n    xfix2 = xfix1;\r\n  }\r\n  if (returnValue) {\r\n    returnValue = generator.INDENT + 'return ' + returnValue + ';\\n';\r\n  }\r\n  const returnType = returnValue ? 'dynamic' : 'void';\r\n  const args = [];\r\n  const variables = block.getVars();\r\n  for (let i = 0; i < variables.length; i++) {\r\n    args[i] = generator.getVariableName(variables[i]);\r\n  }\r\n  let code =\r\n    returnType +\r\n    ' ' +\r\n    funcName +\r\n    '(' +\r\n    args.join(', ') +\r\n    ') {\\n' +\r\n    xfix1 +\r\n    loopTrap +\r\n    branch +\r\n    xfix2 +\r\n    returnValue +\r\n    '}';\r\n  code = generator.scrub_(block, code);\r\n  // Add % so as not to collide with helper functions in definitions list.\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['%' + funcName] = code;\r\n  return null;\r\n}\r\n\r\n// Defining a procedure without a return value uses the same generator as\r\n// a procedure with a return value.\r\nexport const procedures_defnoreturn = procedures_defreturn;\r\n\r\nexport function procedures_callreturn(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Call a procedure with a return value.\r\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\r\n  const args = [];\r\n  const variables = block.getVars();\r\n  for (let i = 0; i < variables.length; i++) {\r\n    args[i] = generator.valueToCode(block, 'ARG' + i, Order.NONE) || 'null';\r\n  }\r\n  let code = funcName + '(' + args.join(', ') + ')';\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function procedures_callnoreturn(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n) {\r\n  // Call a procedure with no return value.\r\n  // Generated code is for a function call as a statement is the same as a\r\n  // function call as a value, with the addition of line ending.\r\n  const tuple = generator.forBlock['procedures_callreturn'](\r\n    block,\r\n    generator,\r\n  ) as [string, Order];\r\n  return tuple[0] + ';\\n';\r\n}\r\n\r\nexport function procedures_ifreturn(block: Block, generator: DartGenerator) {\r\n  // Conditionally return value from a procedure.\r\n  const condition =\r\n    generator.valueToCode(block, 'CONDITION', Order.NONE) || 'false';\r\n  let code = 'if (' + condition + ') {\\n';\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    // Inject any statement suffix here since the regular one at the end\r\n    // will not get executed if the return is triggered.\r\n    code += generator.prefixLines(\r\n      generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n      generator.INDENT,\r\n    );\r\n  }\r\n  if ((block as IfReturnBlock).hasReturnValue_) {\r\n    const value = generator.valueToCode(block, 'VALUE', Order.NONE) || 'null';\r\n    code += generator.INDENT + 'return ' + value + ';\\n';\r\n  } else {\r\n    code += generator.INDENT + 'return;\\n';\r\n  }\r\n  code += '}\\n';\r\n  return code;\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2014 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Dart for text blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Dart.texts\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {DartGenerator} from './dart_generator.js';\r\nimport type {JoinMutatorBlock} from '../../blocks/text.js';\r\nimport {Order} from './dart_generator.js';\r\n\r\n// RESERVED WORDS: 'Html,Math'\r\n\r\nexport function text(block: Block, generator: DartGenerator): [string, Order] {\r\n  // Text value.\r\n  const code = generator.quote_(block.getFieldValue('TEXT'));\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function text_multiline(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Text value.\r\n  const code = generator.multiline_quote_(block.getFieldValue('TEXT'));\r\n  const order = code.indexOf('+') !== -1 ? Order.ADDITIVE : Order.ATOMIC;\r\n  return [code, order];\r\n}\r\n\r\nexport function text_join(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Create a string made up of any number of elements of any type.\r\n  const joinBlock = block as JoinMutatorBlock;\r\n  switch (joinBlock.itemCount_) {\r\n    case 0:\r\n      return [\"''\", Order.ATOMIC];\r\n    case 1: {\r\n      const element =\r\n        generator.valueToCode(block, 'ADD0', Order.UNARY_POSTFIX) || \"''\";\r\n      const code = element + '.toString()';\r\n      return [code, Order.UNARY_POSTFIX];\r\n    }\r\n    default: {\r\n      const elements = new Array(joinBlock.itemCount_);\r\n      for (let i = 0; i < joinBlock.itemCount_; i++) {\r\n        elements[i] =\r\n          generator.valueToCode(block, 'ADD' + i, Order.NONE) || \"''\";\r\n      }\r\n      const code = '[' + elements.join(',') + '].join()';\r\n      return [code, Order.UNARY_POSTFIX];\r\n    }\r\n  }\r\n}\r\n\r\nexport function text_append(block: Block, generator: DartGenerator) {\r\n  // Append to a variable in place.\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const value = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  return varName + ' = [' + varName + ', ' + value + '].join();\\n';\r\n}\r\n\r\nexport function text_length(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // String or array length.\r\n  const text =\r\n    generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || \"''\";\r\n  return [text + '.length', Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function text_isEmpty(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Is the string null or array empty?\r\n  const text =\r\n    generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || \"''\";\r\n  return [text + '.isEmpty', Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function text_indexOf(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Search the text for a substring.\r\n  const operator =\r\n    block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\r\n  const substring = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\r\n  const text =\r\n    generator.valueToCode(block, 'VALUE', Order.UNARY_POSTFIX) || \"''\";\r\n  const code = text + '.' + operator + '(' + substring + ')';\r\n  if (block.workspace.options.oneBasedIndex) {\r\n    return [code + ' + 1', Order.ADDITIVE];\r\n  }\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function text_charAt(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Get letter at index.\r\n  // Note: Until January 2013 this block did not have the WHERE input.\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  const textOrder =\r\n    where === 'FIRST' || where === 'FROM_START'\r\n      ? Order.UNARY_POSTFIX\r\n      : Order.NONE;\r\n  const text = generator.valueToCode(block, 'VALUE', textOrder) || \"''\";\r\n  let at;\r\n  switch (where) {\r\n    case 'FIRST': {\r\n      const code = text + '[0]';\r\n      return [code, Order.UNARY_POSTFIX];\r\n    }\r\n    case 'FROM_START': {\r\n      at = generator.getAdjusted(block, 'AT');\r\n      const code = text + '[' + at + ']';\r\n      return [code, Order.UNARY_POSTFIX];\r\n    }\r\n    case 'LAST':\r\n      at = 1;\r\n    // Fall through.\r\n    case 'FROM_END': {\r\n      at = generator.getAdjusted(block, 'AT', 1);\r\n      const functionName = generator.provideFunction_(\r\n        'text_get_from_end',\r\n        `\r\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(String text, num x) {\r\n  return text[text.length - x];\r\n}\r\n`,\r\n      );\r\n      const code = functionName + '(' + text + ', ' + at + ')';\r\n      return [code, Order.UNARY_POSTFIX];\r\n    }\r\n    case 'RANDOM': {\r\n      // TODO(#7600): find better approach than casting to any to override\r\n      // CodeGenerator declaring .definitions protected.\r\n      (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n        \"import 'dart:math' as Math;\";\r\n      const functionName = generator.provideFunction_(\r\n        'text_random_letter',\r\n        `\r\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(String text) {\r\n  int x = new Math.Random().nextInt(text.length);\r\n  return text[x];\r\n}\r\n`,\r\n      );\r\n      const code = functionName + '(' + text + ')';\r\n      return [code, Order.UNARY_POSTFIX];\r\n    }\r\n  }\r\n  throw Error('Unhandled option (text_charAt).');\r\n}\r\n\r\nexport function text_getSubstring(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Get substring.\r\n  const where1 = block.getFieldValue('WHERE1');\r\n  const where2 = block.getFieldValue('WHERE2');\r\n  const requiresLengthCall = where1 !== 'FROM_END' && where2 === 'FROM_START';\r\n  const textOrder = requiresLengthCall ? Order.UNARY_POSTFIX : Order.NONE;\r\n  const text = generator.valueToCode(block, 'STRING', textOrder) || \"''\";\r\n  let code;\r\n  if (where1 === 'FIRST' && where2 === 'LAST') {\r\n    code = text;\r\n    return [code, Order.NONE];\r\n  } else if (text.match(/^'?\\w+'?$/) || requiresLengthCall) {\r\n    // If the text is a variable or literal or doesn't require a call for\r\n    // length, don't generate a helper function.\r\n    let at1;\r\n    switch (where1) {\r\n      case 'FROM_START':\r\n        at1 = generator.getAdjusted(block, 'AT1');\r\n        break;\r\n      case 'FROM_END':\r\n        at1 = generator.getAdjusted(block, 'AT1', 1, false, Order.ADDITIVE);\r\n        at1 = text + '.length - ' + at1;\r\n        break;\r\n      case 'FIRST':\r\n        at1 = '0';\r\n        break;\r\n      default:\r\n        throw Error('Unhandled option (text_getSubstring).');\r\n    }\r\n    let at2;\r\n    switch (where2) {\r\n      case 'FROM_START':\r\n        at2 = generator.getAdjusted(block, 'AT2', 1);\r\n        break;\r\n      case 'FROM_END':\r\n        at2 = generator.getAdjusted(block, 'AT2', 0, false, Order.ADDITIVE);\r\n        at2 = text + '.length - ' + at2;\r\n        break;\r\n      case 'LAST':\r\n        break;\r\n      default:\r\n        throw Error('Unhandled option (text_getSubstring).');\r\n    }\r\n\r\n    if (where2 === 'LAST') {\r\n      code = text + '.substring(' + at1 + ')';\r\n    } else {\r\n      code = text + '.substring(' + at1 + ', ' + at2 + ')';\r\n    }\r\n  } else {\r\n    const at1 = generator.getAdjusted(block, 'AT1');\r\n    const at2 = generator.getAdjusted(block, 'AT2');\r\n    const functionName = generator.provideFunction_(\r\n      'text_get_substring',\r\n      `\r\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(String text, String where1, num at1, String where2, num at2) {\r\n  int getAt(String where, num at) {\r\n    if (where == 'FROM_END') {\r\n      at = text.length - 1 - at;\r\n    } else if (where == 'FIRST') {\r\n      at = 0;\r\n    } else if (where == 'LAST') {\r\n      at = text.length - 1;\r\n    } else if (where != 'FROM_START') {\r\n      throw 'Unhandled option (text_getSubstring).';\r\n    }\r\n    return at;\r\n  }\r\n  at1 = getAt(where1, at1);\r\n  at2 = getAt(where2, at2) + 1;\r\n  return text.substring(at1, at2);\r\n}\r\n`,\r\n    );\r\n    code =\r\n      functionName +\r\n      '(' +\r\n      text +\r\n      \", '\" +\r\n      where1 +\r\n      \"', \" +\r\n      at1 +\r\n      \", '\" +\r\n      where2 +\r\n      \"', \" +\r\n      at2 +\r\n      ')';\r\n  }\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function text_changeCase(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Change capitalization.\r\n  const OPERATORS = {\r\n    'UPPERCASE': '.toUpperCase()',\r\n    'LOWERCASE': '.toLowerCase()',\r\n    'TITLECASE': null,\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('CASE') as OperatorOption];\r\n  const textOrder = operator ? Order.UNARY_POSTFIX : Order.NONE;\r\n  const text = generator.valueToCode(block, 'TEXT', textOrder) || \"''\";\r\n  let code;\r\n  if (operator) {\r\n    // Upper and lower case are functions built into generator.\r\n    code = text + operator;\r\n  } else {\r\n    // Title case is not a native generator function.  Define one.\r\n    const functionName = generator.provideFunction_(\r\n      'text_toTitleCase',\r\n      `\r\nString ${generator.FUNCTION_NAME_PLACEHOLDER_}(String str) {\r\n  RegExp exp = new RegExp(r'\\\\b');\r\n  List<String> list = str.split(exp);\r\n  final title = new StringBuffer();\r\n  for (String part in list) {\r\n    if (part.length > 0) {\r\n      title.write(part[0].toUpperCase());\r\n      if (part.length > 0) {\r\n        title.write(part.substring(1).toLowerCase());\r\n      }\r\n    }\r\n  }\r\n  return title.toString();\r\n}\r\n`,\r\n    );\r\n    code = functionName + '(' + text + ')';\r\n  }\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function text_trim(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Trim spaces.\r\n  const OPERATORS = {\r\n    'LEFT': \".replaceFirst(new RegExp(r'^\\\\s+'), '')\",\r\n    'RIGHT': \".replaceFirst(new RegExp(r'\\\\s+$'), '')\",\r\n    'BOTH': '.trim()',\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('MODE') as OperatorOption];\r\n  const text =\r\n    generator.valueToCode(block, 'TEXT', Order.UNARY_POSTFIX) || \"''\";\r\n  return [text + operator, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function text_print(block: Block, generator: DartGenerator) {\r\n  // Print statement.\r\n  const msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  return 'print(' + msg + ');\\n';\r\n}\r\n\r\nexport function text_prompt_ext(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Prompt function.\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['import_dart_html'] =\r\n    \"import 'dart:html' as Html;\";\r\n  let msg;\r\n  if (block.getField('TEXT')) {\r\n    // Internal message.\r\n    msg = generator.quote_(block.getFieldValue('TEXT'));\r\n  } else {\r\n    // External message.\r\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  }\r\n  let code = 'Html.window.prompt(' + msg + \", '')\";\r\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\r\n  if (toNumber) {\r\n    // TODO(#7600): find better approach than casting to any to override\r\n    // CodeGenerator declaring .definitions protected.\r\n    (generator as AnyDuringMigration).definitions_['import_dart_math'] =\r\n      \"import 'dart:math' as Math;\";\r\n    code = 'Math.parseDouble(' + code + ')';\r\n  }\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport const text_prompt = text_prompt_ext;\r\n\r\nexport function text_count(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  const sub = generator.valueToCode(block, 'SUB', Order.NONE) || \"''\";\r\n  // Substring count is not a native generator function.  Define one.\r\n  const functionName = generator.provideFunction_(\r\n    'text_count',\r\n    `\r\nint ${generator.FUNCTION_NAME_PLACEHOLDER_}(String haystack, String needle) {\r\n  if (needle.length == 0) {\r\n    return haystack.length + 1;\r\n  }\r\n  int index = 0;\r\n  int count = 0;\r\n  while (index != -1) {\r\n    index = haystack.indexOf(needle, index);\r\n    if (index != -1) {\r\n      count++;\r\n     index += needle.length;\r\n    }\r\n  }\r\n  return count;\r\n}\r\n`,\r\n  );\r\n  const code = functionName + '(' + text + ', ' + sub + ')';\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function text_replace(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  const text =\r\n    generator.valueToCode(block, 'TEXT', Order.UNARY_POSTFIX) || \"''\";\r\n  const from = generator.valueToCode(block, 'FROM', Order.NONE) || \"''\";\r\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\r\n  const code = text + '.replaceAll(' + from + ', ' + to + ')';\r\n  return [code, Order.UNARY_POSTFIX];\r\n}\r\n\r\nexport function text_reverse(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // There isn't a sensible way to do this in generator. See:\r\n  // http://stackoverflow.com/a/21613700/3529104\r\n  // Implementing something is possibly better than not implementing anything?\r\n  const text =\r\n    generator.valueToCode(block, 'TEXT', Order.UNARY_POSTFIX) || \"''\";\r\n  const code = 'new String.fromCharCodes(' + text + '.runes.toList().reversed)';\r\n  return [code, Order.UNARY_PREFIX];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2014 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Dart for variable blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Dart.variables\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {DartGenerator} from './dart_generator.js';\r\nimport {Order} from './dart_generator.js';\r\n\r\nexport function variables_get(\r\n  block: Block,\r\n  generator: DartGenerator,\r\n): [string, Order] {\r\n  // Variable getter.\r\n  const code = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function variables_set(block: Block, generator: DartGenerator) {\r\n  // Variable setter.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'VALUE', Order.ASSIGNMENT) || '0';\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return varName + ' = ' + argument0 + ';\\n';\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2014 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Dart code generator class, including helper methods for\r\n * generating Dart for blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Dart\r\n\r\nimport * as Variables from '../../core/variables.js';\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport {CodeGenerator} from '../../core/generator.js';\r\nimport {Names, NameType} from '../../core/names.js';\r\nimport type {Workspace} from '../../core/workspace.js';\r\nimport {inputTypes} from '../../core/inputs/input_types.js';\r\n\r\n/**\r\n * Order of operation ENUMs.\r\n * https://dart.dev/guides/language/language-tour#operators\r\n */\r\n// prettier-ignore\r\nexport enum Order {\r\n  ATOMIC = 0,         // 0 \"\" ...\r\n  UNARY_POSTFIX = 1,  // expr++ expr-- () [] . ?.\r\n  UNARY_PREFIX = 2,   // -expr !expr ~expr ++expr --expr\r\n  MULTIPLICATIVE = 3, // * / % ~/\r\n  ADDITIVE = 4,       // + -\r\n  SHIFT = 5,          // << >>\r\n  BITWISE_AND = 6,    // &\r\n  BITWISE_XOR = 7,    // ^\r\n  BITWISE_OR = 8,     // |\r\n  RELATIONAL = 9,     // >= > <= < as is is!\r\n  EQUALITY = 10,      // == !=\r\n  LOGICAL_AND = 11,   // &&\r\n  LOGICAL_OR = 12,    // ||\r\n  IF_NULL = 13,       // ??\r\n  CONDITIONAL = 14,   // expr ? expr: expr\r\n  CASCADE = 15,       // ..\r\n  ASSIGNMENT = 16,    // = *= /= ~/= %= += -= <<= >>= &= ^= |=\r\n  NONE = 99,          // (...)\r\n}\r\n\r\n/**\r\n * Dart code generator class.\r\n */\r\nexport class DartGenerator extends CodeGenerator {\r\n  /** @param name Name of the language the generator is for. */\r\n  constructor(name = 'Dart') {\r\n    super(name);\r\n    this.isInitialized = false;\r\n\r\n    // Copy Order values onto instance for backwards compatibility\r\n    // while ensuring they are not part of the publically-advertised\r\n    // API.\r\n    //\r\n    // TODO(#7085): deprecate these in due course.  (Could initially\r\n    // replace data properties with get accessors that call\r\n    // deprecate.warn().)\r\n    for (const key in Order) {\r\n      // Must assign Order[key] to a temporary to get the type guard to work;\r\n      // see https://github.com/microsoft/TypeScript/issues/10530.\r\n      const value = Order[key];\r\n      // Skip reverse-lookup entries in the enum.  Due to\r\n      // https://github.com/microsoft/TypeScript/issues/55713 this (as\r\n      // of TypeScript 5.5.2) actually narrows the type of value to\r\n      // never - but that still allows the following assignment to\r\n      // succeed.\r\n      if (typeof value === 'string') continue;\r\n      (this as unknown as Record<string, Order>)['ORDER_' + key] = value;\r\n    }\r\n\r\n    // List of illegal variable names.  This is not intended to be a\r\n    // security feature.  Blockly is 100% client-side, so bypassing\r\n    // this list is trivial.  This is intended to prevent users from\r\n    // accidentally clobbering a built-in object or function.\r\n    this.addReservedWords(\r\n      // https://www.dartlang.org/docs/spec/latest/dart-language-specification.pdf\r\n      // Section 16.1.1\r\n      'assert,break,case,catch,class,const,continue,default,do,else,enum,' +\r\n        'extends,false,final,finally,for,if,in,is,new,null,rethrow,return,' +\r\n        'super,switch,this,throw,true,try,var,void,while,with,' +\r\n        // https://api.dartlang.org/dart_core.html\r\n        'print,identityHashCode,identical,BidirectionalIterator,Comparable,' +\r\n        'double,Function,int,Invocation,Iterable,Iterator,List,Map,Match,num,' +\r\n        'Pattern,RegExp,Set,StackTrace,String,StringSink,Type,bool,DateTime,' +\r\n        'Deprecated,Duration,Expando,Null,Object,RuneIterator,Runes,Stopwatch,' +\r\n        'StringBuffer,Symbol,Uri,Comparator,AbstractClassInstantiationError,' +\r\n        'ArgumentError,AssertionError,CastError,ConcurrentModificationError,' +\r\n        'CyclicInitializationError,Error,Exception,FallThroughError,' +\r\n        'FormatException,IntegerDivisionByZeroException,NoSuchMethodError,' +\r\n        'NullThrownError,OutOfMemoryError,RangeError,StackOverflowError,' +\r\n        'StateError,TypeError,UnimplementedError,UnsupportedError',\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Initialise the database of variable names.\r\n   *\r\n   * @param workspace Workspace to generate code from.\r\n   */\r\n  init(workspace: Workspace) {\r\n    super.init(workspace);\r\n\r\n    if (!this.nameDB_) {\r\n      this.nameDB_ = new Names(this.RESERVED_WORDS_);\r\n    } else {\r\n      this.nameDB_.reset();\r\n    }\r\n\r\n    this.nameDB_.setVariableMap(workspace.getVariableMap());\r\n    this.nameDB_.populateVariables(workspace);\r\n    this.nameDB_.populateProcedures(workspace);\r\n\r\n    const defvars = [];\r\n    // Add developer variables (not created or named by the user).\r\n    const devVarList = Variables.allDeveloperVariables(workspace);\r\n    for (let i = 0; i < devVarList.length; i++) {\r\n      defvars.push(\r\n        this.nameDB_.getName(devVarList[i], NameType.DEVELOPER_VARIABLE),\r\n      );\r\n    }\r\n\r\n    // Add user variables, but only ones that are being used.\r\n    const variables = Variables.allUsedVarModels(workspace);\r\n    for (let i = 0; i < variables.length; i++) {\r\n      defvars.push(\r\n        this.nameDB_.getName(variables[i].getId(), NameType.VARIABLE),\r\n      );\r\n    }\r\n\r\n    // Declare all of the variables.\r\n    if (defvars.length) {\r\n      this.definitions_['variables'] = 'var ' + defvars.join(', ') + ';';\r\n    }\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  /**\r\n   * Prepend the generated code with import statements and variable definitions.\r\n   *\r\n   * @param code Generated code.\r\n   * @returns Completed code.\r\n   */\r\n  finish(code: string): string {\r\n    // Indent every line.\r\n    if (code) {\r\n      code = this.prefixLines(code, this.INDENT);\r\n    }\r\n    code = 'main() {\\n' + code + '}';\r\n\r\n    // Convert the definitions dictionary into a list.\r\n    const imports = [];\r\n    const definitions = [];\r\n    for (let name in this.definitions_) {\r\n      const def = this.definitions_[name];\r\n      if (def.match(/^import\\s/)) {\r\n        imports.push(def);\r\n      } else {\r\n        definitions.push(def);\r\n      }\r\n    }\r\n    // Call Blockly.CodeGenerator's finish.\r\n    code = super.finish(code);\r\n    this.isInitialized = false;\r\n\r\n    this.nameDB_!.reset();\r\n    const allDefs = imports.join('\\n') + '\\n\\n' + definitions.join('\\n\\n');\r\n    return allDefs.replace(/\\n\\n+/g, '\\n\\n').replace(/\\n*$/, '\\n\\n\\n') + code;\r\n  }\r\n\r\n  /**\r\n   * Naked values are top-level blocks with outputs that aren't plugged into\r\n   * anything.\r\n   *\r\n   * @param line Line of generated code.\r\n   * @returns Legal line of code.\r\n   */\r\n  scrubNakedValue(line: string): string {\r\n    return line + ';\\n';\r\n  }\r\n\r\n  /**\r\n   * Encode a string as a properly escaped Dart string, complete with quotes.\r\n   *\r\n   * @param string Text to encode.\r\n   * @returns Dart string.\r\n   */\r\n  quote_(string: string): string {\r\n    // Can't use goog.string.quote since $ must also be escaped.\r\n    string = string\r\n      .replace(/\\\\/g, '\\\\\\\\')\r\n      .replace(/\\n/g, '\\\\\\n')\r\n      .replace(/\\$/g, '\\\\$')\r\n      .replace(/'/g, \"\\\\'\");\r\n    return \"'\" + string + \"'\";\r\n  }\r\n\r\n  /**\r\n   * Encode a string as a properly escaped multiline Dart string, complete\r\n   * with quotes.\r\n   *\r\n   * @param string Text to encode.\r\n   * @returns Dart string.\r\n   */\r\n  multiline_quote_(string: string): string {\r\n    const lines = string.split(/\\n/g).map(this.quote_);\r\n    // Join with the following, plus a newline:\r\n    // + '\\n' +\r\n    return lines.join(\" + '\\\\n' + \\n\");\r\n  }\r\n\r\n  /**\r\n   * Common tasks for generating Dart from blocks.\r\n   * Handles comments for the specified block and any connected value blocks.\r\n   * Calls any statements following this block.\r\n   *\r\n   * @param block The current block.\r\n   * @param code The Dart code created for this block.\r\n   * @param thisOnly True to generate code for only this statement.\r\n   * @returns Dart code with comments and subsequent blocks added.\r\n   */\r\n  scrub_(block: Block, code: string, thisOnly = false): string {\r\n    let commentCode = '';\r\n    // Only collect comments for blocks that aren't inline.\r\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\r\n      // Collect comment for this block.\r\n      let comment = block.getCommentText();\r\n      if (comment) {\r\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\r\n        if ((block as AnyDuringMigration).getProcedureDef) {\r\n          // Use documentation comment for function comments.\r\n          commentCode += this.prefixLines(comment + '\\n', '/// ');\r\n        } else {\r\n          commentCode += this.prefixLines(comment + '\\n', '// ');\r\n        }\r\n      }\r\n      // Collect comments for all value arguments.\r\n      // Don't collect comments for nested statements.\r\n      for (let i = 0; i < block.inputList.length; i++) {\r\n        if (block.inputList[i].type === inputTypes.VALUE) {\r\n          const childBlock = block.inputList[i].connection!.targetBlock();\r\n          if (childBlock) {\r\n            comment = this.allNestedComments(childBlock);\r\n            if (comment) {\r\n              commentCode += this.prefixLines(comment, '// ');\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const nextBlock =\r\n      block.nextConnection && block.nextConnection.targetBlock();\r\n    const nextCode = thisOnly ? '' : this.blockToCode(nextBlock);\r\n    return commentCode + code + nextCode;\r\n  }\r\n\r\n  /**\r\n   * Generate code representing the specified value input, adjusted to take into\r\n   * account indexing (zero- or one-based) and optionally by a specified delta\r\n   * and/or by negation.\r\n   *\r\n   * @param block The block.\r\n   * @param atId The ID of the input block to get (and adjust) the value of.\r\n   * @param delta Value to add.\r\n   * @param negate Whether to negate the value.\r\n   * @param order The highest order acting on this value.\r\n   * @returns The adjusted value or code that evaluates to it.\r\n   */\r\n  getAdjusted(\r\n    block: Block,\r\n    atId: string,\r\n    delta = 0,\r\n    negate = false,\r\n    order = Order.NONE,\r\n  ): string {\r\n    if (block.workspace.options.oneBasedIndex) {\r\n      delta--;\r\n    }\r\n    const defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\r\n\r\n    let orderForInput = order;\r\n    if (delta) {\r\n      orderForInput = Order.ADDITIVE;\r\n    } else if (negate) {\r\n      orderForInput = Order.UNARY_PREFIX;\r\n    }\r\n\r\n    let at = this.valueToCode(block, atId, orderForInput) || defaultAtIndex;\r\n\r\n    // Easy case: no adjustments.\r\n    if (delta === 0 && !negate) {\r\n      return at;\r\n    }\r\n    // If the index is a naked number, adjust it right now.\r\n    if (stringUtils.isNumber(at)) {\r\n      at = String(Number(at) + delta);\r\n      if (negate) {\r\n        at = String(-Number(at));\r\n      }\r\n      return at;\r\n    }\r\n    // If the index is dynamic, adjust it in code.\r\n    if (delta > 0) {\r\n      at = `${at} + ${delta}`;\r\n    } else if (delta < 0) {\r\n      at = `${at} - ${-delta}`;\r\n    }\r\n    if (negate) {\r\n      at = delta ? `-(${at})` : `-${at}`;\r\n    }\r\n    if (Math.floor(order) >= Math.floor(orderForInput)) {\r\n      at = `(${at})`;\r\n    }\r\n    return at;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating Dart for dynamic variable blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Dart.variablesDynamic\r\n\r\n// generator is dynamically typed.\r\nexport {\r\n  variables_get as variables_get_dynamic,\r\n  variables_set as variables_set_dynamic,\r\n} from './variables.js';\r\n","/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Instantiate a DartGenerator and populate it with the complete\r\n * set of block generator functions for Dart.  This is the entrypoint\r\n * for dart_compressed.js.\r\n */\r\n\r\n// Former goog.module ID: Blockly.Dart.all\r\n\r\nimport {DartGenerator} from './dart/dart_generator.js';\r\nimport * as colour from './dart/colour.js';\r\nimport * as lists from './dart/lists.js';\r\nimport * as logic from './dart/logic.js';\r\nimport * as loops from './dart/loops.js';\r\nimport * as math from './dart/math.js';\r\nimport * as procedures from './dart/procedures.js';\r\nimport * as text from './dart/text.js';\r\nimport * as variables from './dart/variables.js';\r\nimport * as variablesDynamic from './dart/variables_dynamic.js';\r\n\r\nexport * from './dart/dart_generator.js';\r\n\r\n/**\r\n * Dart code generator instance.\r\n * @type {!DartGenerator}\r\n */\r\nexport const dartGenerator = new DartGenerator();\r\n\r\n// Add reserved words.  This list should include all words mentioned\r\n// in RESERVED WORDS: comments in the imports above.\r\ndartGenerator.addReservedWords('Html,Math');\r\n\r\n// Install per-block-type generator functions:\r\nconst generators: typeof dartGenerator.forBlock = {\r\n  ...colour,\r\n  ...lists,\r\n  ...logic,\r\n  ...loops,\r\n  ...math,\r\n  ...procedures,\r\n  ...text,\r\n  ...variables,\r\n  ...variablesDynamic,\r\n};\r\nfor (const name in generators) {\r\n  dartGenerator.forBlock[name] = generators[name];\r\n}\r\n"]}