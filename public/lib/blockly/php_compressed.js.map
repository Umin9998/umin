{"version":3,"sources":["generators/php/colour.ts","generators/php/lists.ts","generators/php/logic.ts","generators/php/loops.ts","generators/php/math.ts","generators/php/procedures.ts","generators/php/text.ts","generators/php/variables.ts","generators/php/php_generator.ts","generators/php/variables_dynamic.ts","generators/php.ts"],"names":["colour_picker","block","generator","quote_","code","getFieldValue","Order","ATOMIC","colour_random","provideFunction_","functionName","FUNCTION_NAME_PLACEHOLDER_","FUNCTION_CALL","colour_rgb","red","valueToCode","NONE","green","blue","colour_blend","c1","c2","ratio","lists_create_empty","lists_create_with","elements","Array","itemCount_","i","join","lists_repeat","element","repeatCount","lists_length","list","lists_isEmpty","lists_indexOf","argument0","argument1","MEMBER","errorIndex","indexAdjustment","workspace","options","oneBasedIndex","lists_getIndex","mode","at","getAdjusted","SUBTRACTION","Error","lists_setIndex","where","value","ASSIGNMENT","cachedList","REFERENCE","match","listVar","nameDB_","getDistinctName","NameType","VARIABLE","xVar","lists_getSublist","where1","where2","at1","at2","length","isNumber","String","lists_sort","listCode","direction","type","lists_split","value_input","value_delim","lists_reverse","controls_if","n","branchCode","conditionCode","STATEMENT_PREFIX","injectId","statementToCode","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","logic_compare","operator","OPERATORS","order","EQUALITY","RELATIONAL","logic_operation","LOGICAL_AND","LOGICAL_OR","defaultArgument","logic_negate","LOGICAL_NOT","logic_boolean","logic_null","logic_ternary","value_if","CONDITIONAL","value_then","value_else","controls_repeat_ext","repeats","getField","Number","branch","addLoopTrap","loopVar","endVar","controls_whileUntil","until","controls_for","variable0","getVariableName","increment","up","step","Math","abs","startVar","incVar","controls_forEach","controls_flow_statements","xfix","loop","getSurroundLoop","suppressPrefixSuffix","math_number","number","Infinity","UNARY_NEGATION","math_arithmetic","tuple","ADDITION","MULTIPLICATION","DIVISION","POWER","math_single","arg","math_constant","CONSTANTS","math_number_property","PROPERTIES","MODULUS","dropdownProperty","prefix","suffix","inputOrder","outputOrder","numberToCheck","divisor","math_change","varName","math_on_list","func","math_modulo","math_constrain","argument2","math_random_int","math_random_float","math_atan2","procedures_defreturn","globals","usedVariables","allUsedVarModels","variable","name","getVars","indexOf","push","devVarList","allDeveloperVariables","getName","DEVELOPER_VARIABLE","globalStr","funcName","getProcedureName","xfix1","loopTrap","INFINITE_LOOP_TRAP","returnValue","xfix2","args","variables","scrub_","definitions_","procedures_callreturn","procedures_callnoreturn","forBlock","procedures_ifreturn","hasReturnValue_","text","text_multiline","multiline_quote_","STRING_CONCAT","text_join","element0","element1","text_append","text_length","text_isEmpty","text_indexOf","substring","text_charAt","text_getSubstring","text_changeCase","text_trim","text_print","text_prompt_ext","msg","text_count","sub","text_replace","from","to","text_reverse","variables_get","variables_set","CLONE","NEW","INCREMENT","DECREMENT","BITWISE_NOT","CAST","SUPPRESS_ERROR","INSTANCEOF","UNARY_PLUS","BITWISE_SHIFT","BITWISE_AND","BITWISE_XOR","BITWISE_OR","IF_NULL","LOGICAL_AND_WEAK","LOGICAL_XOR","LOGICAL_OR_WEAK","PhpGenerator","CodeGenerator","constructor","ORDER_OVERRIDES","isInitialized","key","addReservedWords","init","reset","Names","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","finish","definitions","Object","values","scrubNakedValue","line","string","replace","split","map","lines","thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","wrap","COMMENT_WRAP","inputList","inputTypes","VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","atId","delta","negate","defaultAtIndex","orderForInput","floor","$jscomp$tmp$exports$module$name","controls_ifelse","controls_repeat","math_round","math_trig","procedures_defnoreturn","text_prompt","phpGenerator","generators","colour","lists","logic","loops","math","procedures","variablesDynamic"],"mappings":"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","file":"php_compressed.js","sourcesContent":["/**\r\n * @license\r\n * Copyright 2015 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating PHP for colour blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.PHP.colour\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport {Order} from './php_generator.js';\r\nimport type {PhpGenerator} from './php_generator.js';\r\n\r\nexport function colour_picker(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Colour picker.\r\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function colour_random(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Generate a random colour.\r\n  const functionName = generator.provideFunction_(\r\n    'colour_random',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}() {\r\n  return '#' . str_pad(dechex(mt_rand(0, 0xFFFFFF)), 6, '0', STR_PAD_LEFT);\r\n}\r\n`,\r\n  );\r\n  const code = functionName + '()';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function colour_rgb(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Compose a colour from RGB components expressed as percentages.\r\n  const red = generator.valueToCode(block, 'RED', Order.NONE) || 0;\r\n  const green = generator.valueToCode(block, 'GREEN', Order.NONE) || 0;\r\n  const blue = generator.valueToCode(block, 'BLUE', Order.NONE) || 0;\r\n  const functionName = generator.provideFunction_(\r\n    'colour_rgb',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($r, $g, $b) {\r\n  $r = round(max(min($r, 100), 0) * 2.55);\r\n  $g = round(max(min($g, 100), 0) * 2.55);\r\n  $b = round(max(min($b, 100), 0) * 2.55);\r\n  $hex = '#';\r\n  $hex .= str_pad(dechex($r), 2, '0', STR_PAD_LEFT);\r\n  $hex .= str_pad(dechex($g), 2, '0', STR_PAD_LEFT);\r\n  $hex .= str_pad(dechex($b), 2, '0', STR_PAD_LEFT);\r\n  return $hex;\r\n}\r\n`,\r\n  );\r\n  const code = functionName + '(' + red + ', ' + green + ', ' + blue + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function colour_blend(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Blend two colours together.\r\n  const c1 = generator.valueToCode(block, 'COLOUR1', Order.NONE) || \"'#000000'\";\r\n  const c2 = generator.valueToCode(block, 'COLOUR2', Order.NONE) || \"'#000000'\";\r\n  const ratio = generator.valueToCode(block, 'RATIO', Order.NONE) || 0.5;\r\n  const functionName = generator.provideFunction_(\r\n    'colour_blend',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($c1, $c2, $ratio) {\r\n  $ratio = max(min($ratio, 1), 0);\r\n  $r1 = hexdec(substr($c1, 1, 2));\r\n  $g1 = hexdec(substr($c1, 3, 2));\r\n  $b1 = hexdec(substr($c1, 5, 2));\r\n  $r2 = hexdec(substr($c2, 1, 2));\r\n  $g2 = hexdec(substr($c2, 3, 2));\r\n  $b2 = hexdec(substr($c2, 5, 2));\r\n  $r = round($r1 * (1 - $ratio) + $r2 * $ratio);\r\n  $g = round($g1 * (1 - $ratio) + $g2 * $ratio);\r\n  $b = round($b1 * (1 - $ratio) + $b2 * $ratio);\r\n  $hex = '#';\r\n  $hex .= str_pad(dechex($r), 2, '0', STR_PAD_LEFT);\r\n  $hex .= str_pad(dechex($g), 2, '0', STR_PAD_LEFT);\r\n  $hex .= str_pad(dechex($b), 2, '0', STR_PAD_LEFT);\r\n  return $hex;\r\n}\r\n`,\r\n  );\r\n  const code = functionName + '(' + c1 + ', ' + c2 + ', ' + ratio + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2015 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating PHP for list blocks.\r\n */\r\n\r\n/**\r\n * Lists in PHP are known to break when non-variables are passed into blocks\r\n * that require a list. PHP, unlike other languages, passes arrays as reference\r\n * value instead of value so we are unable to support it to the extent we can\r\n * for the other languages.\r\n * For example, a ternary operator with two arrays will return the array by\r\n * value and that cannot be passed into any of the built-in array functions for\r\n * PHP (because only variables can be passed by reference).\r\n * ex:  end(true ? list1 : list2)\r\n */\r\n\r\n// Former goog.module ID: Blockly.generator.lists\r\n\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport type {CreateWithBlock} from '../../blocks/lists.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport {Order} from './php_generator.js';\r\nimport type {PhpGenerator} from './php_generator.js';\r\n\r\nexport function lists_create_empty(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Create an empty list.\r\n  return ['array()', Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_create_with(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Create a list with any number of elements of any type.\r\n  const createWithBlock = block as CreateWithBlock;\r\n  const elements = new Array(createWithBlock.itemCount_);\r\n  for (let i = 0; i < createWithBlock.itemCount_; i++) {\r\n    elements[i] = generator.valueToCode(block, 'ADD' + i, Order.NONE) || 'null';\r\n  }\r\n  const code = 'array(' + elements.join(', ') + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_repeat(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Create a list with one element repeated.\r\n  const functionName = generator.provideFunction_(\r\n    'lists_repeat',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($value, $count) {\r\n  $array = array();\r\n  for ($index = 0; $index < $count; $index++) {\r\n    $array[] = $value;\r\n  }\r\n  return $array;\r\n}\r\n`,\r\n  );\r\n  const element = generator.valueToCode(block, 'ITEM', Order.NONE) || 'null';\r\n  const repeatCount = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\r\n  const code = functionName + '(' + element + ', ' + repeatCount + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_length(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // String or array length.\r\n  const functionName = generator.provideFunction_(\r\n    'length',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($value) {\r\n  if (is_string($value)) {\r\n    return strlen($value);\r\n  } else {\r\n    return count($value);\r\n  }\r\n}\r\n`,\r\n  );\r\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\r\n  return [functionName + '(' + list + ')', Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_isEmpty(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Is the string null or array empty?\r\n  const argument0 =\r\n    generator.valueToCode(block, 'VALUE', Order.FUNCTION_CALL) || 'array()';\r\n  return ['empty(' + argument0 + ')', Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_indexOf(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Find an item in the list.\r\n  const argument0 = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\r\n  const argument1 = generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\r\n  let errorIndex = ' -1';\r\n  let indexAdjustment = '';\r\n  if (block.workspace.options.oneBasedIndex) {\r\n    errorIndex = ' 0';\r\n    indexAdjustment = ' + 1';\r\n  }\r\n  let functionName;\r\n  if (block.getFieldValue('END') === 'FIRST') {\r\n    // indexOf\r\n    functionName = generator.provideFunction_(\r\n      'indexOf',\r\n      `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($haystack, $needle) {\r\n  for ($index = 0; $index < count($haystack); $index++) {\r\n    if ($haystack[$index] == $needle) return $index${indexAdjustment};\r\n  }\r\n  return ${errorIndex};\r\n}\r\n`,\r\n    );\r\n  } else {\r\n    // lastIndexOf\r\n    functionName = generator.provideFunction_(\r\n      'lastIndexOf',\r\n      `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($haystack, $needle) {\r\n  $last = ${errorIndex};\r\n  for ($index = 0; $index < count($haystack); $index++) {\r\n    if ($haystack[$index] == $needle) $last = $index${indexAdjustment};\r\n  }\r\n  return $last;\r\n}\r\n`,\r\n    );\r\n  }\r\n\r\n  const code = functionName + '(' + argument1 + ', ' + argument0 + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_getIndex(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] | string {\r\n  // Get element at index.\r\n  const mode = block.getFieldValue('MODE') || 'GET';\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  switch (where) {\r\n    case 'FIRST':\r\n      if (mode === 'GET') {\r\n        const list =\r\n          generator.valueToCode(block, 'VALUE', Order.MEMBER) || 'array()';\r\n        const code = list + '[0]';\r\n        return [code, Order.MEMBER];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const list =\r\n          generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\r\n        const code = 'array_shift(' + list + ')';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'REMOVE') {\r\n        const list =\r\n          generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\r\n        return 'array_shift(' + list + ');\\n';\r\n      }\r\n      break;\r\n    case 'LAST':\r\n      if (mode === 'GET') {\r\n        const list =\r\n          generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\r\n        const code = 'end(' + list + ')';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const list =\r\n          generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\r\n        const code = 'array_pop(' + list + ')';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'REMOVE') {\r\n        const list =\r\n          generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\r\n        return 'array_pop(' + list + ');\\n';\r\n      }\r\n      break;\r\n    case 'FROM_START': {\r\n      const at = generator.getAdjusted(block, 'AT');\r\n      if (mode === 'GET') {\r\n        const list =\r\n          generator.valueToCode(block, 'VALUE', Order.MEMBER) || 'array()';\r\n        const code = list + '[' + at + ']';\r\n        return [code, Order.MEMBER];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const list =\r\n          generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\r\n        const code = 'array_splice(' + list + ', ' + at + ', 1)[0]';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'REMOVE') {\r\n        const list =\r\n          generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\r\n        return 'array_splice(' + list + ', ' + at + ', 1);\\n';\r\n      }\r\n      break;\r\n    }\r\n    case 'FROM_END':\r\n      if (mode === 'GET') {\r\n        const list =\r\n          generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\r\n        const at = generator.getAdjusted(block, 'AT', 1, true);\r\n        const code = 'array_slice(' + list + ', ' + at + ', 1)[0]';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'GET_REMOVE' || mode === 'REMOVE') {\r\n        const list =\r\n          generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\r\n        const at = generator.getAdjusted(\r\n          block,\r\n          'AT',\r\n          1,\r\n          false,\r\n          Order.SUBTRACTION,\r\n        );\r\n        const code =\r\n          'array_splice(' + list + ', count(' + list + ') - ' + at + ', 1)[0]';\r\n        if (mode === 'GET_REMOVE') {\r\n          return [code, Order.FUNCTION_CALL];\r\n        } else if (mode === 'REMOVE') {\r\n          return code + ';\\n';\r\n        }\r\n      }\r\n      break;\r\n    case 'RANDOM': {\r\n      const list =\r\n        generator.valueToCode(block, 'VALUE', Order.NONE) || 'array()';\r\n      if (mode === 'GET') {\r\n        const functionName = generator.provideFunction_(\r\n          'lists_get_random_item',\r\n          `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($list) {\r\n  return $list[rand(0,count($list)-1)];\r\n}\r\n`,\r\n        );\r\n        const code = functionName + '(' + list + ')';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'GET_REMOVE') {\r\n        const functionName = generator.provideFunction_(\r\n          'lists_get_remove_random_item',\r\n          `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(&$list) {\r\n  $x = rand(0,count($list)-1);\r\n  unset($list[$x]);\r\n  return array_values($list);\r\n}\r\n`,\r\n        );\r\n        const code = functionName + '(' + list + ')';\r\n        return [code, Order.FUNCTION_CALL];\r\n      } else if (mode === 'REMOVE') {\r\n        const functionName = generator.provideFunction_(\r\n          'lists_remove_random_item',\r\n          `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(&$list) {\r\n  unset($list[rand(0,count($list)-1)]);\r\n}\r\n`,\r\n        );\r\n        return functionName + '(' + list + ');\\n';\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  throw Error('Unhandled combination (lists_getIndex).');\r\n}\r\n\r\nexport function lists_setIndex(block: Block, generator: PhpGenerator) {\r\n  // Set element at index.\r\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\r\n  const mode = block.getFieldValue('MODE') || 'GET';\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  const value = generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || 'null';\r\n  // Cache non-trivial values to variables to prevent repeated look-ups.\r\n  // Closure, which accesses and modifies 'list'.\r\n  let cachedList: string;\r\n  function cacheList() {\r\n    if (cachedList.match(/^\\$\\w+$/)) {\r\n      return '';\r\n    }\r\n    const listVar = generator.nameDB_!.getDistinctName(\r\n      'tmp_list',\r\n      NameType.VARIABLE,\r\n    );\r\n    const code = listVar + ' = &' + cachedList + ';\\n';\r\n    cachedList = listVar;\r\n    return code;\r\n  }\r\n  switch (where) {\r\n    case 'FIRST':\r\n      if (mode === 'SET') {\r\n        const list =\r\n          generator.valueToCode(block, 'LIST', Order.MEMBER) || 'array()';\r\n        return list + '[0] = ' + value + ';\\n';\r\n      } else if (mode === 'INSERT') {\r\n        const list =\r\n          generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\r\n        return 'array_unshift(' + list + ', ' + value + ');\\n';\r\n      }\r\n      break;\r\n    case 'LAST': {\r\n      const list =\r\n        generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\r\n      if (mode === 'SET') {\r\n        const functionName = generator.provideFunction_(\r\n          'lists_set_last_item',\r\n          `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(&$list, $value) {\r\n  $list[count($list) - 1] = $value;\r\n}\r\n`,\r\n        );\r\n        return functionName + '(' + list + ', ' + value + ');\\n';\r\n      } else if (mode === 'INSERT') {\r\n        return 'array_push(' + list + ', ' + value + ');\\n';\r\n      }\r\n      break;\r\n    }\r\n    case 'FROM_START': {\r\n      const at = generator.getAdjusted(block, 'AT');\r\n      if (mode === 'SET') {\r\n        const list =\r\n          generator.valueToCode(block, 'LIST', Order.MEMBER) || 'array()';\r\n        return list + '[' + at + '] = ' + value + ';\\n';\r\n      } else if (mode === 'INSERT') {\r\n        const list =\r\n          generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\r\n        return 'array_splice(' + list + ', ' + at + ', 0, ' + value + ');\\n';\r\n      }\r\n      break;\r\n    }\r\n    case 'FROM_END': {\r\n      const list =\r\n        generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\r\n      const at = generator.getAdjusted(block, 'AT', 1);\r\n      if (mode === 'SET') {\r\n        const functionName = generator.provideFunction_(\r\n          'lists_set_from_end',\r\n          `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(&$list, $at, $value) {\r\n  $list[count($list) - $at] = $value;\r\n}\r\n`,\r\n        );\r\n        return functionName + '(' + list + ', ' + at + ', ' + value + ');\\n';\r\n      } else if (mode === 'INSERT') {\r\n        const functionName = generator.provideFunction_(\r\n          'lists_insert_from_end',\r\n          `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(&$list, $at, $value) {\r\n  return array_splice($list, count($list) - $at, 0, $value);\r\n}\r\n`,\r\n        );\r\n        return functionName + '(' + list + ', ' + at + ', ' + value + ');\\n';\r\n      }\r\n      break;\r\n    }\r\n    case 'RANDOM':\r\n      cachedList =\r\n        generator.valueToCode(block, 'LIST', Order.REFERENCE) || 'array()';\r\n      let code = cacheList();\r\n      const list = cachedList;\r\n      const xVar = generator.nameDB_!.getDistinctName(\r\n        'tmp_x',\r\n        NameType.VARIABLE,\r\n      );\r\n      code += xVar + ' = rand(0, count(' + list + ')-1);\\n';\r\n      if (mode === 'SET') {\r\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\r\n        return code;\r\n      } else if (mode === 'INSERT') {\r\n        code += 'array_splice(' + list + ', ' + xVar + ', 0, ' + value + ');\\n';\r\n        return code;\r\n      }\r\n      break;\r\n  }\r\n  throw Error('Unhandled combination (lists_setIndex).');\r\n}\r\n\r\nexport function lists_getSublist(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Get sublist.\r\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\r\n  const where1 = block.getFieldValue('WHERE1');\r\n  const where2 = block.getFieldValue('WHERE2');\r\n  let code;\r\n  if (where1 === 'FIRST' && where2 === 'LAST') {\r\n    code = list;\r\n  } else if (\r\n    list.match(/^\\$\\w+$/) ||\r\n    (where1 !== 'FROM_END' && where2 === 'FROM_START')\r\n  ) {\r\n    // If the list is a simple value or doesn't require a call for length, don't\r\n    // generate a helper function.\r\n    let at1;\r\n    switch (where1) {\r\n      case 'FROM_START':\r\n        at1 = generator.getAdjusted(block, 'AT1');\r\n        break;\r\n      case 'FROM_END':\r\n        at1 = generator.getAdjusted(block, 'AT1', 1, false, Order.SUBTRACTION);\r\n        at1 = 'count(' + list + ') - ' + at1;\r\n        break;\r\n      case 'FIRST':\r\n        at1 = '0';\r\n        break;\r\n      default:\r\n        throw Error('Unhandled option (lists_getSublist).');\r\n    }\r\n    let at2;\r\n    let length;\r\n    switch (where2) {\r\n      case 'FROM_START':\r\n        at2 = generator.getAdjusted(block, 'AT2', 0, false, Order.SUBTRACTION);\r\n        length = at2 + ' - ';\r\n        if (\r\n          stringUtils.isNumber(String(at1)) ||\r\n          String(at1).match(/^\\(.+\\)$/)\r\n        ) {\r\n          length += at1;\r\n        } else {\r\n          length += '(' + at1 + ')';\r\n        }\r\n        length += ' + 1';\r\n        break;\r\n      case 'FROM_END':\r\n        at2 = generator.getAdjusted(block, 'AT2', 0, false, Order.SUBTRACTION);\r\n        length = 'count(' + list + ') - ' + at2 + ' - ';\r\n        if (\r\n          stringUtils.isNumber(String(at1)) ||\r\n          String(at1).match(/^\\(.+\\)$/)\r\n        ) {\r\n          length += at1;\r\n        } else {\r\n          length += '(' + at1 + ')';\r\n        }\r\n        break;\r\n      case 'LAST':\r\n        length = 'count(' + list + ') - ';\r\n        if (\r\n          stringUtils.isNumber(String(at1)) ||\r\n          String(at1).match(/^\\(.+\\)$/)\r\n        ) {\r\n          length += at1;\r\n        } else {\r\n          length += '(' + at1 + ')';\r\n        }\r\n        break;\r\n      default:\r\n        throw Error('Unhandled option (lists_getSublist).');\r\n    }\r\n    code = 'array_slice(' + list + ', ' + at1 + ', ' + length + ')';\r\n  } else {\r\n    const at1 = generator.getAdjusted(block, 'AT1');\r\n    const at2 = generator.getAdjusted(block, 'AT2');\r\n    const functionName = generator.provideFunction_(\r\n      'lists_get_sublist',\r\n      `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($list, $where1, $at1, $where2, $at2) {\r\n  if ($where1 == 'FROM_END') {\r\n    $at1 = count($list) - 1 - $at1;\r\n  } else if ($where1 == 'FIRST') {\r\n    $at1 = 0;\r\n  } else if ($where1 != 'FROM_START') {\r\n    throw new Exception('Unhandled option (lists_get_sublist).');\r\n  }\r\n  $length = 0;\r\n  if ($where2 == 'FROM_START') {\r\n    $length = $at2 - $at1 + 1;\r\n  } else if ($where2 == 'FROM_END') {\r\n    $length = count($list) - $at1 - $at2;\r\n  } else if ($where2 == 'LAST') {\r\n    $length = count($list) - $at1;\r\n  } else {\r\n    throw new Exception('Unhandled option (lists_get_sublist).');\r\n  }\r\n  return array_slice($list, $at1, $length);\r\n}\r\n`,\r\n    );\r\n    code =\r\n      functionName +\r\n      '(' +\r\n      list +\r\n      \", '\" +\r\n      where1 +\r\n      \"', \" +\r\n      at1 +\r\n      \", '\" +\r\n      where2 +\r\n      \"', \" +\r\n      at2 +\r\n      ')';\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_sort(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Block for sorting a list.\r\n  const listCode =\r\n    generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\r\n  const direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\r\n  const type = block.getFieldValue('TYPE');\r\n  const functionName = generator.provideFunction_(\r\n    'lists_sort',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($list, $type, $direction) {\r\n  $sortCmpFuncs = array(\r\n    'NUMERIC' => 'strnatcasecmp',\r\n    'TEXT' => 'strcmp',\r\n    'IGNORE_CASE' => 'strcasecmp'\r\n  );\r\n  $sortCmp = $sortCmpFuncs[$type];\r\n  $list2 = $list;\r\n  usort($list2, $sortCmp);\r\n  if ($direction == -1) {\r\n    $list2 = array_reverse($list2);\r\n  }\r\n  return $list2;\r\n}\r\n`,\r\n  );\r\n  const sortCode =\r\n    functionName + '(' + listCode + ', \"' + type + '\", ' + direction + ')';\r\n  return [sortCode, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_split(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Block for splitting text into a list, or joining a list into text.\r\n  let value_input = generator.valueToCode(block, 'INPUT', Order.NONE);\r\n  const value_delim = generator.valueToCode(block, 'DELIM', Order.NONE) || \"''\";\r\n  const mode = block.getFieldValue('MODE');\r\n  let functionName;\r\n  if (mode === 'SPLIT') {\r\n    if (!value_input) {\r\n      value_input = \"''\";\r\n    }\r\n    functionName = 'explode';\r\n  } else if (mode === 'JOIN') {\r\n    if (!value_input) {\r\n      value_input = 'array()';\r\n    }\r\n    functionName = 'implode';\r\n  } else {\r\n    throw Error('Unknown mode: ' + mode);\r\n  }\r\n  const code = functionName + '(' + value_delim + ', ' + value_input + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function lists_reverse(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Block for reversing a list.\r\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n  const code = 'array_reverse(' + list + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2015 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating PHP for logic blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.PHP.logic\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport {Order} from './php_generator.js';\r\nimport type {PhpGenerator} from './php_generator.js';\r\n\r\nexport function controls_if(block: Block, generator: PhpGenerator) {\r\n  // If/elseif/else condition.\r\n  let n = 0;\r\n  let code = '',\r\n    branchCode,\r\n    conditionCode;\r\n  if (generator.STATEMENT_PREFIX) {\r\n    // Automatic prefix insertion is switched off for this block.  Add manually.\r\n    code += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  do {\r\n    conditionCode =\r\n      generator.valueToCode(block, 'IF' + n, Order.NONE) || 'false';\r\n    branchCode = generator.statementToCode(block, 'DO' + n);\r\n    if (generator.STATEMENT_SUFFIX) {\r\n      branchCode =\r\n        generator.prefixLines(\r\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n          generator.INDENT,\r\n        ) + branchCode;\r\n    }\r\n    code +=\r\n      (n > 0 ? ' else ' : '') +\r\n      'if (' +\r\n      conditionCode +\r\n      ') {\\n' +\r\n      branchCode +\r\n      '}';\r\n    n++;\r\n  } while (block.getInput('IF' + n));\r\n\r\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\r\n    branchCode = generator.statementToCode(block, 'ELSE');\r\n    if (generator.STATEMENT_SUFFIX) {\r\n      branchCode =\r\n        generator.prefixLines(\r\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n          generator.INDENT,\r\n        ) + branchCode;\r\n    }\r\n    code += ' else {\\n' + branchCode + '}';\r\n  }\r\n  return code + '\\n';\r\n}\r\n\r\nexport const controls_ifelse = controls_if;\r\n\r\nexport function logic_compare(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Comparison operator.\r\n  const OPERATORS = {\r\n    'EQ': '==',\r\n    'NEQ': '!=',\r\n    'LT': '<',\r\n    'LTE': '<=',\r\n    'GT': '>',\r\n    'GTE': '>=',\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('OP') as OperatorOption];\r\n  const order =\r\n    operator === '==' || operator === '!=' ? Order.EQUALITY : Order.RELATIONAL;\r\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\r\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\r\n  const code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function logic_operation(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Operations 'and', 'or'.\r\n  const operator = block.getFieldValue('OP') === 'AND' ? '&&' : '||';\r\n  const order = operator === '&&' ? Order.LOGICAL_AND : Order.LOGICAL_OR;\r\n  let argument0 = generator.valueToCode(block, 'A', order);\r\n  let argument1 = generator.valueToCode(block, 'B', order);\r\n  if (!argument0 && !argument1) {\r\n    // If there are no arguments, then the return value is false.\r\n    argument0 = 'false';\r\n    argument1 = 'false';\r\n  } else {\r\n    // Single missing arguments have no effect on the return value.\r\n    const defaultArgument = operator === '&&' ? 'true' : 'false';\r\n    if (!argument0) {\r\n      argument0 = defaultArgument;\r\n    }\r\n    if (!argument1) {\r\n      argument1 = defaultArgument;\r\n    }\r\n  }\r\n  const code = argument0 + ' ' + operator + ' ' + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function logic_negate(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Negation.\r\n  const order = Order.LOGICAL_NOT;\r\n  const argument0 = generator.valueToCode(block, 'BOOL', order) || 'true';\r\n  const code = '!' + argument0;\r\n  return [code, order];\r\n}\r\n\r\nexport function logic_boolean(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Boolean values true and false.\r\n  const code = block.getFieldValue('BOOL') === 'TRUE' ? 'true' : 'false';\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function logic_null(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Null data type.\r\n  return ['null', Order.ATOMIC];\r\n}\r\n\r\nexport function logic_ternary(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Ternary operator.\r\n  const value_if =\r\n    generator.valueToCode(block, 'IF', Order.CONDITIONAL) || 'false';\r\n  const value_then =\r\n    generator.valueToCode(block, 'THEN', Order.CONDITIONAL) || 'null';\r\n  const value_else =\r\n    generator.valueToCode(block, 'ELSE', Order.CONDITIONAL) || 'null';\r\n  const code = value_if + ' ? ' + value_then + ' : ' + value_else;\r\n  return [code, Order.CONDITIONAL];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2015 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating PHP for loop blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.PHP.loops\r\n\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport type {ControlFlowInLoopBlock} from '../../blocks/loops.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport {Order} from './php_generator.js';\r\nimport type {PhpGenerator} from './php_generator.js';\r\n\r\nexport function controls_repeat_ext(block: Block, generator: PhpGenerator) {\r\n  // Repeat n times.\r\n  let repeats;\r\n  if (block.getField('TIMES')) {\r\n    // Internal number.\r\n    repeats = String(Number(block.getFieldValue('TIMES')));\r\n  } else {\r\n    // External number.\r\n    repeats = generator.valueToCode(block, 'TIMES', Order.ASSIGNMENT) || '0';\r\n  }\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  let code = '';\r\n  const loopVar = generator.nameDB_!.getDistinctName(\r\n    'count',\r\n    NameType.VARIABLE,\r\n  );\r\n  let endVar = repeats;\r\n  if (!repeats.match(/^\\w+$/) && !stringUtils.isNumber(repeats)) {\r\n    endVar = generator.nameDB_!.getDistinctName(\r\n      'repeat_end',\r\n      NameType.VARIABLE,\r\n    );\r\n    code += endVar + ' = ' + repeats + ';\\n';\r\n  }\r\n  code +=\r\n    'for (' +\r\n    loopVar +\r\n    ' = 0; ' +\r\n    loopVar +\r\n    ' < ' +\r\n    endVar +\r\n    '; ' +\r\n    loopVar +\r\n    '++) {\\n' +\r\n    branch +\r\n    '}\\n';\r\n  return code;\r\n}\r\n\r\nexport const controls_repeat = controls_repeat_ext;\r\n\r\nexport function controls_whileUntil(block: Block, generator: PhpGenerator) {\r\n  // Do while/until loop.\r\n  const until = block.getFieldValue('MODE') === 'UNTIL';\r\n  let argument0 =\r\n    generator.valueToCode(\r\n      block,\r\n      'BOOL',\r\n      until ? Order.LOGICAL_NOT : Order.NONE,\r\n    ) || 'false';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  if (until) {\r\n    argument0 = '!' + argument0;\r\n  }\r\n  return 'while (' + argument0 + ') {\\n' + branch + '}\\n';\r\n}\r\n\r\nexport function controls_for(block: Block, generator: PhpGenerator) {\r\n  // For loop.\r\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const argument0 =\r\n    generator.valueToCode(block, 'FROM', Order.ASSIGNMENT) || '0';\r\n  const argument1 = generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || '0';\r\n  const increment = generator.valueToCode(block, 'BY', Order.ASSIGNMENT) || '1';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  let code;\r\n  if (\r\n    stringUtils.isNumber(argument0) &&\r\n    stringUtils.isNumber(argument1) &&\r\n    stringUtils.isNumber(increment)\r\n  ) {\r\n    // All arguments are simple numbers.\r\n    const up = Number(argument0) <= Number(argument1);\r\n    code =\r\n      'for (' +\r\n      variable0 +\r\n      ' = ' +\r\n      argument0 +\r\n      '; ' +\r\n      variable0 +\r\n      (up ? ' <= ' : ' >= ') +\r\n      argument1 +\r\n      '; ' +\r\n      variable0;\r\n    const step = Math.abs(Number(increment));\r\n    if (step === 1) {\r\n      code += up ? '++' : '--';\r\n    } else {\r\n      code += (up ? ' += ' : ' -= ') + step;\r\n    }\r\n    code += ') {\\n' + branch + '}\\n';\r\n  } else {\r\n    code = '';\r\n    // Cache non-trivial values to variables to prevent repeated look-ups.\r\n    let startVar = argument0;\r\n    if (!argument0.match(/^\\w+$/) && !stringUtils.isNumber(argument0)) {\r\n      startVar = generator.nameDB_!.getDistinctName(\r\n        variable0 + '_start',\r\n        NameType.VARIABLE,\r\n      );\r\n      code += startVar + ' = ' + argument0 + ';\\n';\r\n    }\r\n    let endVar = argument1;\r\n    if (!argument1.match(/^\\w+$/) && !stringUtils.isNumber(argument1)) {\r\n      endVar = generator.nameDB_!.getDistinctName(\r\n        variable0 + '_end',\r\n        NameType.VARIABLE,\r\n      );\r\n      code += endVar + ' = ' + argument1 + ';\\n';\r\n    }\r\n    // Determine loop direction at start, in case one of the bounds\r\n    // changes during loop execution.\r\n    const incVar = generator.nameDB_!.getDistinctName(\r\n      variable0 + '_inc',\r\n      NameType.VARIABLE,\r\n    );\r\n    code += incVar + ' = ';\r\n    if (stringUtils.isNumber(increment)) {\r\n      code += Math.abs(Number(increment)) + ';\\n';\r\n    } else {\r\n      code += 'abs(' + increment + ');\\n';\r\n    }\r\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\r\n    code += generator.INDENT + incVar + ' = -' + incVar + ';\\n';\r\n    code += '}\\n';\r\n    code +=\r\n      'for (' +\r\n      variable0 +\r\n      ' = ' +\r\n      startVar +\r\n      '; ' +\r\n      incVar +\r\n      ' >= 0 ? ' +\r\n      variable0 +\r\n      ' <= ' +\r\n      endVar +\r\n      ' : ' +\r\n      variable0 +\r\n      ' >= ' +\r\n      endVar +\r\n      '; ' +\r\n      variable0 +\r\n      ' += ' +\r\n      incVar +\r\n      ') {\\n' +\r\n      branch +\r\n      '}\\n';\r\n  }\r\n  return code;\r\n}\r\n\r\nexport function controls_forEach(block: Block, generator: PhpGenerator) {\r\n  // For each loop.\r\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const argument0 =\r\n    generator.valueToCode(block, 'LIST', Order.ASSIGNMENT) || '[]';\r\n  let branch = generator.statementToCode(block, 'DO');\r\n  branch = generator.addLoopTrap(branch, block);\r\n  let code = '';\r\n  code +=\r\n    'foreach (' + argument0 + ' as ' + variable0 + ') {\\n' + branch + '}\\n';\r\n  return code;\r\n}\r\n\r\nexport function controls_flow_statements(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n) {\r\n  // Flow statements: continue, break.\r\n  let xfix = '';\r\n  if (generator.STATEMENT_PREFIX) {\r\n    // Automatic prefix insertion is switched off for this block.  Add manually.\r\n    xfix += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    // Inject any statement suffix here since the regular one at the end\r\n    // will not get executed if the break/continue is triggered.\r\n    xfix += generator.injectId(generator.STATEMENT_SUFFIX, block);\r\n  }\r\n  if (generator.STATEMENT_PREFIX) {\r\n    const loop = (block as ControlFlowInLoopBlock).getSurroundLoop();\r\n    if (loop && !loop.suppressPrefixSuffix) {\r\n      // Inject loop's statement prefix here since the regular one at the end\r\n      // of the loop will not get executed if 'continue' is triggered.\r\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\r\n      xfix += generator.injectId(generator.STATEMENT_PREFIX, loop);\r\n    }\r\n  }\r\n  switch (block.getFieldValue('FLOW')) {\r\n    case 'BREAK':\r\n      return xfix + 'break;\\n';\r\n    case 'CONTINUE':\r\n      return xfix + 'continue;\\n';\r\n  }\r\n  throw Error('Unknown flow statement.');\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2015 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating PHP for math blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.PHP.math\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport {Order} from './php_generator.js';\r\nimport type {PhpGenerator} from './php_generator.js';\r\n\r\nexport function math_number(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Numeric value.\r\n  let number = Number(block.getFieldValue('NUM'));\r\n  if (number === Infinity) {\r\n    return ['INF', Order.ATOMIC];\r\n  } else if (number === -Infinity) {\r\n    return ['-INF', Order.UNARY_NEGATION];\r\n  }\r\n  return [String(number), number >= 0 ? Order.ATOMIC : Order.UNARY_NEGATION];\r\n}\r\n\r\nexport function math_arithmetic(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Basic arithmetic operators, and power.\r\n  const OPERATORS: Record<string, [string, Order]> = {\r\n    'ADD': [' + ', Order.ADDITION],\r\n    'MINUS': [' - ', Order.SUBTRACTION],\r\n    'MULTIPLY': [' * ', Order.MULTIPLICATION],\r\n    'DIVIDE': [' / ', Order.DIVISION],\r\n    'POWER': [' ** ', Order.POWER],\r\n  };\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const tuple = OPERATORS[block.getFieldValue('OP') as OperatorOption];\r\n  const operator = tuple[0];\r\n  const order = tuple[1];\r\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\r\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\r\n  const code = argument0 + operator + argument1;\r\n  return [code, order];\r\n}\r\n\r\nexport function math_single(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Math operators with single operand.\r\n  const operator = block.getFieldValue('OP');\r\n  let code;\r\n  let arg;\r\n  if (operator === 'NEG') {\r\n    // Negation is a special case given its different operator precedence.\r\n    arg = generator.valueToCode(block, 'NUM', Order.UNARY_NEGATION) || '0';\r\n    if (arg[0] === '-') {\r\n      // --3 is not legal in JS.\r\n      arg = ' ' + arg;\r\n    }\r\n    code = '-' + arg;\r\n    return [code, Order.UNARY_NEGATION];\r\n  }\r\n  if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\r\n    arg = generator.valueToCode(block, 'NUM', Order.DIVISION) || '0';\r\n  } else {\r\n    arg = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\r\n  }\r\n  // First, handle cases which generate values that don't need parentheses\r\n  // wrapping the code.\r\n  switch (operator) {\r\n    case 'ABS':\r\n      code = 'abs(' + arg + ')';\r\n      break;\r\n    case 'ROOT':\r\n      code = 'sqrt(' + arg + ')';\r\n      break;\r\n    case 'LN':\r\n      code = 'log(' + arg + ')';\r\n      break;\r\n    case 'EXP':\r\n      code = 'exp(' + arg + ')';\r\n      break;\r\n    case 'POW10':\r\n      code = 'pow(10,' + arg + ')';\r\n      break;\r\n    case 'ROUND':\r\n      code = 'round(' + arg + ')';\r\n      break;\r\n    case 'ROUNDUP':\r\n      code = 'ceil(' + arg + ')';\r\n      break;\r\n    case 'ROUNDDOWN':\r\n      code = 'floor(' + arg + ')';\r\n      break;\r\n    case 'SIN':\r\n      code = 'sin(' + arg + ' / 180 * pi())';\r\n      break;\r\n    case 'COS':\r\n      code = 'cos(' + arg + ' / 180 * pi())';\r\n      break;\r\n    case 'TAN':\r\n      code = 'tan(' + arg + ' / 180 * pi())';\r\n      break;\r\n  }\r\n  if (code) {\r\n    return [code, Order.FUNCTION_CALL];\r\n  }\r\n  // Second, handle cases which generate values that may need parentheses\r\n  // wrapping the code.\r\n  switch (operator) {\r\n    case 'LOG10':\r\n      code = 'log(' + arg + ') / log(10)';\r\n      break;\r\n    case 'ASIN':\r\n      code = 'asin(' + arg + ') / pi() * 180';\r\n      break;\r\n    case 'ACOS':\r\n      code = 'acos(' + arg + ') / pi() * 180';\r\n      break;\r\n    case 'ATAN':\r\n      code = 'atan(' + arg + ') / pi() * 180';\r\n      break;\r\n    default:\r\n      throw Error('Unknown math operator: ' + operator);\r\n  }\r\n  return [code, Order.DIVISION];\r\n}\r\n\r\nexport function math_constant(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\r\n  const CONSTANTS: Record<string, [string, Order]> = {\r\n    'PI': ['M_PI', Order.ATOMIC],\r\n    'E': ['M_E', Order.ATOMIC],\r\n    'GOLDEN_RATIO': ['(1 + sqrt(5)) / 2', Order.DIVISION],\r\n    'SQRT2': ['M_SQRT2', Order.ATOMIC],\r\n    'SQRT1_2': ['M_SQRT1_2', Order.ATOMIC],\r\n    'INFINITY': ['INF', Order.ATOMIC],\r\n  };\r\n  type ConstantOption = keyof typeof CONSTANTS;\r\n  return CONSTANTS[block.getFieldValue('CONSTANT') as ConstantOption];\r\n}\r\n\r\nexport function math_number_property(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Check if a number is even, odd, prime, whole, positive, or negative\r\n  // or if it is divisible by certain number. Returns true or false.\r\n  const PROPERTIES: Record<\r\n    string,\r\n    [string, string, Order, Order] | [null, null, Order, Order]\r\n  > = {\r\n    'EVEN': ['', ' % 2 == 0', Order.MODULUS, Order.EQUALITY],\r\n    'ODD': ['', ' % 2 == 1', Order.MODULUS, Order.EQUALITY],\r\n    'WHOLE': ['is_int(', ')', Order.NONE, Order.FUNCTION_CALL],\r\n    'POSITIVE': ['', ' > 0', Order.RELATIONAL, Order.RELATIONAL],\r\n    'NEGATIVE': ['', ' < 0', Order.RELATIONAL, Order.RELATIONAL],\r\n    'DIVISIBLE_BY': [null, null, Order.MODULUS, Order.EQUALITY],\r\n    'PRIME': [null, null, Order.NONE, Order.FUNCTION_CALL],\r\n  };\r\n  type PropertyOption = keyof typeof PROPERTIES;\r\n  const dropdownProperty = block.getFieldValue('PROPERTY') as PropertyOption;\r\n  const [prefix, suffix, inputOrder, outputOrder] =\r\n    PROPERTIES[dropdownProperty];\r\n  const numberToCheck =\r\n    generator.valueToCode(block, 'NUMBER_TO_CHECK', inputOrder) || '0';\r\n  let code;\r\n  if (dropdownProperty === 'PRIME') {\r\n    // Prime is a special case as it is not a one-liner test.\r\n    const functionName = generator.provideFunction_(\r\n      'math_isPrime',\r\n      `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($n) {\r\n  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\r\n  if ($n == 2 || $n == 3) {\r\n    return true;\r\n  }\r\n  // False if n is NaN, negative, is 1, or not whole.\r\n  // And false if n is divisible by 2 or 3.\r\n  if (!is_numeric($n) || $n <= 1 || $n % 1 != 0 || $n % 2 == 0 || $n % 3 == 0) {\r\n    return false;\r\n  }\r\n  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\r\n  for ($x = 6; $x <= sqrt($n) + 1; $x += 6) {\r\n    if ($n % ($x - 1) == 0 || $n % ($x + 1) == 0) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n`,\r\n    );\r\n    code = functionName + '(' + numberToCheck + ')';\r\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\r\n    const divisor =\r\n      generator.valueToCode(block, 'DIVISOR', Order.MODULUS) || '0';\r\n    if (divisor === '0') {\r\n      return ['false', Order.ATOMIC];\r\n    }\r\n    code = numberToCheck + ' % ' + divisor + ' == 0';\r\n  } else {\r\n    code = prefix + numberToCheck + suffix;\r\n  }\r\n  return [code, outputOrder];\r\n}\r\n\r\nexport function math_change(block: Block, generator: PhpGenerator) {\r\n  // Add to a variable in place.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'DELTA', Order.ADDITION) || '0';\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return varName + ' += ' + argument0 + ';\\n';\r\n}\r\n\r\n// Rounding functions have a single operand.\r\nexport const math_round = math_single;\r\n// Trigonometry functions have a single operand.\r\nexport const math_trig = math_single;\r\n\r\nexport function math_on_list(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Math functions for lists.\r\n  const func = block.getFieldValue('OP');\r\n  let list;\r\n  let code;\r\n  switch (func) {\r\n    case 'SUM':\r\n      list =\r\n        generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL) || 'array()';\r\n      code = 'array_sum(' + list + ')';\r\n      break;\r\n    case 'MIN':\r\n      list =\r\n        generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL) || 'array()';\r\n      code = 'min(' + list + ')';\r\n      break;\r\n    case 'MAX':\r\n      list =\r\n        generator.valueToCode(block, 'LIST', Order.FUNCTION_CALL) || 'array()';\r\n      code = 'max(' + list + ')';\r\n      break;\r\n    case 'AVERAGE': {\r\n      const functionName = generator.provideFunction_(\r\n        'math_mean',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($myList) {\r\n  return array_sum($myList) / count($myList);\r\n}\r\n`,\r\n      );\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || 'array()';\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'MEDIAN': {\r\n      const functionName = generator.provideFunction_(\r\n        'math_median',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($arr) {\r\n  sort($arr,SORT_NUMERIC);\r\n  return (count($arr) % 2) ? $arr[floor(count($arr) / 2)] :\r\n      ($arr[floor(count($arr) / 2)] + $arr[floor(count($arr) / 2) - 1]) / 2;\r\n}\r\n`,\r\n      );\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'MODE': {\r\n      // As a list of numbers can contain more than one mode,\r\n      // the returned result is provided as an array.\r\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1].\r\n      const functionName = generator.provideFunction_(\r\n        'math_modes',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($values) {\r\n  if (empty($values)) return array();\r\n  $counts = array_count_values($values);\r\n  arsort($counts); // Sort counts in descending order\r\n  $modes = array_keys($counts, current($counts), true);\r\n  return $modes;\r\n}\r\n`,\r\n      );\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'STD_DEV': {\r\n      const functionName = generator.provideFunction_(\r\n        'math_standard_deviation',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($numbers) {\r\n  $n = count($numbers);\r\n  if (!$n) return null;\r\n  $mean = array_sum($numbers) / count($numbers);\r\n  foreach($numbers as $key => $num) $devs[$key] = pow($num - $mean, 2);\r\n  return sqrt(array_sum($devs) / (count($devs) - 1));\r\n}\r\n`,\r\n      );\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    case 'RANDOM': {\r\n      const functionName = generator.provideFunction_(\r\n        'math_random_list',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($list) {\r\n  $x = rand(0, count($list)-1);\r\n  return $list[$x];\r\n}\r\n`,\r\n      );\r\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\r\n      code = functionName + '(' + list + ')';\r\n      break;\r\n    }\r\n    default:\r\n      throw Error('Unknown operator: ' + func);\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_modulo(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Remainder computation.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'DIVIDEND', Order.MODULUS) || '0';\r\n  const argument1 =\r\n    generator.valueToCode(block, 'DIVISOR', Order.MODULUS) || '0';\r\n  const code = argument0 + ' % ' + argument1;\r\n  return [code, Order.MODULUS];\r\n}\r\n\r\nexport function math_constrain(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Constrain a number between two limits.\r\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'LOW', Order.NONE) || '0';\r\n  const argument2 =\r\n    generator.valueToCode(block, 'HIGH', Order.NONE) || 'Infinity';\r\n  const code =\r\n    'min(max(' + argument0 + ', ' + argument1 + '), ' + argument2 + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_random_int(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Random integer between [X] and [Y].\r\n  const argument0 = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'TO', Order.NONE) || '0';\r\n  const functionName = generator.provideFunction_(\r\n    'math_random_int',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($a, $b) {\r\n  if ($a > $b) {\r\n    return rand($b, $a);\r\n  }\r\n  return rand($a, $b);\r\n}\r\n`,\r\n  );\r\n  const code = functionName + '(' + argument0 + ', ' + argument1 + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_random_float(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Random fraction between 0 and 1.\r\n  return ['(float)rand()/(float)getrandmax()', Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function math_atan2(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\r\n  const argument0 = generator.valueToCode(block, 'X', Order.NONE) || '0';\r\n  const argument1 = generator.valueToCode(block, 'Y', Order.NONE) || '0';\r\n  return [\r\n    'atan2(' + argument1 + ', ' + argument0 + ') / pi() * 180',\r\n    Order.DIVISION,\r\n  ];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2015 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating PHP for procedure blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.PHP.procedures\r\n\r\nimport * as Variables from '../../core/variables.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport type {IfReturnBlock} from '../../blocks/procedures.js';\r\nimport {NameType} from '../../core/names.js';\r\nimport {Order} from './php_generator.js';\r\nimport type {PhpGenerator} from './php_generator.js';\r\n\r\nexport function procedures_defreturn(block: Block, generator: PhpGenerator) {\r\n  // Define a procedure with a return value.\r\n  // First, add a 'global' statement for every variable that is not shadowed by\r\n  // a local parameter.\r\n  const globals = [];\r\n  const workspace = block.workspace;\r\n  const usedVariables = Variables.allUsedVarModels(workspace) || [];\r\n  for (const variable of usedVariables) {\r\n    const varName = variable.name;\r\n    // getVars returns parameter names, not ids, for procedure blocks\r\n    if (block.getVars().indexOf(varName) === -1) {\r\n      globals.push(generator.getVariableName(varName));\r\n    }\r\n  }\r\n  // Add developer variables.\r\n  const devVarList = Variables.allDeveloperVariables(workspace);\r\n  for (let i = 0; i < devVarList.length; i++) {\r\n    globals.push(\r\n      generator.nameDB_!.getName(devVarList[i], NameType.DEVELOPER_VARIABLE),\r\n    );\r\n  }\r\n  const globalStr = globals.length\r\n    ? generator.INDENT + 'global ' + globals.join(', ') + ';\\n'\r\n    : '';\r\n\r\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\r\n  let xfix1 = '';\r\n  if (generator.STATEMENT_PREFIX) {\r\n    xfix1 += generator.injectId(generator.STATEMENT_PREFIX, block);\r\n  }\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    xfix1 += generator.injectId(generator.STATEMENT_SUFFIX, block);\r\n  }\r\n  if (xfix1) {\r\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\r\n  }\r\n  let loopTrap = '';\r\n  if (generator.INFINITE_LOOP_TRAP) {\r\n    loopTrap = generator.prefixLines(\r\n      generator.injectId(generator.INFINITE_LOOP_TRAP, block),\r\n      generator.INDENT,\r\n    );\r\n  }\r\n  const branch = generator.statementToCode(block, 'STACK');\r\n  let returnValue = generator.valueToCode(block, 'RETURN', Order.NONE) || '';\r\n  let xfix2 = '';\r\n  if (branch && returnValue) {\r\n    // After executing the function body, revisit this block for the return.\r\n    xfix2 = xfix1;\r\n  }\r\n  if (returnValue) {\r\n    returnValue = generator.INDENT + 'return ' + returnValue + ';\\n';\r\n  }\r\n  const args = [];\r\n  const variables = block.getVars();\r\n  for (let i = 0; i < variables.length; i++) {\r\n    args[i] = generator.getVariableName(variables[i]);\r\n  }\r\n  let code =\r\n    'function ' +\r\n    funcName +\r\n    '(' +\r\n    args.join(', ') +\r\n    ') {\\n' +\r\n    globalStr +\r\n    xfix1 +\r\n    loopTrap +\r\n    branch +\r\n    xfix2 +\r\n    returnValue +\r\n    '}';\r\n  code = generator.scrub_(block, code);\r\n  // Add % so as not to collide with helper functions in definitions list.\r\n  // TODO(#7600): find better approach than casting to any to override\r\n  // CodeGenerator declaring .definitions protected.\r\n  (generator as AnyDuringMigration).definitions_['%' + funcName] = code;\r\n  return null;\r\n}\r\n\r\n// Defining a procedure without a return value uses the same generator as\r\n// a procedure with a return value.\r\nexport const procedures_defnoreturn = procedures_defreturn;\r\n\r\nexport function procedures_callreturn(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Call a procedure with a return value.\r\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\r\n  const args = [];\r\n  const variables = block.getVars();\r\n  for (let i = 0; i < variables.length; i++) {\r\n    args[i] = generator.valueToCode(block, 'ARG' + i, Order.NONE) || 'null';\r\n  }\r\n  const code = funcName + '(' + args.join(', ') + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function procedures_callnoreturn(block: Block, generator: PhpGenerator) {\r\n  // Call a procedure with no return value.\r\n  // Generated code is for a function call as a statement is the same as a\r\n  // function call as a value, with the addition of line ending.\r\n  const tuple = generator.forBlock['procedures_callreturn'](\r\n    block,\r\n    generator,\r\n  ) as [string, Order];\r\n  return tuple[0] + ';\\n';\r\n}\r\n\r\nexport function procedures_ifreturn(block: Block, generator: PhpGenerator) {\r\n  // Conditionally return value from a procedure.\r\n  const condition =\r\n    generator.valueToCode(block, 'CONDITION', Order.NONE) || 'false';\r\n  let code = 'if (' + condition + ') {\\n';\r\n  if (generator.STATEMENT_SUFFIX) {\r\n    // Inject any statement suffix here since the regular one at the end\r\n    // will not get executed if the return is triggered.\r\n    code += generator.prefixLines(\r\n      generator.injectId(generator.STATEMENT_SUFFIX, block),\r\n      generator.INDENT,\r\n    );\r\n  }\r\n  if ((block as IfReturnBlock).hasReturnValue_) {\r\n    const value = generator.valueToCode(block, 'VALUE', Order.NONE) || 'null';\r\n    code += generator.INDENT + 'return ' + value + ';\\n';\r\n  } else {\r\n    code += generator.INDENT + 'return;\\n';\r\n  }\r\n  code += '}\\n';\r\n  return code;\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2015 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating PHP for text blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.PHP.texts\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport type {JoinMutatorBlock} from '../../blocks/text.js';\r\nimport {Order} from './php_generator.js';\r\nimport type {PhpGenerator} from './php_generator.js';\r\n\r\nexport function text(block: Block, generator: PhpGenerator): [string, Order] {\r\n  // Text value.\r\n  const code = generator.quote_(block.getFieldValue('TEXT'));\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function text_multiline(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Text value.\r\n  const code = generator.multiline_quote_(block.getFieldValue('TEXT'));\r\n  const order = code.indexOf('.') !== -1 ? Order.STRING_CONCAT : Order.ATOMIC;\r\n  return [code, order];\r\n}\r\n\r\nexport function text_join(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Create a string made up of any number of elements of any type.\r\n  const joinBlock = block as JoinMutatorBlock;\r\n  if (joinBlock.itemCount_ === 0) {\r\n    return [\"''\", Order.ATOMIC];\r\n  } else if (joinBlock.itemCount_ === 1) {\r\n    const element = generator.valueToCode(block, 'ADD0', Order.NONE) || \"''\";\r\n    const code = element;\r\n    return [code, Order.NONE];\r\n  } else if (joinBlock.itemCount_ === 2) {\r\n    const element0 =\r\n      generator.valueToCode(block, 'ADD0', Order.STRING_CONCAT) || \"''\";\r\n    const element1 =\r\n      generator.valueToCode(block, 'ADD1', Order.STRING_CONCAT) || \"''\";\r\n    const code = element0 + ' . ' + element1;\r\n    return [code, Order.STRING_CONCAT];\r\n  } else {\r\n    const elements = new Array(joinBlock.itemCount_);\r\n    for (let i = 0; i < joinBlock.itemCount_; i++) {\r\n      elements[i] = generator.valueToCode(block, 'ADD' + i, Order.NONE) || \"''\";\r\n    }\r\n    const code = \"implode('', array(\" + elements.join(',') + '))';\r\n    return [code, Order.FUNCTION_CALL];\r\n  }\r\n}\r\n\r\nexport function text_append(block: Block, generator: PhpGenerator) {\r\n  // Append to a variable in place.\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  const value = generator.valueToCode(block, 'TEXT', Order.ASSIGNMENT) || \"''\";\r\n  return varName + ' .= ' + value + ';\\n';\r\n}\r\n\r\nexport function text_length(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // String or array length.\r\n  const functionName = generator.provideFunction_(\r\n    'length',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($value) {\r\n  if (is_string($value)) {\r\n    return strlen($value);\r\n  }\r\n  return count($value);\r\n}\r\n`,\r\n  );\r\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\r\n  return [functionName + '(' + text + ')', Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_isEmpty(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Is the string null or array empty?\r\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\r\n  return ['empty(' + text + ')', Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_indexOf(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Search the text for a substring.\r\n  const operator =\r\n    block.getFieldValue('END') === 'FIRST' ? 'strpos' : 'strrpos';\r\n  const substring = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\r\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\r\n  let errorIndex = ' -1';\r\n  let indexAdjustment = '';\r\n  if (block.workspace.options.oneBasedIndex) {\r\n    errorIndex = ' 0';\r\n    indexAdjustment = ' + 1';\r\n  }\r\n  const functionName = generator.provideFunction_(\r\n    block.getFieldValue('END') === 'FIRST'\r\n      ? 'text_indexOf'\r\n      : 'text_lastIndexOf',\r\n    `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($text, $search) {\r\n  $pos = ${operator}($text, $search);\r\n  return $pos === false ? ${errorIndex} : $pos${indexAdjustment};\r\n}\r\n`,\r\n  );\r\n  const code = functionName + '(' + text + ', ' + substring + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_charAt(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Get letter at index.\r\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\r\n  const textOrder = where === 'RANDOM' ? Order.NONE : Order.NONE;\r\n  const text = generator.valueToCode(block, 'VALUE', textOrder) || \"''\";\r\n  switch (where) {\r\n    case 'FIRST': {\r\n      const code = 'substr(' + text + ', 0, 1)';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n    case 'LAST': {\r\n      const code = 'substr(' + text + ', -1)';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n    case 'FROM_START': {\r\n      const at = generator.getAdjusted(block, 'AT');\r\n      const code = 'substr(' + text + ', ' + at + ', 1)';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n    case 'FROM_END': {\r\n      const at = generator.getAdjusted(block, 'AT', 1, true);\r\n      const code = 'substr(' + text + ', ' + at + ', 1)';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n    case 'RANDOM': {\r\n      const functionName = generator.provideFunction_(\r\n        'text_random_letter',\r\n        `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($text) {\r\n  return $text[rand(0, strlen($text) - 1)];\r\n}\r\n`,\r\n      );\r\n      const code = functionName + '(' + text + ')';\r\n      return [code, Order.FUNCTION_CALL];\r\n    }\r\n  }\r\n  throw Error('Unhandled option (text_charAt).');\r\n}\r\n\r\nexport function text_getSubstring(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Get substring.\r\n  const where1 = block.getFieldValue('WHERE1');\r\n  const where2 = block.getFieldValue('WHERE2');\r\n  const text = generator.valueToCode(block, 'STRING', Order.NONE) || \"''\";\r\n  if (where1 === 'FIRST' && where2 === 'LAST') {\r\n    const code = text;\r\n    return [code, Order.NONE];\r\n  } else {\r\n    const at1 = generator.getAdjusted(block, 'AT1');\r\n    const at2 = generator.getAdjusted(block, 'AT2');\r\n    const functionName = generator.provideFunction_(\r\n      'text_get_substring',\r\n      `\r\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}($text, $where1, $at1, $where2, $at2) {\r\n  if ($where1 == 'FROM_END') {\r\n    $at1 = strlen($text) - 1 - $at1;\r\n  } else if ($where1 == 'FIRST') {\r\n    $at1 = 0;\r\n  } else if ($where1 != 'FROM_START') {\r\n    throw new Exception('Unhandled option (text_get_substring).');\r\n  }\r\n  $length = 0;\r\n  if ($where2 == 'FROM_START') {\r\n    $length = $at2 - $at1 + 1;\r\n  } else if ($where2 == 'FROM_END') {\r\n    $length = strlen($text) - $at1 - $at2;\r\n  } else if ($where2 == 'LAST') {\r\n    $length = strlen($text) - $at1;\r\n  } else {\r\n    throw new Exception('Unhandled option (text_get_substring).');\r\n  }\r\n  return substr($text, $at1, $length);\r\n}\r\n`,\r\n    );\r\n    const code =\r\n      functionName +\r\n      '(' +\r\n      text +\r\n      \", '\" +\r\n      where1 +\r\n      \"', \" +\r\n      at1 +\r\n      \", '\" +\r\n      where2 +\r\n      \"', \" +\r\n      at2 +\r\n      ')';\r\n    return [code, Order.FUNCTION_CALL];\r\n  }\r\n}\r\n\r\nexport function text_changeCase(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Change capitalization.\r\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  let code;\r\n  if (block.getFieldValue('CASE') === 'UPPERCASE') {\r\n    code = 'strtoupper(' + text + ')';\r\n  } else if (block.getFieldValue('CASE') === 'LOWERCASE') {\r\n    code = 'strtolower(' + text + ')';\r\n  } else if (block.getFieldValue('CASE') === 'TITLECASE') {\r\n    code = 'ucwords(strtolower(' + text + '))';\r\n  }\r\n  return [code as string, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_trim(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Trim spaces.\r\n  const OPERATORS = {'LEFT': 'ltrim', 'RIGHT': 'rtrim', 'BOTH': 'trim'};\r\n  type OperatorOption = keyof typeof OPERATORS;\r\n  const operator = OPERATORS[block.getFieldValue('MODE') as OperatorOption];\r\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  return [operator + '(' + text + ')', Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_print(block: Block, generator: PhpGenerator) {\r\n  // Print statement.\r\n  const msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  return 'print(' + msg + ');\\n';\r\n}\r\n\r\nexport function text_prompt_ext(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Prompt function.\r\n  let msg;\r\n  if (block.getField('TEXT')) {\r\n    // Internal message.\r\n    msg = generator.quote_(block.getFieldValue('TEXT'));\r\n  } else {\r\n    // External message.\r\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  }\r\n  let code = 'readline(' + msg + ')';\r\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\r\n  if (toNumber) {\r\n    code = 'floatval(' + code + ')';\r\n  }\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport const text_prompt = text_prompt_ext;\r\n\r\nexport function text_count(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  const sub = generator.valueToCode(block, 'SUB', Order.NONE) || \"''\";\r\n  const code =\r\n    'strlen(' +\r\n    sub +\r\n    ') === 0' +\r\n    ' ? strlen(' +\r\n    text +\r\n    ') + 1' +\r\n    ' : substr_count(' +\r\n    text +\r\n    ', ' +\r\n    sub +\r\n    ')';\r\n  return [code, Order.CONDITIONAL];\r\n}\r\n\r\nexport function text_replace(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  const from = generator.valueToCode(block, 'FROM', Order.NONE) || \"''\";\r\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\r\n  const code = 'str_replace(' + from + ', ' + to + ', ' + text + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n\r\nexport function text_reverse(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\r\n  const code = 'strrev(' + text + ')';\r\n  return [code, Order.FUNCTION_CALL];\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2015 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating PHP for variable blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.PHP.variables\r\n\r\nimport type {Block} from '../../core/block.js';\r\nimport {Order} from './php_generator.js';\r\nimport type {PhpGenerator} from './php_generator.js';\r\n\r\nexport function variables_get(\r\n  block: Block,\r\n  generator: PhpGenerator,\r\n): [string, Order] {\r\n  // Variable getter.\r\n  const code = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return [code, Order.ATOMIC];\r\n}\r\n\r\nexport function variables_set(block: Block, generator: PhpGenerator) {\r\n  // Variable setter.\r\n  const argument0 =\r\n    generator.valueToCode(block, 'VALUE', Order.ASSIGNMENT) || '0';\r\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\r\n  return varName + ' = ' + argument0 + ';\\n';\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2015 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file PHP code generator class, including helper methods for\r\n * generating PHP for blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.PHP\r\n\r\nimport * as stringUtils from '../../core/utils/string.js';\r\nimport type {Block} from '../../core/block.js';\r\nimport {CodeGenerator} from '../../core/generator.js';\r\nimport {Names} from '../../core/names.js';\r\nimport type {Workspace} from '../../core/workspace.js';\r\nimport {inputTypes} from '../../core/inputs/input_types.js';\r\n\r\n/**\r\n * Order of operation ENUMs.\r\n * http://php.net/manual/en/language.operators.precedence.php\r\n */\r\n// prettier-ignore\r\nexport enum Order {\r\n  ATOMIC = 0,             // 0 \"\" ...\r\n  CLONE = 1,              // clone\r\n  NEW = 1,                // new\r\n  MEMBER = 2.1,           // []\r\n  FUNCTION_CALL = 2.2,    // ()\r\n  POWER = 3,              // **\r\n  INCREMENT = 4,          // ++\r\n  DECREMENT = 4,          // --\r\n  BITWISE_NOT = 4,        // ~\r\n  CAST = 4,               // (int) (float) (string) (array) ...\r\n  SUPPRESS_ERROR = 4,     // @\r\n  INSTANCEOF = 5,         // instanceof\r\n  LOGICAL_NOT = 6,        // !\r\n  UNARY_PLUS = 7.1,       // +\r\n  UNARY_NEGATION = 7.2,   // -\r\n  MULTIPLICATION = 8.1,   // *\r\n  DIVISION = 8.2,         // /\r\n  MODULUS = 8.3,          // %\r\n  ADDITION = 9.1,         // +\r\n  SUBTRACTION = 9.2,      // -\r\n  STRING_CONCAT = 9.3,    // .\r\n  BITWISE_SHIFT = 10,     // << >>\r\n  RELATIONAL = 11,        // < <= > >=\r\n  EQUALITY = 12,          // == != === !== <> <=>\r\n  REFERENCE = 13,         // &\r\n  BITWISE_AND = 13,       // &\r\n  BITWISE_XOR = 14,       // ^\r\n  BITWISE_OR = 15,        // |\r\n  LOGICAL_AND = 16,       // &&\r\n  LOGICAL_OR = 17,        // ||\r\n  IF_NULL = 18,           // ??\r\n  CONDITIONAL = 19,       // ?:\r\n  ASSIGNMENT = 20,        // = += -= *= /= %= <<= >>= ...\r\n  LOGICAL_AND_WEAK = 21,  // and\r\n  LOGICAL_XOR = 22,       // xor\r\n  LOGICAL_OR_WEAK = 23,   // or\r\n  NONE = 99,              // (...)\r\n}\r\n\r\nexport class PhpGenerator extends CodeGenerator {\r\n  /** List of outer-inner pairings that do NOT require parentheses. */\r\n  ORDER_OVERRIDES: [Order, Order][] = [\r\n    // (foo()).bar() -> foo().bar()\r\n    // (foo())[0] -> foo()[0]\r\n    [Order.MEMBER, Order.FUNCTION_CALL],\r\n    // (foo[0])[1] -> foo[0][1]\r\n    // (foo.bar).baz -> foo.bar.baz\r\n    [Order.MEMBER, Order.MEMBER],\r\n    // !(!foo) -> !!foo\r\n    [Order.LOGICAL_NOT, Order.LOGICAL_NOT],\r\n    // a * (b * c) -> a * b * c\r\n    [Order.MULTIPLICATION, Order.MULTIPLICATION],\r\n    // a + (b + c) -> a + b + c\r\n    [Order.ADDITION, Order.ADDITION],\r\n    // a && (b && c) -> a && b && c\r\n    [Order.LOGICAL_AND, Order.LOGICAL_AND],\r\n    // a || (b || c) -> a || b || c\r\n    [Order.LOGICAL_OR, Order.LOGICAL_OR],\r\n  ];\r\n\r\n  /** @param name Name of the language the generator is for. */\r\n  constructor(name = 'PHP') {\r\n    super(name);\r\n    this.isInitialized = false;\r\n\r\n    // Copy Order values onto instance for backwards compatibility\r\n    // while ensuring they are not part of the publically-advertised\r\n    // API.\r\n    //\r\n    // TODO(#7085): deprecate these in due course.  (Could initially\r\n    // replace data properties with get accessors that call\r\n    // deprecate.warn().)\r\n    for (const key in Order) {\r\n      // Must assign Order[key] to a temporary to get the type guard to work;\r\n      // see https://github.com/microsoft/TypeScript/issues/10530.\r\n      const value = Order[key];\r\n      // Skip reverse-lookup entries in the enum.  Due to\r\n      // https://github.com/microsoft/TypeScript/issues/55713 this (as\r\n      // of TypeScript 5.5.2) actually narrows the type of value to\r\n      // never - but that still allows the following assignment to\r\n      // succeed.\r\n      if (typeof value === 'string') continue;\r\n      (this as unknown as Record<string, Order>)['ORDER_' + key] = value;\r\n    }\r\n\r\n    // List of illegal variable names.  This is not intended to be a\r\n    // security feature.  Blockly is 100% client-side, so bypassing\r\n    // this list is trivial.  This is intended to prevent users from\r\n    // accidentally clobbering a built-in object or function.\r\n    this.addReservedWords(\r\n      // http://php.net/manual/en/reserved.keywords.php\r\n      '__halt_compiler,abstract,and,array,as,break,callable,case,catch,class,' +\r\n        'clone,const,continue,declare,default,die,do,echo,else,elseif,empty,' +\r\n        'enddeclare,endfor,endforeach,endif,endswitch,endwhile,eval,exit,' +\r\n        'extends,final,for,foreach,function,global,goto,if,implements,include,' +\r\n        'include_once,instanceof,insteadof,interface,isset,list,namespace,new,' +\r\n        'or,print,private,protected,public,require,require_once,return,static,' +\r\n        'switch,throw,trait,try,unset,use,var,while,xor,' +\r\n        // http://php.net/manual/en/reserved.constants.php\r\n        'PHP_VERSION,PHP_MAJOR_VERSION,PHP_MINOR_VERSION,PHP_RELEASE_VERSION,' +\r\n        'PHP_VERSION_ID,PHP_EXTRA_VERSION,PHP_ZTS,PHP_DEBUG,PHP_MAXPATHLEN,' +\r\n        'PHP_OS,PHP_SAPI,PHP_EOL,PHP_INT_MAX,PHP_INT_SIZE,DEFAULT_INCLUDE_PATH,' +\r\n        'PEAR_INSTALL_DIR,PEAR_EXTENSION_DIR,PHP_EXTENSION_DIR,PHP_PREFIX,' +\r\n        'PHP_BINDIR,PHP_BINARY,PHP_MANDIR,PHP_LIBDIR,PHP_DATADIR,' +\r\n        'PHP_SYSCONFDIR,PHP_LOCALSTATEDIR,PHP_CONFIG_FILE_PATH,' +\r\n        'PHP_CONFIG_FILE_SCAN_DIR,PHP_SHLIB_SUFFIX,E_ERROR,E_WARNING,E_PARSE,' +\r\n        'E_NOTICE,E_CORE_ERROR,E_CORE_WARNING,E_COMPILE_ERROR,' +\r\n        'E_COMPILE_WARNING,E_USER_ERROR,E_USER_WARNING,E_USER_NOTICE,' +\r\n        'E_DEPRECATED,E_USER_DEPRECATED,E_ALL,E_STRICT,' +\r\n        '__COMPILER_HALT_OFFSET__,TRUE,FALSE,NULL,__CLASS__,__DIR__,__FILE__,' +\r\n        '__FUNCTION__,__LINE__,__METHOD__,__NAMESPACE__,__TRAIT__',\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Initialise the database of variable names.\r\n   *\r\n   * @param workspace Workspace to generate code from.\r\n   */\r\n  init(workspace: Workspace) {\r\n    super.init(workspace);\r\n\r\n    if (!this.nameDB_) {\r\n      this.nameDB_ = new Names(this.RESERVED_WORDS_, '$');\r\n    } else {\r\n      this.nameDB_.reset();\r\n    }\r\n\r\n    this.nameDB_.setVariableMap(workspace.getVariableMap());\r\n    this.nameDB_.populateVariables(workspace);\r\n    this.nameDB_.populateProcedures(workspace);\r\n\r\n    this.isInitialized = true;\r\n  }\r\n\r\n  /**\r\n   * Prepend the generated code with the variable definitions.\r\n   *\r\n   * @param code Generated code.\r\n   * @returns Completed code.\r\n   */\r\n  finish(code: string): string {\r\n    // Convert the definitions dictionary into a list.\r\n    const definitions = Object.values(this.definitions_);\r\n    // Call Blockly.CodeGenerator's finish.\r\n    code = super.finish(code);\r\n    this.isInitialized = false;\r\n\r\n    this.nameDB_!.reset();\r\n    return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\r\n  }\r\n\r\n  /**\r\n   * Naked values are top-level blocks with outputs that aren't plugged into\r\n   * anything.\r\n   *\r\n   * @param line Line of generated code.\r\n   * @returns Legal line of code.\r\n   */\r\n  scrubNakedValue(line: string): string {\r\n    return line + ';\\n';\r\n  }\r\n\r\n  /**\r\n   * Encode a string as a properly escaped PHP string, complete with\r\n   * quotes.\r\n   *\r\n   * @param string Text to encode.\r\n   * @returns PHP string.\r\n   */\r\n  quote_(string: string): string {\r\n    string = string\r\n      .replace(/\\\\/g, '\\\\\\\\')\r\n      .replace(/\\n/g, '\\\\\\n')\r\n      .replace(/'/g, \"\\\\'\");\r\n    return \"'\" + string + \"'\";\r\n  }\r\n\r\n  /**\r\n   * Encode a string as a properly escaped multiline PHP string, complete with\r\n   * quotes.\r\n   * @param string Text to encode.\r\n   * @returns PHP string.\r\n   */\r\n  multiline_quote_(string: string): string {\r\n    const lines = string.split(/\\n/g).map(this.quote_);\r\n    // Join with the following, plus a newline:\r\n    // . \"\\n\" .\r\n    // Newline escaping only works in double-quoted strings.\r\n    return lines.join(' . \"\\\\n\" .\\n');\r\n  }\r\n\r\n  /**\r\n   * Common tasks for generating PHP from blocks.\r\n   * Handles comments for the specified block and any connected value blocks.\r\n   * Calls any statements following this block.\r\n   *\r\n   * @param block The current block.\r\n   * @param code The PHP code created for this block.\r\n   * @param thisOnly True to generate code for only this statement.\r\n   * @returns PHP code with comments and subsequent blocks added.\r\n   */\r\n  scrub_(block: Block, code: string, thisOnly = false): string {\r\n    let commentCode = '';\r\n    // Only collect comments for blocks that aren't inline.\r\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\r\n      // Collect comment for this block.\r\n      let comment = block.getCommentText();\r\n      if (comment) {\r\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\r\n        commentCode += this.prefixLines(comment, '// ') + '\\n';\r\n      }\r\n      // Collect comments for all value arguments.\r\n      // Don't collect comments for nested statements.\r\n      for (let i = 0; i < block.inputList.length; i++) {\r\n        if (block.inputList[i].type === inputTypes.VALUE) {\r\n          const childBlock = block.inputList[i].connection!.targetBlock();\r\n          if (childBlock) {\r\n            comment = this.allNestedComments(childBlock);\r\n            if (comment) {\r\n              commentCode += this.prefixLines(comment, '// ');\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const nextBlock =\r\n      block.nextConnection && block.nextConnection.targetBlock();\r\n    const nextCode = thisOnly ? '' : this.blockToCode(nextBlock);\r\n    return commentCode + code + nextCode;\r\n  }\r\n\r\n  /**\r\n   * Generate code representing the specified value input, adjusted to take into\r\n   * account indexing (zero- or one-based) and optionally by a specified delta\r\n   * and/or by negation.\r\n   *\r\n   * @param block The block.\r\n   * @param atId The ID of the input block to get (and adjust) the value of.\r\n   * @param delta Value to add.\r\n   * @param negate Whether to negate the value.\r\n   * @param order The highest order acting on this value.\r\n   * @returns The adjusted value or code that evaluates to it.\r\n   */\r\n  getAdjusted(\r\n    block: Block,\r\n    atId: string,\r\n    delta = 0,\r\n    negate = false,\r\n    order = Order.NONE,\r\n  ): string {\r\n    if (block.workspace.options.oneBasedIndex) {\r\n      delta--;\r\n    }\r\n    let defaultAtIndex = block.workspace.options.oneBasedIndex ? '1' : '0';\r\n\r\n    let orderForInput = order;\r\n    if (delta > 0) {\r\n      orderForInput = Order.ADDITION;\r\n    } else if (delta < 0) {\r\n      orderForInput = Order.SUBTRACTION;\r\n    } else if (negate) {\r\n      orderForInput = Order.UNARY_NEGATION;\r\n    }\r\n\r\n    let at = this.valueToCode(block, atId, orderForInput) || defaultAtIndex;\r\n\r\n    // Easy case: no adjustments.\r\n    if (delta === 0 && !negate) {\r\n      return at;\r\n    }\r\n    // If the index is a naked number, adjust it right now.\r\n    if (stringUtils.isNumber(at)) {\r\n      at = String(Number(at) + delta);\r\n      if (negate) {\r\n        at = String(-Number(at));\r\n      }\r\n      return at;\r\n    }\r\n    // If the index is dynamic, adjust it in code.\r\n    if (delta > 0) {\r\n      at = `${at} + ${delta}`;\r\n    } else if (delta < 0) {\r\n      at = `${at} - ${-delta}`;\r\n    }\r\n    if (negate) {\r\n      at = delta ? `-(${at})` : `-${at}`;\r\n    }\r\n    if (Math.floor(order) >= Math.floor(orderForInput)) {\r\n      at = `(${at})`;\r\n    }\r\n    return at;\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Generating PHP for dynamic variable blocks.\r\n */\r\n\r\n// Former goog.module ID: Blockly.PHP.variablesDynamic\r\n\r\n// generator is dynamically typed.\r\nexport {\r\n  variables_get as variables_get_dynamic,\r\n  variables_set as variables_set_dynamic,\r\n} from './variables.js';\r\n","/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @file Instantiate a PhpGenerator and populate it with the complete\r\n * set of block generator functions for PHP.  This is the entrypoint\r\n * for php_compressed.js.\r\n */\r\n\r\n// Former goog.module ID: Blockly.PHP.all\r\n\r\nimport {PhpGenerator} from './php/php_generator.js';\r\nimport * as colour from './php/colour.js';\r\nimport * as lists from './php/lists.js';\r\nimport * as logic from './php/logic.js';\r\nimport * as loops from './php/loops.js';\r\nimport * as math from './php/math.js';\r\nimport * as procedures from './php/procedures.js';\r\nimport * as text from './php/text.js';\r\nimport * as variables from './php/variables.js';\r\nimport * as variablesDynamic from './php/variables_dynamic.js';\r\n\r\nexport * from './php/php_generator.js';\r\n\r\n/**\r\n * Php code generator instance.\r\n * @type {!PhpGenerator}\r\n */\r\nexport const phpGenerator = new PhpGenerator();\r\n\r\n// Install per-block-type generator functions:\r\nconst generators: typeof phpGenerator.forBlock = {\r\n  ...colour,\r\n  ...lists,\r\n  ...logic,\r\n  ...loops,\r\n  ...math,\r\n  ...procedures,\r\n  ...text,\r\n  ...variables,\r\n  ...variablesDynamic,\r\n};\r\nfor (const name in generators) {\r\n  phpGenerator.forBlock[name] = generators[name];\r\n}\r\n"]}